//JS: Gluo
var EnvironmentServicesProduction = function(){

	var autocompleteTokenfield = function (term, groups, cuentas){

		return true;

	}

	var login = {
		getPassForgotResponse : function(data, form){
			/**Posibles mensajes

				SIN REGISTRARSE UF
					El número que ingresaste no puede ser registrado en Mi Telcel Empresas, debido a que no es una cuenta Corporativa Telcel.

				SIN REGISTRARSE
					El correo electrónico que ingresaste no está asociado a una cuenta Corporativa Telcel.
					¿Necesitas ayuda? Contacta a tu Ejecutivo.

				SIN REGISTRARSE CON CORREO ELECTRONICO COPORATIVO
					El correo electrónico que ingresaste no está registrado en Mi Telcel Empresas.
					¿Necesitas ayuda? Contacta a tu Ejecutivo.

				ERROR
					Esta consulta por el momento no está disponible.
					Estamos trabajando para servirte mejor, por favor intenta más tarde.

				ÉXITO
					Tu contraseña ha sido enviada con éxito al correo electrónico que proporcionaste en tu registro.

				ERROR (intento 6)
					Tu contraseña recuperada fue enviada al correo electrónico que proporcionaste en tu registro. ¿Necesitas ayuda? Contacta a tu Ejecutivo.
			**/

			/* Error */
			if(error){
				var msgHTML = 'Esta consulta por el momento no está disponible.';
				$('.login-form-block .general-error .text').html(msgHTML);
				handleErrorTooltip(true);
				scrollToElement($('.login-form'));
			}

			else{
				$(form).find('.form-block').addClass('hidden');
				$(form).find('.success-tooltip').removeClass('hidden');
			}

			function handleErrorTooltip(show){
				var $error = $('.login-form-block .general-error');
				if(show)
					$error.removeClass('hidden');
				else
					$error.addClass('hidden');
			}
		},

		getPassForgotFailResponse : function (error, form){
			console.log(error);
		},
		getUserLoginResponse : function(data, form){
			/**Posibles mensajes

		  		Error (Intentos 1-5, 7, 9)
			  		La contraseña es incorrecta. Por favor, verifícala. ¿Olvidaste tu contraseña?

				Bloqueo 15 mins (Intento 6)
				Bloqueo 30 mins (Intento 8)
					Has excedido el número de intentos. Por seguridad no podrás iniciar sesión en este momento. Por favor, intenta más tarde.

				Bloqueo total (Intento 10)
					Has excedido el número de intentos permitidos. Para cualquier aclaración, comunícate con tu ejecutivo.

			**/

			/** ERROR**/
			if(error){
				var msgHTML = 'Has excedido el número de intentos permitidos. Para cualquier aclaración, comunícate con tu ejecutivo.';
				$('.login-form-block .general-error .text').html(msgHTML);
				$('.login-form-block .general-error').removeClass('hidden');
			}
			else
				location.reload();
		},
		getUserLoginFailResponse : function(error, form){
			console.log(error);
		},
		getActivarCuentaResponse : function(data, form){
			console.log('Formulario enviado.');
		},
		getActivarCuentaFailResponse : function(error, form){
			console.log(error);
		},
		getEstablecerContrasenaResponse : function(data, form){
			console.log('Formulario enviado.');
		},
		getEstablecerContrasenaFailResponse : function(error, form){
			console.log(error);
		},
		getActualizarDatosResponse : function(data, form){
			console.log('Formulario enviado.');
		},
		getActualizarDatosFailResponse : function(error, form){
			console.log(error);
		},
	}


	return{

		general : {
			autocomplete : autocompleteTokenfield
		},
		login : {
			passForgotCallSuccess : login.getPassForgotResponse,
			passForgotCallFail : login.getPassForgotFailResponse,
			userLoginCallSuccess : login.getUserLoginResponse,
			userLoginCallFail : login.getUserLoginFailResponse,
			activarCuentaCallSuccess : login.getActivarCuentaResponse,
			activarCuentaCallFail : login.getActivarCuentaFailResponse,
			reestablecerContrasenaCallSuccess : login.getEstablecerContrasenaResponse,
			reestablecerContrasenaCallFail : login.getEstablecerContrasenaFailResponse,
			actualizarDatosCallSuccess : login.getActualizarDatosResponse,
			actualizarDatosCallFail : login.getActualizarDatosFailResponse
		}

	}

}();
//JS: Multiplica

/*Variable auxiliar de cuentas asociadas**/
var cuentasAsociadasAuxiliar = [
	{
		id: "1",
		tipo: 1,
		cuenta: '1278348812',
		region : '1',
		rfc : 'ALMD210389HST',
		razonsocial : 'TDMA Celular S.A. de C.V.',
		asociada : true
	},
	{
		id: "2",
		tipo: 1,
		cuenta: '3476120923',
		region : '9',
		rfc : 'CM4D3S0389HST',
		razonsocial : 'LALAD Celular S.A. de C.V.',
		asociada : false
	},
	{
		id: "3",
		tipo: 2,
		cuenta: '0956781673',
		region : '2',
		rfc : 'ALMD29IS45HST',
		razonsocial : 'CFGM Celular S.A. de C.V.',
		asociada : true
	},
	{
		id: "4",
		tipo: 1,
		cuenta: '9876540999',
		region : '9',
		rfc : 'LKS3450389HST',
		razonsocial : 'ARHF Celular S.A. de C.V.',
		asociada : true
	},
	{
		id: "5",
		tipo: 2,
		cuenta: '7783326532',
		region : '3',
		rfc : 'A2EDR50389HST',
		razonsocial : 'AAA Celular S.A. de C.V.',
		asociada : false
	},
	{
		id: "6",
		tipo: 2,
		cuenta: '9865430912',
		region : '6',
		rfc : 'ERWA450389HST',
		razonsocial : 'Erwin Watt S.A. de C.V.',
		asociada : false
	},
	{
		id: "7",
		tipo: 2,
		cuenta: '0988906728',
		region : '7',
		rfc : 'TBON450389HST',
		razonsocial : 'Tim Burton S.A. de C.V.',
		asociada : false
	},
	{
		id: "8",
		tipo: 1,
		cuenta: '3455430923',
		region : '9',
		rfc : 'ERWA450389HST',
		razonsocial : 'Erwin Watt S.A. de C.V.',
		asociada : true
	},
	{
		id: "9",
		tipo: 2,
		cuenta: '7896547834',
		region : '4',
		rfc : 'TROY450389HST',
		razonsocial : 'The Royals S.A. de C.V.',
		asociada : false
	},
	{
		id: "10",
		tipo: 1,
		cuenta: '1278561092',
		region : '1',
		rfc : 'EHAR450389HST',
		razonsocial : 'Ella Harper S.A. de C.V.',
		asociada : false
	},
	{
		id: "11",
		tipo: 1,
		cuenta: '8877662356',
		region : '9',
		rfc : 'PAPER50389HST',
		razonsocial : 'Paper S.A. de C.V.',
		asociada : false
	},
	{
		id: "12",
		tipo: 2,
		cuenta: '9098909837',
		region : '3',
		rfc : 'KIRK450389HST',
		razonsocial : 'Kirkus Reviews S.A. de C.V.',
		asociada : true
	},
	{
		id: "13",
		tipo: 1,
		cuenta: '1278348812',
		region : '1',
		rfc : 'ALMD210389HST',
		razonsocial : 'TDMA Celular S.A. de C.V.',
		asociada : true
	},
	{
		id: "14",
		tipo: 1,
		cuenta: '3476120923',
		region : '9',
		rfc : 'CM4D3S0389HST',
		razonsocial : 'LALAD Celular S.A. de C.V.',
		asociada : false
	},
	{
		id: "15",
		tipo: 2,
		cuenta: '0956781673',
		region : '2',
		rfc : 'ALMD29IS45HST',
		razonsocial : 'CFGM Celular S.A. de C.V.',
		asociada : true
	},
	{
		id: "16",
		tipo: 1,
		cuenta: '9876540999',
		region : '9',
		rfc : 'LKS3450389HST',
		razonsocial : 'ARHF Celular S.A. de C.V.',
		asociada : true
	},
	{
		id: "17",
		tipo: 2,
		cuenta: '7783326532',
		region : '3',
		rfc : 'A2EDR50389HST',
		razonsocial : 'AAA Celular S.A. de C.V.',
		asociada : false
	},
	{
		id: "18",
		tipo: 2,
		cuenta: '9865430912',
		region : '6',
		rfc : 'ERWA450389HST',
		razonsocial : 'Erwin Watt S.A. de C.V.',
		asociada : false
	},
	{
		id: "19",
		tipo: 2,
		cuenta: '0988906728',
		region : '7',
		rfc : 'TBON450389HST',
		razonsocial : 'Tim Burton S.A. de C.V.',
		asociada : false
	},
	{
		id: "20",
		tipo: 1,
		cuenta: '3455430923',
		region : '9',
		rfc : 'ERWA450389HST',
		razonsocial : 'Erwin Watt S.A. de C.V.',
		asociada : true
	},
	{
		id: "21",
		tipo: 1,
		cuenta: '1278348812',
		region : '1',
		rfc : 'ALMD210389HST',
		razonsocial : 'TDMA Celular S.A. de C.V.',
		asociada : true
	},
	{
		id: "22",
		tipo: 1,
		cuenta: '3476120923',
		region : '9',
		rfc : 'CM4D3S0389HST',
		razonsocial : 'LALAD Celular S.A. de C.V.',
		asociada : false
	},
	{
		id: "23",
		tipo: 2,
		cuenta: '0956781673',
		region : '2',
		rfc : 'ALMD29IS45HST',
		razonsocial : 'CFGM Celular S.A. de C.V.',
		asociada : true
	},
	{
		id: "24",
		tipo: 1,
		cuenta: '9876540999',
		region : '9',
		rfc : 'LKS3450389HST',
		razonsocial : 'ARHF Celular S.A. de C.V.',
		asociada : true
	},
	{
		id: "25",
		tipo: 2,
		cuenta: '7783326532',
		region : '3',
		rfc : 'A2EDR50389HST',
		razonsocial : 'AAA Celular S.A. de C.V.',
		asociada : false
	},
	{
		id: "26",
		tipo: 2,
		cuenta: '9865430912',
		region : '6',
		rfc : 'ERWA450389HST',
		razonsocial : 'Erwin Watt S.A. de C.V.',
		asociada : false
	},
	{
		id: "27",
		tipo: 2,
		cuenta: '0988906728',
		region : '7',
		rfc : 'TBON450389HST',
		razonsocial : 'Tim Burton S.A. de C.V.',
		asociada : false
	},
	{
		id: "28",
		tipo: 1,
		cuenta: '3455430923',
		region : '9',
		rfc : 'ERWA450389HST',
		razonsocial : 'Erwin Watt S.A. de C.V.',
		asociada : true
	},
	{
		id: "29",
		tipo: 2,
		cuenta: '7896547834',
		region : '4',
		rfc : 'TROY450389HST',
		razonsocial : 'The Royals S.A. de C.V.',
		asociada : false
	},
	{
		id: "30",
		tipo: 1,
		cuenta: '1278561092',
		region : '1',
		rfc : 'EHAR450389HST',
		razonsocial : 'Ella Harper S.A. de C.V.',
		asociada : false
	},
	{
		id: "31",
		tipo: 1,
		cuenta: '8877662356',
		region : '9',
		rfc : 'PAPER50389HST',
		razonsocial : 'Paper S.A. de C.V.',
		asociada : false
	},
	{
		id: "32",
		tipo: 2,
		cuenta: '9098909837',
		region : '3',
		rfc : 'KIRK450389HST',
		razonsocial : 'Kirkus Reviews S.A. de C.V.',
		asociada : true
	}
];
/** Fin variable auxiliar con cuentas asociadas **/
Date.prototype.addDays = function(days) {
    var dat = new Date(this.valueOf())
    dat.setDate(dat.getDate() + days);
    return dat;
}

function getDates(startDate, stopDate) {
    var dateArray = new Array();
    var currentDate = startDate;
    while (currentDate <= stopDate) {
        dateArray.push( new Date (currentDate) )
        currentDate = currentDate.addDays(1);
    }
    return dateArray;
}

var EnvironmentServicesDevelopment = function(){

	var buscador = {
		solicitudDescargas : {
			searchForm : function(form_data, urlPOST){
				console.log(form_data);
				window.location.href = urlPOST;
			},
			/**Método para ejecutar la limpieza de la búsqueda
			para fines de simulación del proceso se va a comentar el método.**/
			// cleanForm : function(form_data, urlPOST){
			// 	console.log('cleaning');
			// }
		},
		facturasFiscales : {
			searchForm : function(form_data, urlPOST){
				console.log(form_data);
				window.location.href = urlPOST;
			},
			/**Método para ejecutar la limpieza de la búsqueda
			para fines de simulación del proceso se va a comentar el método.**/
			// cleanForm : function(form_data, urlPOST){
			// 	console.log('cleaning');
			// }
		},
		estadosCuenta : {
			searchForm : function(form_data, urlPOST){
				console.log(form_data);
				window.location.href = urlPOST;
			},
			/**Método para ejecutar la limpieza de la búsqueda
			para fines de simulación del proceso se va a comentar el método.**/
			// cleanForm : function(form_data, urlPOST){
			// 	console.log('cleaning');
			// }
		},
		facturasEquipos : {
			searchForm : function(form_data, urlPOST){
				console.log(form_data);
				window.location.href = urlPOST;
			},
			/**Método para ejecutar la limpieza de la búsqueda
			para fines de simulación del proceso se va a comentar el método.**/
			// cleanForm : function(form_data, urlPOST){
			// 	console.log('cleaning');
			// }
		},
		referenciaUnica : {
			searchForm : function(form_data, urlPOST){
				console.log(form_data);
				window.location.href = urlPOST;
			},
			/**Método para ejecutar la limpieza de la búsqueda
			para fines de simulación del proceso se va a comentar el método.**/
			// cleanForm : function(form_data, urlPOST){
			// 	console.log('cleaning');
			// }
		},
		notificacionesMTE : {
			searchForm : function(form_data, urlPOST){
				console.log(form_data);
				window.location.href = urlPOST;
			},
			/**Método para ejecutar la limpieza de la búsqueda
			para fines de simulación del proceso se va a comentar el método.**/
			// cleanForm : function(form_data, urlPOST){
			// 	console.log('cleaning');
			// }
		},
		historialMovimientos : {
			searchForm : function(form_data, urlPOST){
				console.log(form_data);
				window.location.href = urlPOST;
			},
			/**Método para ejecutar la limpieza de la búsqueda
			para fines de simulación del proceso se va a comentar el método.**/
			cleanForm : function(form_data, urlPOST){
				console.log('cleaning');
			}
		},
		historialMovimientosDetalles : {
			searchForm : function(form_data, urlPOST){
				console.log(form_data);
				window.location.href = urlPOST;
			},
			/**Método para ejecutar la limpieza de la búsqueda
			para fines de simulación del proceso se va a comentar el método.**/
			// cleanForm : function(form_data, urlPOST){
			// 	console.log('cleaning');
			// }
		},
		consultaCuentas : {
			searchForm : function(form_data, urlPOST){
				console.log(form_data);
				window.location.href = urlPOST;
			},
			/**Método para ejecutar la limpieza de la búsqueda
			para fines de simulación del proceso se va a comentar el método.**/
			// cleanForm : function(form_data, urlPOST){
			// 	console.log('cleaning');
			// }
		},
		gestionGrupos : {
			searchForm : function(form_data, urlPOST){
				console.log(form_data);
				window.location.href = urlPOST;
			},
			/**Método para ejecutar la limpieza de la búsqueda
			para fines de simulación del proceso se va a comentar el método.**/
			// cleanForm : function(form_data, urlPOST){
			// 	console.log('cleaning');
			// }
		},
		misCitas : {
			searchForm : function(form_data, urlPOST){
				console.log(form_data);
				window.location.href = urlPOST;
			},
			/**Método para ejecutar la limpieza de la búsqueda
			para fines de simulación del proceso se va a comentar el método.**/
			// cleanForm : function(form_data, urlPOST){
			// 	console.log('cleaning');
			// }
		},
		adendum : {
			searchForm : function(form_data, urlPOST){
				console.log(form_data);
				window.location.href = urlPOST;
			},
			/**Método para ejecutar la limpieza de la búsqueda
			para fines de simulación del proceso se va a comentar el método.**/
			// cleanForm : function(form_data, urlPOST){
			// 	console.log('cleaning');
			// }
		},
		sertec : {
			searchForm : function(form_data, urlPOST){
				console.log(form_data);
				window.location.href = urlPOST;
			},
			/**Método para ejecutar la limpieza de la búsqueda
			para fines de simulación del proceso se va a comentar el método.**/
			// cleanForm : function(form_data, urlPOST){
			// 	console.log('cleaning');
			// }
		},
		configuracionRolUsuarios : {
			searchForm : function(form_data, urlPOST){
				console.log(form_data);
				window.location.href = urlPOST;
			},
			/**Método para ejecutar la limpieza de la búsqueda
			para fines de simulación del proceso se va a comentar el método.**/
			// cleanForm : function(form_data, urlPOST){
			// 	console.log('cleaning');
			// }
		},
		directorioContactos : {
			searchForm : function(form_data, urlPOST){
				console.log(form_data);
				window.location.href = urlPOST;
			},
			/**Método para ejecutar la limpieza de la búsqueda
			para fines de simulación del proceso se va a comentar el método.**/
			// cleanForm : function(form_data, urlPOST){
			// 	console.log('cleaning');
			// }
		},
		marcacionCorta : {
			searchForm : function(form_data, urlPOST){
				console.log(form_data);
				window.location.href = urlPOST;
			},
			/**Método para ejecutar la limpieza de la búsqueda
			para fines de simulación del proceso se va a comentar el método.**/
			// cleanForm : function(form_data, urlPOST){
			// 	console.log('cleaning');
			// }
		},
		desvioLlamadas : {
			searchForm : function(form_data, urlPOST){
				console.log(form_data);
				window.location.href = urlPOST;
			},
			/**Método para ejecutar la limpieza de la búsqueda
			para fines de simulación del proceso se va a comentar el método.**/
			// cleanForm : function(form_data, urlPOST){
			// 	console.log('cleaning');
			// }
		},
		abonoDeSaldo : {
			searchForm : function(form_data, urlPOST){
				console.log(form_data);
				window.location.href = urlPOST;
			},
			/**Método para ejecutar la limpieza de la búsqueda
			para fines de simulación del proceso se va a comentar el método.**/
			// cleanForm : function(form_data, urlPOST){
			// 	console.log('cleaning');
			// }
		},
	};

	/*Métodos para el ordenamiento*/

	var ordenamiento = {
		ordenamientoHistorialMovimientos : function(data){
			console.log('ordenando...');
		},
		ordenamientoHistorialMovimientosDetalle : function(data){
			console.log('ordenando...');
		},
		ordenamientoSertec : function(data){
			console.log('ordenando...');
		},
		ordenamientoSertecMovimientosDetalle :  function(data){
			console.log('ordenando...');
		},
		ordenamientoUsuarios : function(data){
			console.log('ordenando...');
		},
		ordenamientoDirectorio : function(data){
			console.log('ordenando...');
		},
		ordenamientoMarcacionCorta : function(data){
			console.log('ordenando...');
		},
		ordenamientoControlCostos : function(data){
			console.log('ordenando...');
		},
		ordenamientoDesvioLlamadas : function(data){
			console.log('ordenando...');
		},
		ordenamientoAbonoDeSaldo : function(data){
			console.log('ordenando...');
		},
	};

	var autocompleteTokenfield = function (term, groups, cuentas, isCitas, isIMEI){

		term = term.toLowerCase();

		var dataBaseLineas = [
			{ telefono: '3172376804',	nombre :	'Carmon Hodgkinson'  },
			{ telefono: '7864046711',	nombre :	'Anjelica Friedel'  },
			{ telefono: '1090068090',	nombre :	'Eda Levesque'  },
			{ telefono: '4549232325',	nombre :	'Orville Galland'  },
			{ telefono: '9311794118',	nombre :	'Penny Dellinger'  },
			{ telefono: '7131659895',	nombre :	'Lizzie Kimble'  },
			{ telefono: '342712684',	nombre :	'Regine Chesser'  },
			{ telefono: '1948030120',	nombre :	'Katheleen Fitzgerald'  },
			{ telefono: '311613692',	nombre :	'Elke Binford'  },
			{ telefono: '6622847607',	nombre :	'Gwenda Herlihy'  },
			{ telefono: '6722864901',	nombre :	'Brande Junk'  },
			{ telefono: '9159460848',	nombre :	'Jeana Sisneros'  },
			{ telefono: '193737155',	nombre :	'Jayne Stoker'  },
			{ telefono: '4909664544',	nombre :	'Ethyl Solberg'  },
			{ telefono: '2175648814',	nombre :	'Gisela Keeton'  },
			{ telefono: '6428808714',	nombre :	'Cheryle Carman'  },
			{ telefono: '3386014510',	nombre :	'Epifania Lezama'  },
			{ telefono: '5987266306',	nombre :	'Sharan Vegas'  },
			{ telefono: '4757536444',	nombre :	'Doug Simoneaux'  },
			{ telefono: '9579050608',	nombre :	'Lesha Mays'  },
			{ telefono: '2010932216',	nombre :	'Essie Revell'  },
			{ telefono: '4087297513',	nombre :	'Eli Harmer'  },
			{ telefono: '9453530993',	nombre :	'Delma Abe'  },
			{ telefono: '2079092600',	nombre :	'Nevada Kieser'  },
			{ telefono: '9460638908',	nombre :	'Amos Jaso'  },
			{ telefono: '4113172858',	nombre :	'Cori Raso'  },
			{ telefono: '1646087386',	nombre :	'Shonna Holbert'  },
			{ telefono: '2821144490',	nombre :	'Gayle Tarleton'  },
			{ telefono: '3571474313',	nombre :	'Coleen Blackmore'  },
			{ telefono: '7272322155',	nombre :	'Brig Rieger'  },
			{ telefono: '6285052885',	nombre :	'August Heatwole'  },
			{ telefono: '1479918835',	nombre :	'Dagny Lawlor'  },
			{ telefono: '60922028',	nombre :	'Melvina Mannino'  },
			{ telefono: '76286508',	nombre :	'Annalisa Ertle'  },
			{ telefono: '7890667453',	nombre :	'Janeth Hepworth'  },
			{ telefono: '9463400897',	nombre :	'Lacey Jone'  },
			{ telefono: '9703216172',	nombre :	'Nicholle Tallarico'  },
			{ telefono: '8341885379',	nombre :	'Lanny Norby'  },
			{ telefono: '277220641',	nombre :	'Bernard Steelman'  },
			{ telefono: '6070584291',	nombre :	'Mitsue Dieterich'  },
			{ telefono: '4568091403',	nombre :	'Asa Donnell'  },
			{ telefono: '1751507313',	nombre :	'Eva Troxell'  },
			{ telefono: '5710220419',	nombre :	'Delphia Currence'  },
			{ telefono: '9712043211',	nombre :	'Arlinda Jonas'  },
			{ telefono: '4135010217',	nombre :	'Salvador Speers'  },
			{ telefono: '2707843333',	nombre :	'Britteny Weatherford'  },
			{ telefono: '1592750103',	nombre :	'Kristine Champion'  },
			{ telefono: '6600100480',	nombre :	'Shavonda Boutte'  },
			{ telefono: '3343789590',	nombre :	'Antwan Thorington'  },
			{ telefono: '9592512966',	nombre :	'Alexandria Fairchild'  },
			{ telefono: '5967136829',	nombre :	'Kenya Harrell'  },
			{ telefono: '8530333857',	nombre :	'Nina Sutherland'  },
			{ telefono: '965000954',	nombre :	'Carmel Botta'  },
			{ telefono: '8146458415',	nombre :	'Jonell Weingart'  },
			{ telefono: '8625696398',	nombre :	'Otis Hogsett'  },
			{ telefono: '690251269',	nombre :	'Shena Wadsworth'  },
			{ telefono: '1582741989',	nombre :	'Deedee Quirion'  },
			{ telefono: '9263628697',	nombre :	'Ardath Swager'  },
			{ telefono: '3747716917',	nombre :	'Margery Dauphin'  },
			{ telefono: '3342930954',	nombre :	'Ena Terrones'  },
			{ telefono: '294227633',	nombre :	'Octavia Yanez'  },
			{ telefono: '9307524445',	nombre :	'Patrice Meszaros'  },
			{ telefono: '9122619309',	nombre :	'Camille Ekdahl'  },
			{ telefono: '323470901',	nombre :	'Peggy Schweizer'  },
			{ telefono: '8892520651',	nombre :	'Minda Aguinaldo'  },
			{ telefono: '6521099219',	nombre :	'Regina Bivins'  },
			{ telefono: '7995809591',	nombre :	'Maranda Backstrom'  },
			{ telefono: '2228458736',	nombre :	'Ozella Hora'  },
			{ telefono: '6876354539',	nombre :	'Miranda Cockrill'  },
			{ telefono: '2984927955',	nombre :	'Evita Overholt'  },
			{ telefono: '1620423275',	nombre :	'Tena Ryland'  },
			{ telefono: '6957176297',	nombre :	'Leonore Town'  },
			{ telefono: '258380228',	nombre :	'Bart Miguez'  },
			{ telefono: '8828045554',	nombre :	'Ana Mayberry'  },
			{ telefono: '933779756',	nombre :	'Georgene Sizemore'  },
			{ telefono: '813191144',	nombre :	'Mindy Trollinger'  },
			{ telefono: '4278070549',	nombre :	'Darnell Gullatt'  },
			{ telefono: '224213746',	nombre :	'Michell Cargile'  },
			{ telefono: '4736260722',	nombre :	'Eli Winger'  },
			{ telefono: '1861016838',	nombre :	'Florence Langenfeld'  },
			{ telefono: '8010298111',	nombre :	'Kami Mcgarity'  },
			{ telefono: '5853296925',	nombre :	'Bernard Linsley'  },
			{ telefono: '4578327274',	nombre :	'Therese Brugger'  },
			{ telefono: '8197357753',	nombre :	'Janine Minier'  },
			{ telefono: '127946504',	nombre :	'Racquel Kroner'  },
			{ telefono: '333260956',	nombre :	'Jerrell Atwater'  },
			{ telefono: '1095719261',	nombre :	'Leeanna Kenison'  },
			{ telefono: '9283745428',	nombre :	'Nenita Balentine'  },
			{ telefono: '661138357',	nombre :	'Herminia Gravely'  },
			{ telefono: '2021604938',	nombre :	'Caryl Fitzsimons'  },
			{ telefono: '5435067565',	nombre :	'Charlette Pickel'  },
			{ telefono: '1271765133',	nombre :	'Shaunda Finkbeiner'  },
			{ telefono: '3295816228',	nombre :	'Bethany Shake'  },
			{ telefono: '1765550927',	nombre :	'Jeri Hudkins'  },
			{ telefono: '2101007539',	nombre :	'Normand Llanas'  },
			{ telefono: '5084634192',	nombre :	'Nathalie Lehner'  },
			{ telefono: '570460122',	nombre :	'Wilbert Mire'  },
			{ telefono: '9909846314',	nombre :	'Jae Brookman'  },
			{ telefono: '1811622222',	nombre :	'Larhonda Korus'  },
			{ telefono: '6840769161',	nombre :	'Ollie Yohe'  }
		];

		var dataBaseGroup = [
			{ id: '99', nombre :	'Multiplex', total: 83 },
			{ id: '100', nombre :	'Multinacional', total: 51 },
			{ id: '101', nombre :	'Multiplica', total: 10 },
			{ id: '102', nombre :	'Gluo', total: 30 },
			{ id: '103', nombre :	'CFE', total: 20 },
			{ id: '104', nombre :	'Dev MX', total: 12 },
			{ id: '105', nombre :	'UX MX', total: 13 },
			{ id: '106', nombre :	'Lab MX', total: 3 },
			{ id: '107', nombre :	'Metriplica', total: 1 },
			{ id: '108', nombre :	'SEO MX', total: 0 }
		];

		var dataBaseCuentas= [
			{ id: '1234567812', nombre :	'Incrementa consulting S.A.' },
			{ id: '8747843211', nombre :	'Empresa no. 2 S.A. de C.V.' },
			{ id: '4532003411', nombre : 'Kliev S.A. de C.V.' },
			{ id: '3566229912', nombre :	'Tabacalera S.A. de C.V.' }
		];

		var dataBaseIMEI= [
			{ id: '2', imei : '123456789012345', nombre :	'Sony X10', telefono: '3172376804' },
			{ id: '28', imei : '123456789054321', nombre : 'Motorola - Moto G', telefono: '3172376804' },
			{ id: '30', imei : '123456789056745', nombre : 'Samsung S5', telefono: '3172376804' },
			{ id: '45', imei : '123456789012333', nombre : 'Iphone 5S', telefono: '3172376804' }
		];

		var queryresults  = [];

		if(cuentas){

			$.each( dataBaseCuentas, function( i, v ) {
			 	if (v.nombre.toLowerCase().indexOf(term) >= 0  || v.id.indexOf(term) >= 0 ) {

		            v.label = v.nombre;
		            v.cuenta = v.id;
		            v.tipo = 'cuenta';
		            v.id = v.id;
		            queryresults.push(v);
		        }

			});
		}
		else if(isIMEI){

			$.each( dataBaseIMEI, function( i, v ) {
			 	if (v.telefono.indexOf(term) >= 0  || v.imei.indexOf(term) >= 0 ) {

		            v.label = v.telefono+'-'+v.imei;
		            v.imei = v.imei;
		            v.tipo = 'imei';
		            v.id = v.id;
		            v.telefono = v.telefono;
		            queryresults.push(v);
		        }

			});

		}
		else{

			$.each( dataBaseLineas, function( i, v ) {

			 	if (v.nombre.toLowerCase().indexOf(term) >= 0 || v.telefono.indexOf(term) >= 0 ) {
		            if(isCitas)
		            	v.label = v.telefono;
		            else
		            	v.label =  v.nombre + '-' + v.telefono;
			 		v.tipo = 'single';
		            v.id = i;
		            queryresults.push(v);
		        }

			});

			if(groups){
				$.each( dataBaseGroup, function( i, v ) {

				 	if (v.nombre.toLowerCase().indexOf(term) >= 0 ) {
			            v.label = v.nombre+' ('+v.total+')';
			            v.tipo = 'group';
			            v.id = v.id;
			            queryresults.push(v);
			        }

				});
			}
		}

		console.log(queryresults);
		return queryresults;

	}

	var general = {
		getArbolBusquedaGeneralResponse : function(data, container){
			var data = { success: true, data: data };

			var hash = window.location.hash;

			if(hash=='#sinResultados'){
				var data = { success: true, data: [] };
			}

			$('#tree-lineas-search').find('.tree-arbol-sin-resultados').remove();

			if(data.success){
		  		$('#tree-lineas').hide();

		  		if(data.data.length>0){
		  			$('#tree-lineas-search').find('.jstree-children').removeClass('hidden');
			  		$('#tree-lineas-search').jstree(true).settings.core.data = data.data;
					$('#tree-lineas-search').jstree(true).refresh();

					var newNodes = data.data;

					newNodes.forEach(function(node, i){

						if($('#'+node.id).length==0){
							var created = $('#tree-lineas').jstree(true).create_node("#", node);
						}
					});
				}
				else{
					$('#tree-lineas-search').find('.jstree-children').addClass('hidden');
					$('#tree-lineas-search').append('<div class="notif-bloq tree-arbol-sin-resultados"> <div class="row"> <div class="col-xs-12 inner-nb"> <span class="icon io-Alert2"></span> <p class="only-p">No existen resultados. Modifica tu(s) criterio(s) de búsqueda.</p> </div> </div> </div>');
				}

				$('#tree-lineas-search').show();
				$('#componente-ingresar-lineas .lineas-arbol .btn-remover-seleccion').removeClass('active');

				$('#componente-ingresar-lineas .lineas-arbol .block-content-arbol-btn').removeClass('hidden');
				$('#componente-ingresar-lineas .lineas-arbol .btn-remover-busqueda').addClass('active');


		  	}
		  	else{

		  	}
		},
		getArbolBusquedaGeneralFailResponse : function (error, container){
			console.log(error);
		},
		getArbolBusquedaGruposResponse : function(data, container, arbolId){
			var data = { success: true, data: data };

			var hash = window.location.hash;

			if(hash=='#sinResultados'){
				var data = { success: true, data: [] };
			}

			$('#' + arbolId + ' .tree-grupos-search').find('.tree-arbol-sin-resultados').remove();

			if(data.success){
		  		$('#' + arbolId + ' .tree-grupos').hide();

		  		if(data.data.length>0){
		  			$('#' + arbolId + ' .tree-grupos-search').find('.jstree-children').removeClass('hidden');
			  		$('#' + arbolId + ' .tree-grupos-search').jstree(true).settings.core.data = data.data;
					$('#' + arbolId + ' .tree-grupos-search').jstree(true).refresh();

					var newNodes = data.data;

					newNodes.forEach(function(node, i){

						if($('#'+node.id).length==0){
							var created = $('#' + arbolId + ' .tree-grupos').jstree(true).create_node("#", node);
						}
					});
				}
				else{
					$('#' + arbolId + ' .tree-grupos-search').find('.jstree-children').addClass('hidden');
					$('#' + arbolId + ' .tree-grupos-search').append('<div class="notif-bloq tree-arbol-sin-resultados"> <div class="row"> <div class="col-xs-12 inner-nb"> <span class="icon io-Alert2"></span> <p class="only-p">No existen resultados. Modifica tu(s) criterio(s) de búsqueda.</p> </div> </div> </div>');
				}

				$('#' + arbolId + ' .tree-grupos-search').show();
				$('#' + arbolId + ' .btn-remover-seleccion').removeClass('active');

				$('#' + arbolId + ' .block-content-arbol-btn').removeClass('hidden');
				$('#' + arbolId + ' .btn-remover-busqueda').addClass('active');


		  	}
		  	else{

		  	}
		},
		getArbolBusquedaGruposFailResponse : function (error, container, arbolId){
			console.log(error);
		},
	};

	var login = {
		getPassForgotResponse : function(data, form){
			/**Posibles mensajes

				SIN REGISTRARSE UF
					El número que ingresaste no puede ser registrado en Mi Telcel Empresas, debido a que no es una cuenta Corporativa Telcel.

				SIN REGISTRARSE
					El correo electrónico que ingresaste no está asociado a una cuenta Corporativa Telcel.
					¿Necesitas ayuda? Contacta a tu Ejecutivo.

				SIN REGISTRARSE CON CORREO ELECTRONICO COPORATIVO
					El correo electrónico que ingresaste no está registrado en Mi Telcel Empresas.
					¿Necesitas ayuda? Contacta a tu Ejecutivo.

				ERROR
					Esta consulta por el momento no está disponible.
					Estamos trabajando para servirte mejor, por favor intenta más tarde.

				ÉXITO
					Tu contraseña ha sido enviada con éxito al correo electrónico que proporcionaste en tu registro.

				ERROR (intento 6)
					Tu contraseña recuperada fue enviada al correo electrónico que proporcionaste en tu registro. ¿Necesitas ayuda? Contacta a tu Ejecutivo.
			**/

			/**HASH PARA SIMULAR ERROR**/
			var hash = window.location.hash;
			if(hash=='#errorPass'){
				var msgHTML = 'Esta consulta por el momento no está disponible.';
				$('.login-form-block .general-error .text').html(msgHTML);
				handleErrorTooltip(true);
			}

			else{
				//$(form).find('.form-block').addClass('hidden');
				$('.login-form-block .general-error').addClass('hidden');
				$('.login-form-block .general-success').removeClass('hidden');
			}

			scrollToElement($('.login-form'));
			$('#pass-forgot-admin').slideToggle( 800 );

			function handleErrorTooltip(show){
				var $error = $('.login-form-block .general-error');
				if(show)
					$error.removeClass('hidden');
				else
					$error.addClass('hidden');
			}
		},

		getPassForgotFailResponse : function (error, form){
			console.log(error);
		},
		getUserLoginResponse : function(data, form){
			/**Posibles mensajes

		  		Error (Intentos 1-5, 7, 9)
			  		La contraseña es incorrecta. Por favor, verifícala. ¿Olvidaste tu contraseña?

				Bloqueo 15 mins (Intento 6)
				Bloqueo 30 mins (Intento 8)
					Has excedido el número de intentos. Por seguridad no podrás iniciar sesión en este momento. Por favor, intenta más tarde.

				Bloqueo total (Intento 10)
					Has excedido el número de intentos permitidos. Para cualquier aclaración, comunícate con tu ejecutivo.

			**/

			/**HASH PARA SIMULAR ERROR**/
			var hash = window.location.hash;

			if(hash=='#errorLogin'){
				var msgHTML = 'La contraseña es incorrecta. Por favor, verifícala. <a class="cta-shows-block nuevo" data-show="#pass-forgot-admin">¿Olvidaste tu contraseña?</a>';
				$('.login-form-block .general-error .text').html(msgHTML);
				$('.login-form-block .general-success').addClass('hidden');
				$('.login-form-block .general-error').removeClass('hidden');
			}
			else
				location.reload();
		},
		getUserLoginFailResponse : function(error, form){
			console.log(error);
		},
		getActivarCuentaResponse : function(data, form){
			var hash = window.location.hash;
			var currentURL = window.location.href.substr(0, window.location.href.indexOf('#'));

			if(hash=="#mandarError"){
				window.location.href = currentURL+'#error';
				window.location.reload();
			}
			else
				/**Este HTML es para simular si se selecciono una opción en ¿Qué quieres hacer?**/
				window.location.href = 'activa-tu-cuenta-2.html'+'#exitoLogin';

			console.log('Formulario enviado.');
		},
		getActivarCuentaFailResponse : function(error, form){
			console.log(error);
		},
		getEstablecerContrasenaResponse : function(data, form){
			console.log('Formulario enviado.');
		},
		getEstablecerContrasenaFailResponse : function(error, form){
			console.log(error);
		},
		getActualizarDatosResponse : function(data, form){

			var hash = window.location.hash;
			var currentURL = window.location.href.substr(0, window.location.href.indexOf('#'));

			if(hash=="#mandarError")
				window.location.href = currentURL+'#error';
			else
				window.location.href = currentURL+'#exito';

			window.location.reload();
			console.log('Formulario enviado.');
		},
		getActualizarDatosFailResponse : function(error, form){
			console.log(error);
		},
	};

	var gestionGrupos = {
		getAgregarGrupoResponse : function(data, form, elementData, callback){
			var data = { success: true, data: [] };

			/* simular error de nombre existente */
		  	var hash = window.location.hash;

			if(hash=='#errorNombreExistente'){
				data.success = false;
				data.error = {
					message : 'El nombre de grupo fue utilizado anteriormente, favor de ingresar uno nuevo.'
				};

			}
			/* fin simular error de nombre existente */

			if(data.success){
		  		/* simular ID agregado en la DB */
				var idAdded = $('.mosaico-view .item-mv').length;

				var parentData = $('#group-data-info').data('item');

				if(typeof parentData !='undefined' && parentData.id == elementData.currentId){
					//Envío el Id y el nombre del nuevo elemento
					callback(idAdded, elementData.name);
				}

				$('#btn-agregar-lineas-grupo-modal').attr('data-item', '{"id": "'+idAdded+'" ,"texto": "'+elementData.name+'"}');

				$(form).hide();
				$(form).addClass('success');

				$('.form-agregar-grupo .api-msg .grupo-txt').html(elementData.name);

		  	}
		  	else{

		  		/* mostrar error enviado por el sistema */

		  		if(data.error){
		  			appendErrorGeneral($('.form-agregar-grupo .element-input-block'), elementData.input , data.error.message);
		  		}

		  	}
		},
		getAgregarGrupoFailResponse : function(error, form){
			console.log(error);
		},
		getConsultarLineasResponse : function(data, currentModalData, callback){

			var data = { success: true, data: { lineasAsociadas : true } };

			/** Simular caso de uso **/
		  	var hash = window.location.hash;

			if(hash=='#casoSinLineasAsociadas'){
				data.data = {
					lineasAsociadas : false
				};
			}
			/** Simular caso de uso **/

			if(data.success){
		  		/* simular ID elimindado de la DB */
				var idDeleted = currentModalData.id;

		  		$('#modal-eliminar-grupo .alias-text').html(currentModalData.texto);

		  		/* simular cuando el grupo ya fue eliminado previamente en otra pestaña */
		  		if(hash=='#grupoPreviamenteEliminado'){
		  			$('#eliminar-grupo-ya-eliminado').show();
		  		}
		  		else{
		  			/* simular cuando hay líneas asociadas al grupo */
			  		if(data.data.lineasAsociadas){
			  			$('#confirmar-eliminar-grupo').show();
			  		}
			  		/* cuando no hay líneas asociadas */
			  		else{
			  			callback(idDeleted);
			  			$('#eliminar-grupo-confirmacion').show();

			  		}
			  	}
		  	}
		  	else{
		  		/* mostrar error enviado por el sistema */
		  		if(data.error){

		  		}

		  	}
		},
		getConsultarLineasFailResponse : function(error){
			console.log(error);
		},
		getEliminarGrupoResponse : function(data, form, currentModalData){

			/**Respuesta hardcodeada**/
			var data = { success: true };

		  	if(data.success){
		  		/**éxito**/
		  		$('#confirmar-eliminar-grupo').hide();
		  		$('#eliminar-grupo-confirmacion').show();
		  		$('#modal-eliminar-grupo .alias-text').html(currentModalData.texto);
		  	}
		  	else{
		  		/** Mostrar mensaje enviado por sistema **/
		  	}
		},
		getEliminarGrupoFailResponse : function(error, form){
			console.log(error);
		},
		getDescargarFacturasResponse : function(data, form, title){

			var hash= window.location.hash;

			/**Respuesta hardcodeada**/
			var data = { success: true };

		  	/**Caso de uso admin previamente eliminado**/
		  	if(hash=="#error-solicitud-descarga"){
				data.success = false;
				data.error = {
					message : 'Por el momento no se puede realizar tu solicitud, por favor intentalo más tarde.'
				};
			}

		  	if(data.success){
				$(form).hide();

				if(title!=null)
					title.element.html(title.text);

				$('#descargar-facturas-confirmacion').show();
		  	}
		  	else{
		  		/**mostrar mensaje enviado por sistema**/
		  		if(data.error){
					var errorHTML = '<div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb" id="error-autogestion-block"> <span class="icon io-Alert2"></span> <h2 class="h4">No se pudo procesar la operación</h2> <div id="listado-sin-autogestion-container"> <p>Lo sentimos, este servicio por el momento no está disponible. Estamos trabajando para servirte mejor. Por favor, intenta más tarde.</p> <div class="col-sm-12 btn-container"> <button type="button" class="bton blue-dark" id="btn-r-descargar-facturas">Reintentar</button> </div> </div> </div> </div> </div>';
					appendErrorGeneralHTML($('#modal-descargar .in-cont-mod'), null , errorHTML);

				}

				$(form).find('button[type="submit"]').prop('disabled', false);
		  	}
		},
		getDescargarFacturasFailResponse : function(error, form){
			console.log(error);
			/**mostrar mensaje enviado por sistema**/
	  		if(data.error){
	  			var errorHTML = '<div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb" id="error-autogestion-block"> <span class="icon io-Alert2"></span> <h2 class="h4">No se pudo procesar la operación</h2> <div id="listado-sin-autogestion-container"> <p>Lo sentimos, este servicio por el momento no está disponible. Estamos trabajando para servirte mejor. Por favor, intenta más tarde.</p> <div class="col-sm-12 btn-container"> <button type="button" class="bton blue-dark" id="btn-r-descargar-facturas">Reintentar</button> </div> </div> </div> </div> </div>';
				appendErrorGeneralHTML($('#modal-descargar .in-cont-mod'), null , errorHTML);

			}

			$(form).find('button[type="submit"]').prop('disabled', false);
		},
		getEditarNombreGrupoResponse : function(data, value, callback, $elementos){
			var $element = $elementos.element;
		  	var $input = $elementos.input;

			/**Respuesta hardcodeada**/
		  	var data = { success : true, data : [] };

			/**simular casp de uso**/
			var hash = window.location.hash;

			if(hash=='#errorNombreExistente'){

				data.success = false;

				data.error = {
					message : 'El nombre de grupo fue utilizado anteriormente, favor de ingresar uno nuevo.'
				};
			}

			if(data.success){
		  		$element.find('.name-container .ribbon-content').html(value);
		  		$element.data('name', value);
		  		$element.find('.name-container').removeClass('active-edit');

		  		var item = ( typeof $element.data('item') != 'undefined' ? $element.data('item') : null);

		  		if(item!=null){
		  			item.texto = value;
		  			$element.data('item', item);
		  		}

		  	}
		  	else{
		  		//JSON SUCCESS FALSE
		  		if(data.error){
		  			callback($element, $input, data.error.message);
		  		}

		  	}


		},
		getEditarNombreGrupoFailResponse : function(error){
			console.log(error);
		},
		getEditarNombreLineaResponse : function(data, value, callback, $elementos){

			/**Respuesta hardcodeada**/
		  	var data = { success : true, data : [] };

			/**simular casp de uso**/
			var hash = window.location.hash;

			if(hash=='#errorNombreExistente'){
				data.success = false;

				data.error = {
					message : 'Este nombre ya ha sido asignado a otro elemento.'
				};

			}

			if(data.success){
		  		$('.name-toedit-eli').html(value);
	  			$('.editar-nombre-form').removeClass('active-edit');
		  	}
		  	else{
		  		//JSON SUCCESS FALSE
		  		if(data.error){
		  			callback($elementos.element, $elementos.input, data.error.message);
		  		}

		  	}

		},
		getEditarNombreLineaFailResponse : function(error, form){
			console.log(error);
		},
		cuentasAsociadasSuccessCallback : function(modal, json, cuentasAsociadas){
			/**Hardcodeo el resultado del GETJSON **/
			json = { success: true, data: cuentasAsociadasAuxiliar };

			cuentasAsociadas.value = json.data;

			if(json.success){
				var hash = window.location.hash;

				if(hash=='#errorCuentasBusqueda' || json.data.length == 0){
		  			$('#modal-asociar-cuentas #listado-result-asoc, .button-field-mod, .pagination-block').addClass('hidden');
		  			$('#sin-resultados').removeClass('hidden');
		  		}
		  		else{
		  			$('#sin-resultados').addClass('hidden');
		  			$('#modal-asociar-cuentas #listado-result-asoc, .button-field-mod, .pagination-block').removeClass('hidden');
		  		}

				modal['data'] = json.data;
		  		modal['paginacion'].updateItems(json.data);
		  		modal['paginacion'].reset();
		  	}
		  	else{
		  		/* agregar error enviado por el sistema */
		  	}
		},
		cuentasAsociadasFailCallback : function(error){
			console.log(error);
		},
		enviarDatosAutogestionMasivos : function(data, apiPost){
			//Aquí hacer el post o lo necesario para mandar la información para la data masiva
			console.log(data);
			window.location.href = apiPost;
		},
		getBusquedaArbolGruposResponse : function(json){

			/**Respuesta hardcodeada**/
			var data = { success: true, data : json };
			var hash = window.location.hash;
		  	if(hash=='#sinResultados'){
				var data = { success: true, data: [] };
			}

		  	if(data.success){
		  		$('#tree-grupo').hide();

		  		if(data.data.length>0){
			  		$('#tree-grupo-search').jstree(true).settings.core.data = json;
					$('#tree-grupo-search').jstree(true).refresh();

					var newNodes = json;

					newNodes.forEach(function(node, i){

						if($('#'+node.id).length==0){
							var created = $('#tree-grupo').jstree(true).create_node("#", node);
						}
					});
				}
				else{
					$('#tree-grupo-search').find('.jstree-children').addClass('hidden');
					$('#tree-grupo-search').append('<div class="notif-bloq tree-arbol-sin-resultados"> <div class="row"> <div class="col-xs-12 inner-nb"> <span class="icon io-Alert2"></span> <p class="only-p">No existen resultados. Modifica tu(s) criterio(s) de búsqueda.</p> </div> </div> </div>');
				}

				$('#tree-grupo-search').show();
				$('#btn-mover-grupo').prop('disabled', true);
				$('#modal-mover-grupo .btn-remover-busqueda').addClass('active');

		  	}
		  	else{
		  		/**Mostrar mensajes de error**/
		  	}
		},
		getBusquedaArbolGruposFailResponse : function(error, form){
			console.log(error);
		},
		getMoverGrupoResponse : function(data, form, callbackError, callbackMostrarTablas, aux){

			/**Respuesta hardcodeada**/
			var data = { success: true, data : [] };

		  	data.success = true;

		  	data.data = {
		  			success : ['5567778991', '576876541', '5523657999', '5544448991', '5511145678', '5567778991', '576876541', '5523657999', '5544448991', '5511145678'],
		  			error : []
		  	};

			/**simular error caso de uso**/
			var hash = window.location.hash;

			if(hash=='#errorMoverGrupo'){

				data.success = false;

				data.error = {
					message : 'No se puede realizar el cambio. Necesitas permisos para modificar este grupo.'
				};

			}
			else if(hash=='#errorMoverMismoGrupo'){
				data.success = false;

				data.error = {
					message : 'Es necesario mover a un destino distinto al que pertenece.'
				};
			}

		  	if(data.success){
				$(form).hide();
				$(form).addClass('success');

				if(aux.moverLineas){

					/**Simular error agregar lineas**/
				  	var hash = window.location.hash;

					if(hash=='#errorAgregarLineas'){
						data.data.error = [
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' }
						];
					}
					else if(hash == '#errorAgregarTodasLineas'){
						data.data.success = [];
						data.data.error = [
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' }
						];
					}

					callbackMostrarTablas(data.data);

					$('#modal-mover-grupo .multiple-lines').show();

				}
				else{
					$('#modal-mover-grupo .grupo-txt-old').html(aux.oldMove);
					$('#modal-mover-grupo .single-msg').show();
				}

				$('#modal-mover-grupo .grupo-txt-new').html(aux.grupo);
				$('#btn-mover-grupo').prop('disabled', true);

		  	}
		  	else{
		  		/**Mostrar error que regresa el sistema**/
		  		if(data.error){
		  			callbackError($('#modal-mover-grupo .tree-groups-asoc'), null, data.error.message);
		  		}
		  	}
		},
		getMoverGrupoFailResponse : function(error, form){
			console.log(error);
		},
		postAgregarLineasArchivo : function(dataArchivo, callbackpostAgregarLineas, callbackArchivoInvalido ){
			/*Simular error de archivo ilegible */
			var hash = window.location.hash;
			if(hash=='#archivoInvalido')
				callbackArchivoInvalido();
			else{
				if(typeof dataArchivo != 'undefined')
					callbackpostAgregarLineas(dataArchivo, 'archivo');
			}
		},
		getAgregarLineasResponse : function(data, callbackMostrarTablas, callbackNextStep, aux){

			/**Respuesta hardcodeada**/
			var data = { success: true, data : [] };

			// ESTE SETTIMEOUT SOLO ESTA PARA SIMULAR QUE SE TARDA EN REGRESAR LA RESPUESTA
			setTimeout(function(){
				callbackNextStep('#modal-agregar-lineas .step-3','#modal-agregar-lineas .step-2');
				$('#modal-agregar-lineas .loading-block-screen').hide();
			}, 3000);

			/**Respuesta simulada**/

		  	data.data = {
		  			success : ['5567778991', '576876541', '5523657999', '5544448991', '5511145678', '5567778991', '576876541', '5523657999', '5544448991', '5511145678'],
		  			error : []
		  	};

			/**fin Respuesta simulada**/

			/** Simular error caso de uso **/
		  	var hash = window.location.hash;

			if(hash=='#errorAgregarLineas'){
				data.data.error = [
					{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
					{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
					{'numero' : '5523657890', 'motivo' : 'Número no existe' },
					{'numero' : '5512348991', 'motivo' : 'Número no existe' },
					{'numero' : '5512345678', 'motivo' : 'Falta de permisos' }
				];
			}
			else if(hash == '#errorAgregarTodasLineas'){
				data.data.success = [];
				data.data.error = [
					{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
					{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
					{'numero' : '5523657890', 'motivo' : 'Número no existe' },
					{'numero' : '5512348991', 'motivo' : 'Número no existe' },
					{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
					{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
					{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
					{'numero' : '5523657890', 'motivo' : 'Número no existe' },
					{'numero' : '5512348991', 'motivo' : 'Número no existe' },
					{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
					{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
					{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
					{'numero' : '5523657890', 'motivo' : 'Número no existe' },
					{'numero' : '5512348991', 'motivo' : 'Número no existe' },
					{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
					{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
					{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
					{'numero' : '5523657890', 'motivo' : 'Número no existe' },
					{'numero' : '5512348991', 'motivo' : 'Número no existe' },
					{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
					{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
					{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
					{'numero' : '5523657890', 'motivo' : 'Número no existe' },
					{'numero' : '5512348991', 'motivo' : 'Número no existe' },
					{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
					{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
					{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
					{'numero' : '5523657890', 'motivo' : 'Número no existe' },
					{'numero' : '5512348991', 'motivo' : 'Número no existe' },
					{'numero' : '5512345678', 'motivo' : 'Falta de permisos' }
				];
			}

		  	if(data.success){

				$('#btn-add-lineas-arbol').prop('disabled', true);
				$('#modal-agregar-lineas .txt-grupo').html(aux.text);
				callbackMostrarTablas(data.data);

		  	}
		  	else{
		  		//**Mostrar mensaje no success**//
		  	}

		},
		getAgregarLineasFailResponse : function(error, form){
			console.log(error);
		},
		getCargaMasivaPostArbolResponse : function(data, form, sentTo){
			console.log('Formulario enviado.');
			window.location.href = sentTo;
		},
		getCargaMasivaPostArbolFailResponse : function(error, form){
			console.log(error);
		},
		getCargaMasivaResponse : function(data, form, sentTo, showInvalidErrorArchivo){
			/*simular error de archivo*/
			var hash = window.location.hash;
			if(hash=='#archivoInvalido'){
				showInvalidErrorArchivo();
				submit = false;
			}
			/*fin simular error de archivo*/
			else{
				console.log('Formulario enviado.');
				window.location.href = sentTo;
			}
		},
		getCargaMasivaFailResponse : function(error, form){
			console.log(error);
		},
	};

	var autogestion = {
		getSingleSuspensionResponse : function(data, form, sentTo){
			console.log('Formulario enviado.');
			window.location.href = sentTo;
		},
		getSingleSuspensionFailResponse : function(error, form){
			console.log(error);
		},
		getSingleAutogestionGeneralResponse : function(data, form, sentTo){
			console.log('Formulario enviado.');
			window.location.href = sentTo;
		},
		getSingleAutogestionGeneralFailResponse : function(error, form){
			console.log(error);
		},
		getMasivoSuspensionResponse : function(data, form, sentTo, showInvalidErrorArchivo){
			/*simular error de archivo*/
			var hash = window.location.hash;
			if(hash=='#archivoInvalido'){
				showInvalidErrorArchivo();
				submit = false;
			}
			/*fin simular error de archivo*/
			else{
				console.log('Formulario enviado.');
				window.location.href = sentTo;
			}


		},
		getMasivoSuspensionFailResponse : function(error, form){
			console.log(error);
		},
		getMasivoAutogestionGeneralResponse : function(data, form, sentTo, showInvalidErrorArchivo){
			/*simular error de archivo*/
			var hash = window.location.hash;
			if(hash=='#archivoInvalido'){
				showInvalidErrorArchivo();
				submit = false;
			}
			/*fin simular error de archivo*/
			else{
				console.log('Formulario enviado.');
				window.location.href = sentTo;
			}
		},
		getMasivoAutogestionGeneralFailResponse : function(error, form){
			console.log(error);
		},
		getMasivoAutogestionServiciosResponse : function(data, form, sentTo, showInvalidErrorArchivo){
			/*simular error de archivo*/
			var hash = window.location.hash;
			if(hash=='#archivoInvalido'){
				showInvalidErrorArchivo();
				submit = false;
			}
			/*fin simular error de archivo*/
			else{
				console.log('Formulario enviado.');
				window.location.href = sentTo;
			}
		},
		getMasivoAutogestionServiciosFailResponse : function(error, form){
			console.log(error);
		},
		getMasivoAutogestionConfirmacionGeneralResponse : function(data, form, sentTo, showInvalidErrorArchivo){
			console.log('Formulario enviado.');
			window.location.href = sentTo;
		},
		getMasivoAutogestionConfirmacionGeneralFailResponse : function(error, form){
			console.log(error);
		},
		getEnviarCorreoConfirmacionResponse : function(data, form){
			console.log('Formulario enviado.');
			$('.email-sent').html($(form).find('input[name="email"]').val());
			$('.op-resend-id').addClass('email-sent');
		},
		getEnviarCorreoConfirmacionFailResponse : function(error, form){
			console.log(error);
		},
		getRedPrivadaCallResponse : function(data, form, sentTo){
			console.log('Formulario enviado.');
			window.location.href = sentTo;
		},
		getRedPrivadaCallFailResponse : function(error, form){
			console.log(error);
		},
		getAbonoDeSaldoCallResponse : function(data, form, sentTo){
			console.log('Formulario enviado.');
			window.location.href = sentTo;
		},
		getAbonoDeSaldoCallFailResponse : function(error, form){
			console.log(error);
		},
		getMasivoAutogestionRoamingResponse : function(data, form, sentTo, showInvalidErrorArchivo){
			/*simular error de archivo*/
			var hash = window.location.hash;
			if(hash=='#archivoInvalido'){
				showInvalidErrorArchivo();
				submit = false;
			}
			/*fin simular error de archivo*/
			else{
				console.log('Formulario enviado.');
				window.location.href = sentTo;
			}
		},
		getMasivoAutogestionRoamingFailResponse : function(error, form){
			console.log(error);
		},
		getSingleAutogestionRoamingResponse : function(data, form, sentTo){
			console.log('Formulario enviado.');
			window.location.href = sentTo;
		},
		getSingleAutogestionRoamingFailResponse : function(error, form){
			console.log(error);
		},
	};

	var servicios = {
		contratarServiciosSuccessCallback : function(data, form, sentTo){
			console.log('Formulario enviado.');
			window.location.href = sentTo;
		},
		contratarServiciosFailCallback : function(error, form){
			console.log(error);
		},
	};

	var gestionEjecutivos = {
		getAgregarAliasResponse : function(data, form, elementData, callback){
			var data = { success: true, data: [] };

			/* simular error de nombre existente */
		  	var hash = window.location.hash;

			if(hash=='#errorNombreExistente'){
				data.success = false;
				data.error = {
					message : 'El nombre de alias fue utilizado anteriormente, favor de ingresar uno nuevo.'
				};

			}
			/* fin simular error de nombre existente */

			/**Caso de uso error en solicitud**/
		  	if(hash=="#error-servicio-general"){
				data.success = false;
				data.error = {
					message : 'Lo sentimos, este servicio por el momento no está disponible. Estamos trabajando para servirte mejor. Por favor, intenta más tarde.'
				};
			}

			if(data.success){
		  		/* simular ID agregados en la DB */
				var idAddedAlias = $('#gestion-ejecutivos-view .mosaico-view .item-mv').length+1;
				var idAddedAdmin = $('#gestion-ejecutivos-view .mosaico-view .item-mv').length+1;
				/** fin simular **/

				var meta = {
					'id' : idAddedAlias,
					'texto' : elementData.texto,
					'lineas' : 0,
					'administrador' :{
						'id' : idAddedAdmin,
						'nombre' : elementData.admin.nombre,
						'correo' : elementData.admin.correo,
						'lada' : elementData.admin.lada,
						'numero' : elementData.admin.numero,
						'extension' : elementData.admin.extension
					}
				};

				//Envío el Id y el nombre del nuevo elemento
				callback(idAddedAlias, meta);

				$(form).hide();
				$(form).addClass('success');

				$('.form-agregar-alias .api-msg .new-alias-text').html(meta.texto);
				$('.form-agregar-alias .api-msg .user-text').html(meta.administrador.nombre);
				$('.form-agregar-alias .api-msg .user-email').html(meta.administrador.correo);

		  	}
		  	else{

		  		/* mostrar error enviado por el sistema */

		  		if(data.error){
		  			//appendErrorGeneral($('.form-agregar-grupo .element-input-block'), elementData.input , data.error.message);

		  			if(hash=='#errorNombreExistente'){
			  			var error=$('<label class="error error-nombre-alias">'+data.error.message+'</label>');
						var element = elementData.input;
						element.addClass('error');
						error.insertAfter( element );
					}
					else{
						$(form).hide();

						var errorHTML = '<div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb" id="error-autogestion-block"> <span class="icon io-Alert2"></span> <h2 class="h4">No se pudo procesar la operación</h2> <div id="listado-sin-autogestion-container"> <p>'+data.error.message+'</p> <div class="col-sm-12 btn-container"> <button type="button" class="bton blue-dark" id="btn-resend-form">Reintentar</button> </div> </div> </div> </div> </div>';
						appendErrorGeneralHTML($('#modal-agregar-alias .in-cont-mod'), null , errorHTML);
					}

		  		}

		  	}
		},
		getAgregarAliasFailResponse : function(error, form){
			console.log(error);
		},
		getEditarNombreAliasResponse : function(data, value, callback, $elementos){
			var $element = $elementos.element;
		  	var $input = $elementos.input;

			/**Respuesta hardcodeada**/
		  	var data = { success : true, data : [] };

			/**simular casp de uso**/
			var hash = window.location.hash;

			if(hash=='#errorNombreExistente'){

				data.success = false;

				data.error = {
					message : 'El nombre del alias fue utilizado anteriormente, favor de ingresar uno nuevo.'
				};
			}

			if(data.success){
		  		$element.find('.name-container .ribbon-content').html(value);
		  		$element.data('name', value);
		  		$element.find('.name-container').removeClass('active-edit');

		  		var item = ( typeof $element.data('item') != 'undefined' ? $element.data('item') : null);

		  		if(item!=null){
		  			item.texto = value;
		  			$element.data('item', item);
		  		}

		  	}
		  	else{
		  		//JSON SUCCESS FALSE
		  		if(data.error){
		  			callback($element, $input, data.error.message);
		  		}

		  	}


		},
		getEditarNombreAliasFailResponse : function(error){
			console.log(error);
		},
		getEliminarAliasResponse : function(data, form, currentModalData){
			var hash= window.location.hash;

			/**Respuesta hardcodeada**/
			var data = { success: true };

			/**Caso de uso servicio no disponible**/
		  	if(hash=="#error-servicio-general"){
				data.success = false;
				data.error = {
					message : 'Lo sentimos, este servicio por el momento no está disponible. Estamos trabajando para servirte mejor. Por favor, intenta más tarde.'
				};
			}

		  	/**Caso de uso alias previamente eliminado**/
		  	if(hash=="#aliasPreviamenteEliminado"){
				$('#confirmar-eliminar-alias').hide();
				$('#eliminar-alias-ya-eliminado').show();
			}
			else{
			  	if(data.success){
			  		/**éxito**/
			  		$('#confirmar-eliminar-alias').hide();
			  		$('#eliminar-alias-pre-confirmacion').hide();
			  		$('#eliminar-alias-confirmacion').show();
			  		$('#modal-eliminar-alias .alias-text').html(currentModalData.texto);

			  		var $alias = $('#alias-'+currentModalData.id);
			  		var $parent = $alias.parent('.item-mv');
			  		$parent.remove();
			  	}
			  	else{
			  		/** Mensaje de error enviado por el sistema**/
			  		$(form).hide();

					var errorHTML = '<div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb" id="error-autogestion-block"> <span class="icon io-Alert2"></span> <h2 class="h4">No se pudo procesar la operación</h2> <div id="listado-sin-autogestion-container"> <p>'+data.error.message+'</p> <div class="col-sm-12 btn-container"> <button type="button" class="bton blue-dark" id="btn-resend-form">Reintentar</button> </div> </div> </div> </div> </div>';
					appendErrorGeneralHTML($('#modal-eliminar-alias .in-cont-mod'), null , errorHTML);
			  	}
			 }
		},
		getEliminarAliasFailResponse : function(error, form){
			console.log(error);
		},
		getAgregarAdminResponse : function(data, form, elementData, callback){
			var data = { success: true, data: [] };

			/* simular error de email existente */
		  	var hash = window.location.hash;

			if(hash=='#errorAdminEmail'){
				data.success = false;
				data.error = {
					message : 'Ya existe un administrador con ese correo electrónico.'
				};
			}
			/* fin simular error de email existente */

			/**Caso de uso servicio no disponible**/
		  	if(hash=="#error-servicio-general"){
				data.success = false;
				data.error = {
					message : 'Lo sentimos, este servicio por el momento no está disponible. Estamos trabajando para servirte mejor. Por favor, intenta más tarde.'
				};
			}

			if(data.success){


		  		/* simular ID agregados en la DB */
				var idAddedAdmin = $('#gestion-ejecutivos-view .mosaico-view .item-mv').length+1;
				/** fin simular **/

				var meta = {
					'aliasId' : elementData.aliasId,
					'id' : idAddedAdmin,
					'nombre' : elementData.nombre,
					'correo' : elementData.correo,
					'lada' : elementData.lada,
					'numero' : elementData.numero,
					'extension' : elementData.extension
				};

				var $alias = $('#alias-'+elementData.aliasId);
				//Envío el Id y el nombre del nuevo elemento
				callback(meta, $alias);

				$(form).hide();
				$(form).addClass('success');

				$('#modal-agregar-administrador .main-modal-header').hide();
				$('#modal-agregar-administrador .secondary-modal-header').show();
				$('.form-agregar-administrador .user-email').html(meta.correo);

		  	}
		  	else{

		  		/* mostrar error enviado por el sistema */

		  		if(data.error){
		  			if(hash=='#errorAdminEmail'){
			  			/*Este es el caso de correo electrónico existente*/
			  			var $container = $('#form-agregar-administrador .element-input-block .email-container');
			  			appendErrorGeneral($container, $container.find('input') , data.error.message);
			  		}
			  		else{
		  			/** Mensaje de error enviado por el sistema**/
				  		$(form).hide();

						var errorHTML = '<div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb" id="error-autogestion-block"> <span class="icon io-Alert2"></span> <h2 class="h4">No se pudo procesar la operación</h2> <div id="listado-sin-autogestion-container"> <p>'+data.error.message+'</p> <div class="col-sm-12 btn-container"> <button type="button" class="bton blue-dark" id="btn-resend-form">Reintentar</button> </div> </div> </div> </div> </div>';
						appendErrorGeneralHTML($('#modal-agregar-administrador .in-cont-mod'), null , errorHTML);
					}

		  		}

		  	}
		},
		getEditarAdminFailResponse : function(error, form){
			console.log(error);
		},
		getEditarAdminResponse : function(data, form, elementData, callback){
			var data = { success: true, data: [] };

			/* simular error de email existente */
		  	var hash = window.location.hash;

			if(hash=='#errorAdminEmail'){
				data.success = false;
				data.error = {
					message : 'Ya existe un administrador con ese correo electrónico.'
				};
			}
			/* fin simular error de email existente */

			/**Caso de uso servicio no disponible**/
		  	if(hash=="#error-servicio-general"){
				data.success = false;
				data.error = {
					message : 'Lo sentimos, este servicio por el momento no está disponible. Estamos trabajando para servirte mejor. Por favor, intenta más tarde.'
				};
			}

			if(data.success){

				var meta = {
					'aliasId' : elementData.aliasId,
					'id' : elementData.adminId,
					'nombre' : elementData.nombre,
					'correo' : elementData.correo,
					'lada' : elementData.lada,
					'numero' : elementData.numero,
					'extension' : elementData.extension
				};

				var $alias = $('#alias-'+elementData.aliasId);
				//Envío el Id y el nombre del nuevo elemento
				callback(meta, $alias);

				$(form).hide();
				$(form).addClass('success');

		  	}
		  	else{

		  		/* mostrar error enviado por el sistema */

		  		if(data.error){
		  			if(hash=='#errorAdminEmail'){
		  			/*Este es el caso de correo electrónico existente*/
		  			var $container = $('#form-editar-administrador .element-input-block .email-container');
		  			appendErrorGeneral($container, $container.find('input') , data.error.message);
					}
					else{
			  			/** Mensaje de error enviado por el sistema**/
				  		$(form).hide();

						var errorHTML = '<div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb" id="error-autogestion-block"> <span class="icon io-Alert2"></span> <h2 class="h4">No se pudo procesar la operación</h2> <div id="listado-sin-autogestion-container"> <p>'+data.error.message+'</p> <div class="col-sm-12 btn-container"> <button type="button" class="bton blue-dark" id="btn-resend-form">Reintentar</button> </div> </div> </div> </div> </div>';
						appendErrorGeneralHTML($('#modal-editar-administrador .in-cont-mod'), null , errorHTML);
					}
		  		}

		  	}
		},
		getAgregarAdminFailResponse : function(error, form){
			console.log(error);
		},
		getEliminarAdminResponse : function(data, form, currentModalData, updateDataDomCallback){
			var hash= window.location.hash;

			/**Respuesta hardcodeada**/
			var data = { success: true };
		  	/**Caso de uso servicio no disponible**/
		  	if(hash=="#error-servicio-general"){
				data.success = false;
				data.error = {
					message : 'Lo sentimos, este servicio por el momento no está disponible. Estamos trabajando para servirte mejor. Por favor, intenta más tarde.'
				};
			}

		  	/**Caso de uso admin previamente eliminado**/
		  	if(hash=="#adminPreviamenteEliminado"){
				$('#confirmar-eliminar-admin').hide();
				$('#eliminar-admin-ya-eliminado').show();
			}
			else{
			  	if(data.success){
			  		/**éxito**/
			  		$('#confirmar-eliminar-admin').hide();
					$('#eliminar-admin-confirmacion').show();
					$('#modal-eliminar-admin .alias-text').html(currentModalData.texto);

					var $alias = $('#alias-'+currentModalData.id);
					updateDataDomCallback($alias);
			  	}
			  	else{
			  		/** Mensaje de error enviado por el sistema**/
			  		$(form).hide();

					var errorHTML = '<div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb" id="error-autogestion-block"> <span class="icon io-Alert2"></span> <h2 class="h4">No se pudo procesar la operación</h2> <div id="listado-sin-autogestion-container"> <p>'+data.error.message+'</p> <div class="col-sm-12 btn-container"> <button type="button" class="bton blue-dark" id="btn-resend-form">Reintentar</button> </div> </div> </div> </div> </div>';
						appendErrorGeneralHTML($('#modal-eliminar-admin .in-cont-mod'), null , errorHTML);
			  	}
			 }
		},
		getEliminarAdminFailResponse : function(error, form){
			console.log(error);
		},
		getAsociarCuentasResponse : function(data, form){
			/**Respuesta hardcodeada**/
			var data = { success: true };

			$('#paso-1').hide();
			$('#paso-2').hide();

			if(data.success){
		  		/**éxito**/
		  		$(form).find('.form-ge-mod').hide();
				$(form).find('.form-ge-mod').addClass('success');
				$(form).parent().find('.head-action-mod .m-btn-close-modal').addClass('m-btn-close-modal-parent');

				window.location.href='consulta-cuentas-2.html';
		  		// $('#edit-cuentas-table').removeClass('no-cuentas');
		  		// $('.hide-no-cuentas').removeClass('hidden');

		  	}
		  	else{
		  		/** Mensaje de error enviado por el sistema**/
		  	}

		  	$('#paso-3').show();
		},
		getAsociarCuentasFailResponse : function(error, form){
			console.log(error);
		},
		getQuitarCuentasResponse : function(data, form, allChecked, resetBlockCallback){
			/**Respuesta hardcodeada**/
			var data = { success: true };

			if(data.success){
		  		/**éxito**/
		  		/**Si no ocurre el error eliminamos del html los elementos.**/

		  		$('#listado-cuentas .linea-batch.checked-element').remove();

		  		var enPagina = $('#listado-cuentas .linea-batch input[type="checkbox"]').length == $('#listado-cuentas .linea-batch input[type="checkbox"]:checked').length;
		  		if(allChecked || enPagina){
		  			// $('#edit-cuentas-table').addClass('no-cuentas');
		  			// $('.hide-no-cuentas').addClass('hidden');
		  			window.location.href='consulta-cuentas-2-sin-cuentas.html';
		  		}
		  		resetBlockCallback();

		  		$('#confirmar-desasociar-cuentas').hide();
		  		$('#desasociar-cuentas-confirmacion').show();

		  	}
		  	else{
		  		/** Mensaje de error enviado por el sistema**/
		  	}
		},
		getQuitarCuentasFailResponse : function(error, form){
			console.log(error);
		},
		cuentasAsociadasSuccessCallback : function(modal, json, cuentasAsociadas){
			/**Hardcodeo el resultado del GETJSON **/
			json = { success: true, data: cuentasAsociadasAuxiliar };

			cuentasAsociadas.value = json.data;

			if(json.success){
		  		modal['paginacion'].updateItems(json.data);
		  		modal['paginacion'].reset();
		  	}
		  	else{
		  		/* agregar error enviado por el sistema */
		  	}
		},
		cuentasAsociadasFailCallback : function(error){
			console.log(error);
		},
	};

	var facturacion = {
		getFacturacionFormResponse : function(data, form, sentTo){
			console.log('Formulario enviado.');
			window.location.href = sentTo;
		},
		getFacturacionFormFailResponse : function(error, form){
			console.log(error);
		},
		getDescargarFacturasResponse : function(data, form, title, callback){

			var hash= window.location.hash;

			/**Respuesta hardcodeada**/
			var data = { success: true };

		  	/**Caso de uso error en solicitud**/
		  	if(hash=="#error-solicitud-descarga"){
				data.success = false;
				data.error = {
					message : 'Por el momento no se puede realizar tu solicitud, por favor intentalo más tarde.'
				};
			}

		  	/*Exito*/
		  	if(data.success){
				$(form).hide();
				if(title!=null)
					title.element.html(title.text);

				if(typeof callback!='undefined')
					callback();

				if($('#descargar-facturas-confirmacion').hasClass('add-modal-no-close'))
					$('#modal-descargar').addClass('no-close-out');

				$('#descargar-facturas-confirmacion').show();
				$(form).find('button[type="submit"]').prop('disabled', false);
			}
			else{
				if(data.error){
					var errorHTML = '<div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb" id="error-autogestion-block"> <span class="icon io-Alert2"></span> <h2 class="h4">No se pudo procesar la operación</h2> <div id="listado-sin-autogestion-container"> <p>Lo sentimos, este servicio por el momento no está disponible. Estamos trabajando para servirte mejor. Por favor, intenta más tarde.</p> <div class="col-sm-12 btn-container"> <button type="button" class="bton blue-dark" id="btn-r-descargar-facturas">Reintentar</button> </div> </div> </div> </div> </div>';
					appendErrorGeneralHTML($('#modal-descargar .in-cont-mod'), null , errorHTML);

				}
				$(form).find('button[type="submit"]').prop('disabled', false);
			}
		},
		getDescargarFacturasFailResponse : function(error, form){
			console.log(error);
		},
		generarReferenciaUnicaResponse : function(data, form, _modalData, updateDomCallback){
			/**Respuesta hardcodeada**/
			var data = { success: true };

			var hash = window.location.hash;

			if(hash=='#error-solicitud' || hash=='#error-sistema')
				data.success = false;
			else
				data.success = true;

		  	/*Exito*/
		  	//aqui iría el data que regrese el json
		  	data.referencia = '5C9D2E7W4D4E051';//SIMULACIÓN DE UN DATA GENERADO

		  	if(data.success){
		  		_modalData.referencia = data.referencia;
		  		$(form).find('.referencia-generada').html(_modalData.referencia);
		  		updateDomCallback();

		  		console.log('here');
		  	}
		  	else{

		  		if(hash=='#error-sistema'){
				$('#modal-generar-referencia .form-ge-mod.error-ge .only-p').html('Por el momento no se puede procesar tu solicitud, te sugerimos intentar en 15 min, por favor.');
				}
				else{
					$('#modal-generar-referencia .form-ge-mod.error-ge .only-p').html('Tu solicitud no puede ser procesada en este momento. <br>Estamos trabajando para servirte mejor, por favor intenta más tarde.');
				}

		  		$('#modal-generar-referencia #form-generar-referencia').addClass('hidden');
		  		$('#modal-generar-referencia .form-ge-mod.error-ge').removeClass('hidden');
		  		$('#modal-generar-referencia .heading-mod .title-mod p').html('Referencia única no generada');

		  	}
		},
		generarReferenciaUnicaFailResponse : function(error, form){

			if(hash=='#error-sistema'){
				$('#modal-generar-referencia .form-ge-mod.error-ge .only-p').html('Por el momento no se puede procesar tu solicitud, te sugerimos intentar en 15 min, por favor.');
			}
			else{
				$('#modal-generar-referencia .form-ge-mod.error-ge .only-p').html('Tu solicitud no puede ser procesada en este momento. <br>Estamos trabajando para servirte mejor, por favor intenta más tarde.');
			}

			$('#modal-generar-referencia #form-generar-referencia').addClass('hidden');
		  	$('#modal-generar-referencia .form-ge-mod.error-ge').removeClass('hidden');
		  	$('#modal-generar-referencia .heading-mod .title-mod p').html('Referencia única no generada');
		}
	};

	var home = {
		getFacturasPendientes : function(data,form){
			var data = { success: true };

			var hash = window.location.hash;

			var success  = '<div class="col-sm-12 api-msg api-msg-success"> <div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb"> <div class="en-proceso"><div class="sk-circle"> <div class="sk-circle1 sk-child"></div> <div class="sk-circle2 sk-child"></div> <div class="sk-circle3 sk-child"></div> <div class="sk-circle4 sk-child"></div> <div class="sk-circle5 sk-child"></div> <div class="sk-circle6 sk-child"></div> <div class="sk-circle7 sk-child"></div> <div class="sk-circle8 sk-child"></div> <div class="sk-circle9 sk-child"></div> <div class="sk-circle10 sk-child"></div> <div class="sk-circle11 sk-child"></div> <div class="sk-circle12 sk-child"></div> </div></div> <h2 class="h4">Solicitud de consulta</h2><p class="only-p">Esta consulta puede tardar varíos minutos, te notificaremos en cuanto este lista</p></div> </div> </div></div>';


   			//$(form).parent().parent().parent().find('.heading-opc-tab').addClass('hidden');
			// $(form).addClass('hidden');

			if(data.success)
				$(form).append(success);
			else
				$(form).append(error);
		},
		getFacturasPendientesFail : function(form){

		},
		getCambioFormResponse : function(data, form){
			/**Respuesta hardcodeada**/
			var data = { success: true };

			var hash = window.location.hash;

			if(hash=='#error-solicitud')
				data.success = false;
			else
				data.success = true;

			$(form).parent().parent().parent().find('.heading-opc-tab').addClass('hidden');
			$(form).addClass('hidden');

			if(data.success)
				$(form).next('.api-msg-success').removeClass('hidden');
			else
				$(form).parent().find('.api-msg-error').removeClass('hidden');

		},
		getCambioFormFailResponse : function(error, form){
			console.log('Error.');
		},
		getSuspensionFormResponse : function(data, form){
			/**Respuesta hardcodeada**/
			var data = { success: true };

			var hash = window.location.hash;

			if(hash=='#error-solicitud')
				data.success = false;
			else
				data.success = true;

			$(form).parent().parent().parent().find('.heading-opc-tab').addClass('hidden');
			$(form).addClass('hidden');

			if(data.success)
				$(form).next('.api-msg-success').removeClass('hidden');
			else
				$(form).parent().find('.api-msg-error').removeClass('hidden');
		},
		getSuspensionFormFailResponse : function(error, form){
			console.log('Error.');
		},
		getCACFormResponse : function(data, form){
			/**Respuesta hardcodeada**/
			var data = { success: true };

			var hash = window.location.hash;

			if(hash=='#error-solicitud')
				data.success = false;
			else
				data.success = true;

			$(form).parent().parent().parent().find('.heading-opc-tab').addClass('hidden');
			$(form).addClass('hidden');

			if(data.success)
				$(form).next('.api-msg-success').removeClass('hidden');
			else
				$(form).parent().find('.api-msg-error').removeClass('hidden');
		},
		getCACFormFailResponse : function(error, form){
			console.log('Error.');
		},
		getReactivacionFormResponse : function(data, form){
			/**Respuesta hardcodeada**/
			var data = { success: true };

			var hash = window.location.hash;

			if(hash=='#error-solicitud')
				data.success = false;
			else
				data.success = true;

			$(form).parent().parent().parent().find('.heading-opc-tab').addClass('hidden');
			$(form).addClass('hidden');

			if(data.success)
				$(form).next('.api-msg-success').removeClass('hidden');
			else
				$(form).parent().find('.api-msg-error').removeClass('hidden');
		},
		getReactivacionFormFailResponse : function(error, form){
			console.log('Error.');
		},

	};

	var citas = {
		setCACLocation : function(data, drawMarkersCallback){
			/**Respuesta hardcodeada**/
			var data = { success: true, data : shuffle([
					{"id":48,"title":"Amores","description": "Amores No. 26, Col. del Valle, C.P. 03100, México D.F., Lunes a Viernes 9:00 a 18:00 hrs.", "longitude":"-99.168029","latitude":"19.3818785"},
					{"id":46,"title":"Del Valle","description": "Eje 7 Sur Felix Cuevas No. 825 Esq. Aniceto Ortega, Col. Del Valle, C.P. 03100, México D.F., Lúnes a Viernes 9:00 a 18:00 hrs.", "longitude":"-99.167084","latitude":"19.370912"},
					{"id":44,"title":"Pabellón Del Valle","description": "Av. Universidad No. 740, Col. Santa Cruz Atoyac. Deleg. Benito Juárez, Plaza Pabellón del Valle Local A2 México.D.F. C.P. 03100, Lúnes a Viernes 9:00 a 18:00 hrs.", "longitude":"-99.162443","latitude":"19.373748"},
					{"id":43,"title":"Lago Alberto","description": "Lago Alberto No. 366 Col. Anáhuac C.P. 11320, México D.F., Lúnes a Viernes 9:00 a 18 hrs.", "longitude":"-99.179889","latitude":"19.439093"},
					{"id":39,"title":"Masaryk","description": "Tennyson No. 120 Esq. Presidente Masaryk, Col. Polanco Reforma, C.P. 11560, México D.F., Lúnes a Viernes 9:00 a 18 hrs.", "longitude":"-99.195201","latitude":"19.431978"},
					{"id":6,"title":"Pabellón Polanco","description": "Lago Alberto No. 366 Col. Anáhuac C.P. 11320, México D.F., Lúnes a Viernes de 9:00 a 18 hrs.", "longitude":"-99.207044","latitude":"19.437508"}
				])
			};

			if(data.success){
				drawMarkersCallback(data.data);
			}

		},
		setCACClosestLocation : function(data, drawMarkersCallback, checkDistance){
			/**Respuesta hardcodeada simulada**/
			var data = { success: true, data : [
					{"id":48,"title":"Amores","description": "Amores No. 26, Col. del Valle, C.P. 03100, México D.F., Lunes a Viernes 9:00 a 18:00 hrs.", "longitude":"-99.168029","latitude":"19.3818785"},
					{"id":46,"title":"Del Valle","description": "Eje 7 Sur Felix Cuevas No. 825 Esq. Aniceto Ortega, Col. Del Valle, C.P. 03100, México D.F., Lúnes a Viernes 9:00 a 18:00 hrs.", "longitude":"-99.167084","latitude":"19.370912"},
					{"id":44,"title":"Pabellón Del Valle","description": "Av. Universidad No. 740, Col. Santa Cruz Atoyac. Deleg. Benito Juárez, Plaza Pabellón del Valle Local A2 México.D.F. C.P. 03100, Lúnes a Viernes 9:00 a 18:00 hrs.", "longitude":"-99.162443","latitude":"19.373748"},
					{"id":43,"title":"Lago Alberto","description": "Lago Alberto No. 366 Col. Anáhuac C.P. 11320, México D.F., Lúnes a Viernes 9:00 a 18 hrs.", "longitude":"-99.179889","latitude":"19.439093"},
					{"id":39,"title":"Masaryk","description": "Tennyson No. 120 Esq. Presidente Masaryk, Col. Polanco Reforma, C.P. 11560, México D.F., Lúnes a Viernes 9:00 a 18 hrs.", "longitude":"-99.195201","latitude":"19.431978"},
					{"id":6,"title":"Pabellón Polanco","description": "Lago Alberto No. 366 Col. Anáhuac C.P. 11320, México D.F., Lúnes a Viernes de 9:00 a 18 hrs.", "longitude":"-99.207044","latitude":"19.437508"}
				]
			};

			var hash = window.location.hash;
			var aux = [];
			//Simular cuando no hay "cercanos"
			if(hash=='#sin-cercanos')
				$('.no-close-cacs').removeClass('hidden');
			else{

				//Simular los "cercanos"
				$.each(data.data, function(key, value) {
				   var close = checkDistance(data.data[key].latitude, data.data[key].longitude);

				   if(close)
				   		aux.push(data.data[key]);
				});
			}


			if(data.success){
				//Simular los populares cuando no hay "cercanos"
				if(aux.length==0){
					$('.no-close-cacs').removeClass('hidden');
					var t = 0;
					$.each(data.data, function(key, value) {
						t++;
						if(t<4)
							aux.push(data.data[key]);
						else
							return;
					});
				}

				drawMarkersCallback(aux);
			}

		},
		getCACAvailableDateTimes : function(data, range){
			/**Respuesta hardcodeada**/
			var data = { success: true, data : null };
			var minDateData = (range.min != null ? range.min.split('/') : null),maxDateData = (range.max != null ? range.max.split('/') : null),
			rangeArray = getDates(new Date(minDateData[2], minDateData[1]-1, minDateData[0]), (new Date(maxDateData[2], maxDateData[1]-1, maxDateData[0]))),
			dateTimesArr = [];

			var hash = window.location.hash,
			testSinHorario = false;

			if(hash=='#sin-horarios'){
				testSinHorario = true;
			}

			$.each(rangeArray, function(key, d) {
				var day = (d.getDate()<10 ? '0'+d.getDate() : d.getDate() ),
				month = (d.getMonth()+1<10 ? '0'+(d.getMonth()+1) : d.getMonth()+1 ),
				year = d.getFullYear(),
				date = day + '/' + month + '/' + year,
				aux = [],
				total =  Math.floor(Math.random() * (9 - 1) + 1),
				currentTotal = 0;

			    if(testSinHorario && currentTotal<5)
			    	dateTimesArr[date] = aux;
			    else{
			    	for (i = 0; i < total; i++) {
				    	var hour = Math.floor(Math.random() * (19 - 9) + 9);
					   	hour = hour+':'+( Math.floor(Math.random() * (3 - 1) + 1) ==1 ? '00' : '30');
					   	hour = (hour.length>1 ? hour : '' )
					   	if($.inArray( hour, aux )==-1)
							aux.push(hour);
					}

				    dateTimesArr[date] = aux.sort();
			    }

			    currentTotal++;

			});

			return dateTimesArr;

		},
		getCACAvailableDateTimesFailResponse : function(){

		},
		getCACFormResponse : function(data, form, modalErrorSolicitud, sentTo){
			/**Respuesta hardcodeada**/
			var data = { success: true };

			var hash = window.location.hash;

			if(hash=='#error-solicitud'){
				modalErrorSolicitud.openModal();
			}
			else{
				console.log('Formulario enviado.');
				window.location.href = sentTo;
			}
		},
		getCACFormFailResponse : function(error, form){
			console.log('Error.');
		},
		getCancelarCitaResponse : function(data, form, currentModalData){

			/**Respuesta hardcodeada**/
			var data = { success: true };

		  	if(data.success){
		  		/**éxito**/
		  		$('#confirmar-cancelar-cita').hide();
		  		$('#cancelar-cita-confirmacion').show();
		  		$('#modal-cancelar-cita .cita-fecha').html(currentModalData.fecha);

		  		/**actualizar tabla**/
		  		var $cita = $('#cita-'+currentModalData.id);

		  		$cita.find('.content-item-block').addClass('item-cancelado');
		  		$cita.find('.cita-detalle').html('Cancelada');
		  		$cita.find('.general-group-options-container').html('');
		  		$cita.find('.btn-container-2-btns').remove();

		  	}
		  	else{
		  		/** Mostrar mensaje enviado por sistema **/
		  	}
		},
		getCancelarCitaFailResponse : function(error, form){
			console.log(error);
		},
		getCancelarVisitaResponse : function(data, form, currentModalData){

			/**Respuesta hardcodeada**/
			var data = { success: true };

		  	if(data.success){
		  		/**éxito**/
		  		$('#confirmar-cancelar-visita').hide();
		  		$('#cancelar-visita-confirmacion').show();
		  		$('#modal-cancelar-visita .visita-folio').html(currentModalData.folio);

		  		/**actualizar tabla**/
		  		var $cita = $('#cita-'+currentModalData.id);

		  		$cita.find('.content-item-block').addClass('item-cancelado');
		  		$cita.find('.cita-detalle').html('Cancelada');
		  		$cita.find('.general-group-options-container').html('');
		  		$cita.find('.btn-container-2-btns').remove();
		  	}
		  	else{
		  		/** Mostrar mensaje enviado por sistema **/
		  	}
		},
		getCancelarVisitaFailResponse : function(error, form){
			console.log(error);
		},
		getReprogramarCitaResponse : function(data, form, newData){
			/**Respuesta hardcodeada**/
			var data = { success: true };

		  	if(data.success){
		  		/**éxito**/
		  		$('#confirmar-reprogramar-cita').hide();
		  		$('#reprogramar-cita-confirmacion').show();
		  		$('#modal-reprogramar-cita .cita-fecha').html(newData.fecha);
		  		$('#modal-reprogramar-cita .cita-hora').html(newData.hora);
		  	}
		  	else{
		  		/** Mostrar mensaje enviado por sistema **/
		  	}
		},
		getReprogramarCitaFailResponse : function(error, form){
			console.log(error);
		},
		consultarDateTimeResponse : function(data, currentModalData, callBack){

			/**Respuesta hardcodeada**/
			var data = { success: true };

		  	var hash = window.location.hash;

		  	console.log(hash=='#menos-24hrs');
			if(hash=='#menos-24hrs'){
				$('#cancelar-cita-24-hrs, #reprogramar-cita-24-hrs').show();
				console.log('cancelar');
			}
			else{
				if(typeof callBack!= 'undefined'){
					$('#confirmar-reprogramar-cita').show();
					getAvailableDateTimes(currentModalData.fecha);
				}
				else{
					$('#confirmar-cancelar-cita').show();
					$('#modal-cancelar-cita .cita-fecha').html(currentModalData.fecha);
					$('#modal-cancelar-cita .cita-hora').html(currentModalData.hora);
					$('#modal-cancelar-cita .cita-cac').html(currentModalData.cac);
				}

			}

		},
		consultarDateTimeFailResponse : function(error, form){
			console.log(error);
		},



	};

	var adendum = {
		getSingleAdendumResponse : function(data, form, sentTo){
			console.log('Formulario enviado.');
			window.location.href = sentTo;
		},
		getSingleAdendumFailResponse : function(error, form){
			console.log(error);
		},
		getMasivoAdendumResponse : function(data, form, sentTo, showInvalidErrorArchivo){
			/*simular error de archivo*/
			var hash = window.location.hash;
			if(hash=='#archivoInvalido'){
				showInvalidErrorArchivo();
				submit = false;
			}
			/*fin simular error de archivo*/
			else{
				console.log('Formulario enviado.');
				window.location.href = sentTo;
			}
		},
		getMasivoAdendumFailResponse : function(error, form){
			console.log(error);
		},
		getAllResponse : function(data, form, sentTo){
			console.log('Formulario enviado.');
			window.location.href = sentTo;
		},
		getAllFailResponse : function(error, form){
			console.log(error);
		},
		getDescargarFacturasResponse : function(data, form, title){

			var hash= window.location.hash;

			/**Respuesta hardcodeada**/
			var data = { success: true };

		  	/**Caso de uso admin previamente eliminado**/
		  	if(hash=="#error-solicitud-descarga"){
				data.success = false;
				data.error = {
					message : 'Por el momento no se puede realizar tu solicitud, por favor intentalo más tarde.'
				};
			}

		  	if(data.success){
				$(form).hide();

				if(title!=null)
					title.element.html(title.text);

				$('#descargar-facturas-confirmacion').show();
		  	}
		  	else{
		  		/**mostrar mensaje enviado por sistema**/
		  		if(data.error){
					var errorHTML = '<div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb" id="error-autogestion-block"> <span class="icon io-Alert2"></span> <h2 class="h4">No se pudo procesar la operación</h2> <div id="listado-sin-autogestion-container"> <p>Lo sentimos, este servicio por el momento no está disponible. Estamos trabajando para servirte mejor. Por favor, intenta más tarde.</p> <div class="col-sm-12 btn-container"> <button type="button" class="bton blue-dark" id="btn-r-descargar-facturas">Reintentar</button> </div> </div> </div> </div> </div>';
					appendErrorGeneralHTML($('#modal-descargar .in-cont-mod'), null , errorHTML);

				}
		  	}

		  	$(form).find('button[type="submit"]').prop('disabled', false);
		},
		getDescargarFacturasFailResponse : function(error, form){
			console.log(error);
			/**mostrar mensaje enviado por sistema**/
		},
	};

	var sertec = {
		getSpecificIMEIResponse : function(data, form, sentTo, showInvalidErrorArchivo){
			/*simular error de archivo*/
			var hash = window.location.hash;
			if(hash=='#archivoInvalido'){
				showInvalidErrorArchivo();
				submit = false;
			}
			/*fin simular error de archivo*/
			else{
				console.log('Formulario enviado.');
				window.location.href = sentTo;
			}
		},
		getSpecificIMEIFailResponse : function(error, form){
			console.log(error);
		},
		getAllIMEIResponse : function(data, form, sentTo){
			console.log('Formulario enviado.');
			window.location.href = sentTo;
		},
		getAllIMEIFailResponse : function(error, form){
			console.log(error);
		},
		getSingleResponse : function(data, form, sentTo){
			console.log('Formulario enviado.');
			window.location.href = sentTo;
		},
		getSingleFailResponse : function(error, form){
			console.log(error);
		},
		getDescargarFacturasResponse : function(data, form, title){

			var hash= window.location.hash;

			/**Respuesta hardcodeada**/
			var data = { success: true };

		  	/**Caso de uso admin previamente eliminado**/
		  	if(hash=="#error-solicitud-descarga"){
				data.success = false;
				data.error = {
					message : 'Por el momento no se puede realizar tu solicitud, por favor intentalo más tarde.'
				};
			}

		  	if(data.success){
				$(form).hide();

				if(title!=null)
					title.element.html(title.text);

				$('#descargar-facturas-confirmacion').show();
		  	}
		  	else{
		  		/**mostrar mensaje enviado por sistema**/
		  		if(data.error){
					var errorHTML = '<div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb" id="error-autogestion-block"> <span class="icon io-Alert2"></span> <h2 class="h4">No se pudo procesar la operación</h2> <div id="listado-sin-autogestion-container"> <p>Lo sentimos, este servicio por el momento no está disponible. Estamos trabajando para servirte mejor. Por favor, intenta más tarde.</p> <div class="col-sm-12 btn-container"> <button type="button" class="bton blue-dark" id="btn-r-descargar-facturas">Reintentar</button> </div> </div> </div> </div> </div>';
					appendErrorGeneralHTML($('#modal-descargar .in-cont-mod'), null , errorHTML);

				}
		  	}

		  	$(form).find('button[type="submit"]').prop('disabled', false);
		},
		getDescargarFacturasFailResponse : function(error, form){
			console.log(error);
			/**mostrar mensaje enviado por sistema**/
		},
	};

	var historial = {
		getDescargarFacturasResponse : function(data, form, title){

			var hash= window.location.hash;

			/**Respuesta hardcodeada**/
			var data = { success: true };

		  	/**Caso de uso admin previamente eliminado**/
		  	if(hash=="#error-solicitud-descarga"){
				data.success = false;
				data.error = {
					message : 'Por el momento no se puede realizar tu solicitud, por favor intentalo más tarde.'
				};
			}

		  	if(data.success){
				$(form).hide();

				if(title!=null)
					title.element.html(title.text);

				$('#descargar-facturas-confirmacion').show();
		  	}
		  	else{
		  		/**mostrar mensaje enviado por sistema**/
		  		if(data.error){
					var errorHTML = '<div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb" id="error-autogestion-block"> <span class="icon io-Alert2"></span> <h2 class="h4">No se pudo procesar la operación</h2> <div id="listado-sin-autogestion-container"> <p>Lo sentimos, este servicio por el momento no está disponible. Estamos trabajando para servirte mejor. Por favor, intenta más tarde.</p> <div class="col-sm-12 btn-container"> <button type="button" class="bton blue-dark" id="btn-r-descargar-facturas">Reintentar</button> </div> </div> </div> </div> </div>';
					appendErrorGeneralHTML($('#modal-descargar .in-cont-mod'), null , errorHTML);

				}
		  	}

		  	$(form).find('button[type="submit"]').prop('disabled', false);
		},
		getDescargarFacturasFailResponse : function(error, form){
			console.log(error);
			/**mostrar mensaje enviado por sistema**/
		},
	};


	var configuracion = {
		getAgregarRolResponse : function(data, form, elementData, callback){
			var data = { success: true, data: [] };

			/* simular error de nombre existente */
		  	var hash = window.location.hash;

			if(hash=='#errorNombreExistente'){
				data.success = false;
				data.error = {
					message : 'El nombre del perfil fue utilizado anteriormente, favor de ingresar uno nuevo.'
				};

			}
			/* fin simular error de nombre existente */

			if(data.success){
		  		/* simular ID agregado en la DB */
				// var idAdded = $('.mosaico-view .item-mv').length;

				// callback(idAdded, elementData.name);

				// $('#btn-agregar-lineas-grupo-modal').attr('data-item', '{"id": "'+idAdded+'" ,"nombre": "'+elementData.name+'", "showgrupo" : true}');

				// $(form).hide();
				// $(form).addClass('success');

				// $('.form-agregar-rol .api-msg .rol-txt').html(elementData.name);

				window.location.href="configuracion-1-d.html";
		  	}
		  	else{

		  		/* mostrar error enviado por el sistema */

		  		if(data.error){
		  			appendErrorGeneral($('.form-agregar-rol .element-input-block'), elementData.input , data.error.message);
		  		}

		  	}
		},
		getAgregarRolFailResponse : function(error, form){
			console.log(error);
		},
		getAgregarRolAdminResponse : function(data, form, perfil, callback){
			var data = { success: true, data: [] };

			/* simular error de nombre existente */

			if(data.success){
		  		/* simular ID agregado en la DB */

		  		callback(perfil);

				//$(form).hide();
				//$(form).addClass('success');

				// $('.form-agregar-rol .api-msg .rol-txt').html(elementData.name);

		  	}
		  	else{

		  		/* mostrar error enviado por el sistema */

		  		if(data.error){
		  			appendErrorGeneral($('.form-agregar-rol .element-input-block'), elementData.input , data.error.message);
		  		}

		  	}
		},
		getAgregarRolAdminFailResponse : function(error, form){
			console.log(error);
		},
		postAgregarLineasArchivo : function(dataArchivo, callbackpostAgregarLineas, callbackArchivoInvalido ){
			/*Simular error de archivo ilegible */
			var hash = window.location.hash;
			if(hash=='#archivoInvalido')
				callbackArchivoInvalido();
			else{
				if(typeof dataArchivo != 'undefined')
					callbackpostAgregarLineas(dataArchivo, 'archivo');
			}
		},
		getAgregarLineasResponse : function(data, callbackMostrarTablas, callbackNextStep, aux){

			/**Respuesta hardcodeada**/
			var data = { success: true, data : [] };

			// ESTE SETTIMEOUT SOLO ESTA PARA SIMULAR QUE SE TARDA EN REGRESAR LA RESPUESTA
			setTimeout(function(){
				callbackNextStep('#modal-agregar-usuarios .step-3','#modal-agregar-usuarios .step-2');
				$('#modal-agregar-usuarios .loading-block-screen').hide();
			}, 3000);

			/**Respuesta simulada**/

		  	data.data = {
		  			success : ['5567778991', '576876541', '5523657999', '5544448991', '5511145678', '5567778991', '576876541', '5523657999', '5544448991', '5511145678'],
		  			error : []
		  	};

			/**fin Respuesta simulada**/

			/** Simular error caso de uso **/
		  	var hash = window.location.hash;

			if(hash=='#errorAgregarLineas'){
				data.data.error = [
					{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
					{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
					{'numero' : '5523657890', 'motivo' : 'Número no existe' },
					{'numero' : '5512348991', 'motivo' : 'Número no existe' },
					{'numero' : '5512345678', 'motivo' : 'Falta de permisos' }
				];
			}
			else if(hash == '#errorAgregarTodasLineas'){
				data.data.success = [];
				data.data.error = [
					{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
					{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
					{'numero' : '5523657890', 'motivo' : 'Número no existe' },
					{'numero' : '5512348991', 'motivo' : 'Número no existe' },
					{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
					{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
					{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
					{'numero' : '5523657890', 'motivo' : 'Número no existe' },
					{'numero' : '5512348991', 'motivo' : 'Número no existe' },
					{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
					{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
					{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
					{'numero' : '5523657890', 'motivo' : 'Número no existe' },
					{'numero' : '5512348991', 'motivo' : 'Número no existe' },
					{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
					{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
					{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
					{'numero' : '5523657890', 'motivo' : 'Número no existe' },
					{'numero' : '5512348991', 'motivo' : 'Número no existe' },
					{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
					{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
					{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
					{'numero' : '5523657890', 'motivo' : 'Número no existe' },
					{'numero' : '5512348991', 'motivo' : 'Número no existe' },
					{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
					{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
					{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
					{'numero' : '5523657890', 'motivo' : 'Número no existe' },
					{'numero' : '5512348991', 'motivo' : 'Número no existe' },
					{'numero' : '5512345678', 'motivo' : 'Falta de permisos' }
				];
			}

		  	if(data.success){

				$('#btn-add-lineas-arbol').prop('disabled', true);
				$('#modal-agregar-usuarios .txt-current').html(aux.text);
				callbackMostrarTablas(data.data);

				if($('#listado-usuarios').length>0)
				{
					var url = window.location.href;

					if (url.indexOf('configuracion-4-a') >= 0)
						window.location.href="configuracion-4-a-un-usuario.html";
					else if(url.indexOf('configuracion-4-b') >= 0)
						window.location.href="configuracion-4-b-un-usuario.html";
					else if (url.indexOf('configuracion-4-c') >= 0)
						window.location.href="configuracion-4-c-un-usuario.html";
					else if(url.indexOf('configuracion-4-d') >= 0)
						window.location.href="configuracion-4-d-un-usuario.html";
				}

		  	}
		  	else{
		  		//**Mostrar mensaje no success**//
		  	}



		},
		getAgregarLineasFailResponse : function(error, form){
			console.log(error);
		},
		getEditarNombreRolResponse : function(data, value, callback, $elementos){
			var $element = $elementos.element;
		  	var $input = $elementos.input;

			/**Respuesta hardcodeada**/
		  	var data = { success : true, data : [] };

			/**simular casp de uso**/
			var hash = window.location.hash;

			if(hash=='#errorNombreExistente'){

				data.success = false;

				data.error = {
					message : 'El nombre del perfil fue utilizado anteriormente, favor de ingresar uno nuevo.'
				};
			}

			if(data.success){
		  		$element.find('.name-container .ribbon-content').html(value);
		  		$element.data('name', value);
		  		$element.find('.name-container').removeClass('active-edit');

		  		var item = ( typeof $element.data('item') != 'undefined' ? $element.data('item') : null);

		  		if(item!=null){
		  			item.nombre = value;
		  			$element.data('item', item);
		  		}

		  	}
		  	else{
		  		//JSON SUCCESS FALSE
		  		if(data.error){
		  			callback($element, $input, data.error.message);
		  		}

		  	}


		},
		getEditarNombreRolFailResponse : function(error){
			console.log(error);
		},
		getEliminarRolResponse : function(data, form, currentModalData){

			/**Respuesta hardcodeada**/
			var data = { success: true };

		  	if(data.success){
		  		/**éxito**/
		  		$('#confirmar-eliminar-rol').hide();
		  		$('#eliminar-rol-confirmacion').show();
		  		$('#modal-eliminar-rol .alias-text').html(currentModalData.texto);

		  		var $rol = $('#rol-'+currentModalData.id);
		  		if($rol.length>0)
		  			$rol.remove();
		  	}
		  	else{
		  		/** Mostrar mensaje enviado por sistema **/
		  	}
		},
		getEliminarRolFailResponse : function(error, form){
			console.log(error);
		},
		getEliminarRolAdminResponse : function(data, form, currentModalData, callback){

			/**Respuesta hardcodeada**/
			var data = { success: true };

		  	if(data.success){
		  		/**éxito**/
		  		$('#confirmar-eliminar-rol-admin').hide();
		  		$('#eliminar-rol-admin-confirmacion').show();
		  		$('#modal-eliminar-rol-admin .alias-text').html(currentModalData.texto);
		  		$('#rol-'+currentModalData.id).parent().remove();
		  		callback();
		  	}
		  	else{
		  		/** Mostrar mensaje enviado por sistema **/
		  	}
		},
		getEliminarRolAdminFailResponse : function(error, form){
			console.log(error);
		},
		getAgregarUsuarioResponse : function(data, form, elementData, successCallback){
			var data = { success: true, data: [] };

			/* simular error de email existente */
		  	var hash = window.location.hash;

			if(hash=='#errorUsuarioEmail'){
				data.success = false;
				data.error = {
					message : 'Ya existe un usuario con ese correo electrónico.'
				};
			}
			/* fin simular error de email existente */

			if(data.success){

				var grupotxt = '',
				gtotal = elementData.grupos.length;

				if(gtotal>0){
					grupotxt = ' para que pueda gestionar el(los) grupo(s) seleccionado(s)'
				}
				// if(gtotal > 0)
				// {
				// 	var grupos = '',
				// 	cgtotal = 0;


				// 	grupotxt = ' para que ['+elementData.nombre+'] pueda gestionar ';

				// 	if(gtotal>1){
				// 		var grupo = '';
				// 		elementData.grupos.each(function() {

				// 			var $grupo = $( this );

				// 			grupo+=$grupo.data('grupo');

				// 			cgtotal++;

				// 			if(cgtotal == gtotal-1)
				// 				grupo+=' y ';
				// 			else if(cgtotal > 0 && cgtotal < gtotal)
				// 				grupo+=', ';

				// 		});

				// 		grupotxt+='los grupos ['+grupo+']';

				// 	}
				// 	else
				// 		grupotxt+='el grupo ['+elementData.grupos.id('grupo')+']';

				// }


				var msg = 'El usuario ['+elementData.nombre+'] se agrego de forma exitosa al perfil ['+elementData.rol+']. Se enviará un correo de bienvenida con los accesos a Mi Telcel Empresas a ['+elementData.correo+']'+grupotxt+'.';

				successCallback(msg);

				if($('#listado-usuarios').length>0)
				{
					var url = window.location.href;

					if (url.indexOf('configuracion-4-a') >= 0)
						window.location.href="configuracion-4-a-un-usuario.html";
					else if(url.indexOf('configuracion-4-b') >= 0)
						window.location.href="configuracion-4-b-un-usuario.html";
					else if (url.indexOf('configuracion-4-c') >= 0)
						window.location.href="configuracion-4-c-un-usuario.html";
					else if(url.indexOf('configuracion-4-d') >= 0)
						window.location.href="configuracion-4-d-un-usuario.html";
				}

				$(form).hide();
				$(form).addClass('success');

		  	}
		  	else{

		  		/* mostrar error enviado por el sistema */

		  		if(data.error){
		  			/*Este es el caso de correo electrónico existente*/
		  			var $container = $('#form-agregar-usuario .element-input-block .email-container');
		  			appendErrorGeneral($container, $container.find('input') , data.error.message);
		  		}

		  	}
		},
		getAgregarUsuarioFailResponse : function(error, form){
			console.log(error);
		},
		getCambiarRolResponse : function(data, form, callbackMostrarTablas, meta){

			// ESTE SETTIMEOUT SOLO ESTA PARA SIMULAR QUE SE TARDA EN REGRESAR LA RESPUESTA
			setTimeout(function(){
				$('#modal-cambiar-rol .step-2').hide();
				$('#modal-cambiar-rol .step-3').show();
				$('#modal-cambiar-rol .loading-block-screen').hide();
			}, 3000);

			/**Respuesta simulada**/

			/**Respuesta hardcodeada**/
			var data = { success: true, data : [] };

		  	data.success = true;

		  	data.data = {
		  			success : ['5567778991', '576876541', '5523657999', '5544448991', '5511145678', '5567778991', '576876541', '5523657999', '5544448991', '5511145678'],
		  			error : []
		  	};

			/**simular error caso de uso**/
			var hash = window.location.hash;

			if(hash=='#errorCambiarRol'){

				data.success = false;

				data.error = {
					message : 'No se puede realizar el cambio. Necesitas permisos para modificar este rol.'
				};

			}
			else if(hash=='#errorMoverMismoRol'){
				data.success = false;

				data.error = {
					message : 'Es necesario mover a un destino distinto al que pertenece.'
				};
			}

		  	if(data.success){
				$(form).hide();
				$(form).addClass('success');

				if(meta.isMultiple){

					/**Simular error agregar lineas**/
				  	var hash = window.location.hash;

					if(hash=='#errorCambiarUsuarios'){
						data.data.error = [
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' }
						];
					}
					else if(hash == '#errorCambiarTodosUsuarios'){
						data.data.success = [];
						data.data.error = [
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' }
						];
					}

					callbackMostrarTablas(data.data);

					$('#modal-cambiar-rol .multiple-lines').show();

				}
				else{
					$('#modal-cambiar-rol .single-msg').show();
				}

				$('#modal-cambiar-rol .rol-txt-new').html(meta.rol);
				$('#btn-cambiar-rol').prop('disabled', true);

		  	}
		  	else{
		  		/**Mostrar error que regresa el sistema**/
		  		// if(data.error){
		  		// 	callbackError($('#modal-cambiar-rol .form-cambiar-rol'), null, data.error.message);
		  		// }
		  	}
		},
		getCambiarRolFailResponse : function(error, form){
			console.log(error);
		},
		getEliminarUsuarioRolResponse : function(data, form, callbackMostrarTablas, meta){

			// ESTE SETTIMEOUT SOLO ESTA PARA SIMULAR QUE SE TARDA EN REGRESAR LA RESPUESTA
			setTimeout(function(){
				$('#modal-quitar-usuario .step-2').hide();
				$('#modal-quitar-usuario .step-3').show();
				$('#modal-quitar-usuario .loading-block-screen').hide();
			}, 3000);

			/**Respuesta simulada**/

			/**Respuesta hardcodeada**/
			var data = { success: true, data : [] };

		  	data.success = true;

		  	data.data = {
		  			success : ['5567778991', '576876541', '5523657999', '5544448991', '5511145678', '5567778991', '576876541', '5523657999', '5544448991', '5511145678'],
		  			error : []
		  	};

			/**simular error caso de uso**/
			var hash = window.location.hash;

			if(hash=='#errorEliminarUsuarioRol'){

				data.success = false;

				data.error = {
					message : 'No se puede realizar el cambio. Necesitas permisos para modificar este rol.'
				};

			}
			else if(hash=='#errorMoverMismoRol'){
				data.success = false;

				data.error = {
					message : 'Es necesario mover a un destino distinto al que pertenece.'
				};
			}

		  	if(data.success){
				$(form).hide();
				$(form).addClass('success');

				if(meta.isMultiple){

					/**Simular error agregar lineas**/
				  	var hash = window.location.hash;

					if(hash=='#errorCambiarUsuarios'){
						data.data.error = [
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' }
						];
					}
					else if(hash == '#errorCambiarTodosUsuarios'){
						data.data.success = [];
						data.data.error = [
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' },
							{'numero' : '5567888991', 'motivo' : 'Falta de permisos' },
							{'numero' : '5599876541', 'motivo' : 'Falta de permisos' },
							{'numero' : '5523657890', 'motivo' : 'Número no existe' },
							{'numero' : '5512348991', 'motivo' : 'Número no existe' },
							{'numero' : '5512345678', 'motivo' : 'Falta de permisos' }
						];
					}

					callbackMostrarTablas(data.data);

					$('#modal-quitar-usuario .multiple-lines').show();

				}
				else{
					$('#modal-quitar-usuario .single-msg').show();
				}

				$('#modal-quitar-usuario .rol-txt-new').html(meta.rol);
				$('#btn-confirmar-quitar').prop('disabled', true);

		  	}
		  	else{
		  		/**Mostrar error que regresa el sistema**/
		  		// if(data.error){
		  		// 	callbackError($('#modal-quitar-usuario .form-quitar-usuario'), null, data.error.message);
		  		// }
		  	}
		},
		getEliminarUsuarioRolFailResponse : function(error, form){
			console.log(error);
		},
		getEditarUsuarioResponse : function(data, form, elementData, successCallback){
			var data = { success: true, data: [] };

			/* simular error de email existente */
		  	var hash = window.location.hash;

			if(hash=='#errorUsuarioEmail'){
				data.success = false;
				data.error = {
					message : 'Ya existe un usuario con ese correo electrónico.'
				};
			}
			/* fin simular error de email existente */

			if(data.success){
				var msg= 'Los cambios en los datos del usuario ['+elementData.nombre+'] se han guardado correctamente. Se le notificará al usuario vía correo electrónico sobre los ajustes en su perfil.';

				successCallback(msg);

				$(form).hide();
				$(form).addClass('success');

		  	}
		  	else{

		  		/* mostrar error enviado por el sistema */

		  		if(data.error){
		  			/*Este es el caso de correo electrónico existente*/
		  			var $container = $('#form-editar-administrador .element-input-block .email-container');
		  			appendErrorGeneral($container, $container.find('input') , data.error.message);
		  		}

		  	}
		},
		getEditarUsuarioFailResponse : function(error, form){
			console.log(error);
		},
		getEditarPermisosResponse : function(data, form, redirect){
			var data = { success: true, data: [] };

			var hash = window.location.hash;
			var currentURL = window.location.href.substr(0, window.location.href.indexOf('#'));

			if(redirect == null)
			{
				if(hash=="#mandarError")
					window.location.href = currentURL+'#error';
				else
					window.location.href = currentURL+'#exito';

				window.location.reload();

			}
			else{
				window.location.href = redirect+'#rolCreado';
			}

			console.log('Formulario enviado.');

		},
		getEditarPermisosFailResponse : function(error, form){
			console.log(error);
		},
		getEditarNotificacionesResponse : function(data, form){
			var data = { success: true, data: [] };

			var hash = window.location.hash;
			var currentURL = window.location.href.substr(0, window.location.href.indexOf('#'));

			if(hash=="#mandarError")
				window.location.href = currentURL+'#error';
			else
				window.location.href = currentURL+'#exito';

			window.location.reload();
			console.log('Formulario enviado.');

		},
		getEditarNotificacionesFailResponse : function(error, form){
			console.log(error);
		},
		getCancelarAgregarRolResponse : function(data, form, redirect){
			var data = { success: true, data: [] };

			var hash = window.location.hash;
			var currentURL = window.location.href.substr(0, window.location.href.indexOf('#'));

			if(hash=="#mandarError"){
				window.location.href = currentURL+'#error';
				window.location.reload();
			}
			else
				window.location.href = redirect;

			console.log('Formulario enviado.');

		},
		getCancelarAgregarRolFailResponse : function(error, form){
			console.log(error);
		},
	};

	var redPrivada = {
		getAgregarContactoResponse : function(data, form, elementData, successCallback){
			//Regresar el id agregado
			var data = { success: true, data: {
				id : $('.red-contactos-table-block .table-main-block .linea-batch').length+1
			} };

			elementData.id = data.data.id;
			/* simular error de número existente */
		  	var hash = window.location.hash;

			if(hash=='#errorContactoNumero'){
				data.success = false;
				data.error = {
					message : 'Ya existe un contacto con ese número.'
				};
			}
			/* fin simular error de número existente */

			if(data.success){
				var msg = 'Se ha agregado correctamente el contacto con el número ['+elementData.numero+'], el número de operación de este movimiento es [65342122].';

				successCallback(elementData, msg);

				$(form).hide();
				$(form).addClass('success');

		  	}
		  	else{

		  		/* mostrar error enviado por el sistema */

		  		if(data.error){
		  			appendErrorGeneral($('.form-agregar-contacto'), null , data.error.message);
		  		}

		  	}
		},
		getAgregarContactoFailResponse : function(error, form){
			console.log(error);
		},
		getEditarContactoResponse : function(data, form, elementData, successCallback){
			var data = { success: true, data: [] };

			/* simular error de número existente */
		  	var hash = window.location.hash;

			if(hash=='#errorContactoNumero'){
				data.success = false;
				data.error = {
					message : 'Ya existe un contacto con ese número.'
				};
			}
			/* fin simular error de número existente */

			if(data.success){
				var msg = 'Se ha modificado correctamente el contacto con el número ['+elementData.numero+'], el número de operación de este movimiento es [87645326].';

				successCallback(elementData, msg);

				$(form).hide();
				$(form).addClass('success');

		  	}
		  	else{

		  		/* mostrar error enviado por el sistema */

		  		if(data.error){
		  			appendErrorGeneral($('.form-agregar-contacto'), null , data.error.message);
		  		}

		  	}
		},
		getEditarContactoFailResponse : function(error, form){
			console.log(error);
		},
		getEliminarContactoResponse : function(data, form, elementData, successCallback){
			var data = { success: true, data: [] };

			/* simular error de número existente */
		  	var hash = window.location.hash;

			// if(hash=='#errorContactoNumero'){
			// 	data.success = false;
			// 	data.error = {
			// 		message : 'Ya existe un contacto con ese número.'
			// 	};
			// }
			// /* fin simular error de número existente */

			if(data.success){
				var msg = 'Se ha eliminado correctamente el contacto con el número ['+elementData.numero+'], el número de operación de este movimiento es [76234565].';

				successCallback(elementData.id, msg);

				$(form).hide();
				$(form).addClass('success');

		  	}
		  	else{

		  		/* mostrar error enviado por el sistema */

		  		if(data.error){
		  			appendErrorGeneral($('.form-agregar-contacto'), null , data.error.message);
		  		}

		  	}
		},
		getEliminarContactoFailResponse : function(error, form){
			console.log(error);
		},
		getCargaMasivaResponse : function(data, form, sentTo, showInvalidErrorArchivo){
			/*simular error de archivo*/
			var hash = window.location.hash;
			if(hash=='#archivoInvalido'){
				showInvalidErrorArchivo();
				submit = false;
			}
			/*fin simular error de archivo*/
			else{
				console.log('Formulario enviado.');
				window.location.href = sentTo;
			}
		},
		getCargaMasivaFailResponse : function(error, form){
			console.log(error);
		},
		getModificarContactoResponse : function(data, form, successCallback){
			var data = { success: true, data: [] };

			/* simular error de número existente */
		  	var hash = window.location.hash;

			if(hash=='#errorModificar'){
				data.success = false;
				data.error = {
					message : 'Se ha presentado un error al intentar modificar el contacto. Por favor intentalo más tarde y si el problema persiste contacta a un ejecutivo.'
				};
			}
			/* fin simular error de número existente */

			if(data.success){

				$(form).hide();
				$(form).addClass('success');

				successCallback('Los cambios se han guardado con éxito, el número de operación de este movimiento es [87234567].');

		  	}
		  	else{

		  		$(form).hide();
				$(form).addClass('success');

				//successCallback(data.error.message);

				/**mostrar mensaje enviado por sistema**/
		  		if(data.error.message){
					var errorHTML = '<div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb" id="error-autogestion-block"> <span class="icon io-Alert2"></span> <h2 class="h4">No se pudo procesar la operación</h2> <div id="listado-sin-autogestion-container"> <p>'+data.error.message+'</p> <div class="col-sm-12 btn-container"> <button type="button" class="bton blue-dark btn-rsend-general">Reintentar</button> </div> </div> </div> </div> </div>';
					appendErrorGeneralHTML($('#modal-modificar-contacto #form-modificar-contacto'), null , errorHTML);

				}

		  	}
		},
		getModificarContactoFailResponse : function(error, form){
			console.log(error);
		},
		getMarcacionCortaResponse : function(data, form, successCallback){
			var data = { success: true, data: [] };

			/* simular error de número existente */
		  	var hash = window.location.hash;

			if(hash=='#errorModificar'){
				data.success = false;
				data.error = {
					message : 'Se ha presentado un error al intentar modificar el contacto. Por favor intentalo más tarde y si el problema persiste contacta a un ejecutivo.'
				};
			}
			/* fin simular error de número existente */

			if(data.success){

				$(form).hide();
				$(form).addClass('success');

				successCallback('Los cambios se han guardado con éxito, el número de operación de este movimiento es [78345678].');

		  	}
		  	else{

		  		$(form).hide();
				$(form).addClass('success');

				//successCallback(data.error.message);
				/**mostrar mensaje enviado por sistema**/
		  		if(data.error.message){
					var errorHTML = '<div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb" id="error-autogestion-block"> <span class="icon io-Alert2"></span> <h2 class="h4">No se pudo procesar la operación</h2> <div id="listado-sin-autogestion-container"> <p>'+data.error.message+'</p> <div class="col-sm-12 btn-container"> <button type="button" class="bton blue-dark btn-rsend-general">Reintentar</button> </div> </div> </div> </div> </div>';
					appendErrorGeneralHTML($('#modal-marcacion-corta #form-marcacion-corta'), null , errorHTML);

				}
		  	}
		},
		getMarcacionCortaFailResponse : function(error, form){
			console.log(error);
		},
		getControlCostosServiciosResponse : function(data, form, sentTo){
			console.log('Formulario enviado.');
			window.location.href = sentTo;
		},
		getControlCostosServiciosFailResponse : function(error, form){
			console.log(error);
		},
		getModificarDesvioResponse : function(data, form, successCallback){
			var data = { success: true, data: [] };

			/* simular error de número existente */
		  	var hash = window.location.hash;

			if(hash=='#errorModificar'){
				data.success = false;
				data.error = {
					message : 'Se ha presentado un error al intentar modificar el contacto. Por favor intentalo más tarde y si el problema persiste contacta a un ejecutivo.'
				};
			}
			/* fin simular error de número existente */

			if(data.success){

				$(form).hide();
				$(form).addClass('success');

				successCallback('Los cambios se han guardado con éxito, el número de operación de este movimiento es [89234567].');

		  	}
		  	else{

		  		$(form).hide();
				$(form).addClass('success');

				//successCallback(data.error.message);
				/**mostrar mensaje enviado por sistema**/
		  		if(data.error.message){
					var errorHTML = '<div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb" id="error-autogestion-block"> <span class="icon io-Alert2"></span> <h2 class="h4">No se pudo procesar la operación</h2> <div id="listado-sin-autogestion-container"> <p>'+data.error.message+'</p> <div class="col-sm-12 btn-container"> <button type="button" class="bton blue-dark btn-rsend-general">Reintentar</button> </div> </div> </div> </div> </div>';
					appendErrorGeneralHTML($('#modal-modificar-desvio #form-modificar-desvio'), null , errorHTML);

				}
		  	}
		},
		getModificarDesvioFailResponse : function(error, form){
			console.log(error);
		},
		getCargaDirectorioGeneralResponse : function(data, form, sentTo, showInvalidErrorArchivo){
			/*simular error de archivo*/
			var hash = window.location.hash;
			if(hash=='#archivoInvalido'){
				showInvalidErrorArchivo();
				submit = false;
			}
			/*fin simular error de archivo*/
			else{
				console.log('Formulario enviado.');
				window.location.href = sentTo;
			}
		},
		getCargaDirectorioGeneralFailResponse : function(error, form){
			console.log(error);
		},
	};

	var roaming = {
		getCoberturaResponse : function(data, form ){
			console.log(data);
		},
		getCoberturaFailResponse : function(error, form){
			console.log(error);
		},
		getPaquetesRoamingUsuarioResponse : function(data, callBack ){
			/**Aquí regresa los paquetes y tarifas disponibles que coincidan con la búsqueda y se pintan en el html**/
			var data = {
				"paquete-4" : {"id" : "4", "nombre": "Paquete Viajero Internacional de Internet 1000 MB", "costo": "932.00", "tyc" : "Pie jelly beans fruitcake powder cake biscuit. Toffee oat cake biscuit jujubes gummi bears tart I love. Tiramisu fruitcake tiramisu gummies lollipop cake sweet oat cake. Sweet roll sesame snaps donut pastry. Jujubes lemon drops jujubes macaroon carrot cake dragée cake. Liquorice icing gummies jujubes bear claw chocolate candy canes cake. Gingerbread pudding carrot cake icing pudding. Pastry pie tootsie roll marshmallow pastry. Soufflé jelly gingerbread pudding I love. Caramels sugar plum topping topping sweet cake.",
					"fecha" : { "init" : "10/08/2017", "fin" : "01/09/2017" }
				},

				"paquete-6" : {
					"id" : "6", "nombre": "Nombre de tarifa tipo 1", "costo": "199.00", "tyc" : "Pie jelly beans fruitcake powder cake biscuit. Toffee oat cake biscuit jujubes gummi bears tart I love. Tiramisu fruitcake tiramisu gummies lollipop cake sweet oat cake. Sweet roll sesame snaps donut pastry. Jujubes lemon drops jujubes macaroon carrot cake dragée cake. Liquorice icing gummies jujubes bear claw chocolate candy canes cake. Gingerbread pudding carrot cake icing pudding. Pastry pie tootsie roll marshmallow pastry. Soufflé jelly gingerbread pudding I love. Caramels sugar plum topping topping sweet cake."

				},
				"paquete-8" : {"id" : "8", "nombre": "Paquete Completo con Claro Video 50", "costo": "199.00", "tyc" : "Pie jelly beans fruitcake powder cake biscuit. Toffee oat cake biscuit jujubes gummi bears tart I love. Tiramisu fruitcake tiramisu gummies lollipop cake sweet oat cake. Sweet roll sesame snaps donut pastry. Jujubes lemon drops jujubes macaroon carrot cake dragée cake. Liquorice icing gummies jujubes bear claw chocolate candy canes cake. Gingerbread pudding carrot cake icing pudding. Pastry pie tootsie roll marshmallow pastry. Soufflé jelly gingerbread pudding I love. Caramels sugar plum topping topping sweet cake."},
				"paquete-10" : {
					"id" : "10", "nombre": "Cruceros y Ferries que pertenecen a las siguientes líneas navieras: Royal Caribbean International, Pullmantur Cruices, Celebrity Cruices", "costo": "199.00", "tyc" : "Pie jelly beans fruitcake powder cake biscuit. Toffee oat cake biscuit jujubes gummi bears tart I love. Tiramisu fruitcake tiramisu gummies lollipop cake sweet oat cake. Sweet roll sesame snaps donut pastry. Jujubes lemon drops jujubes macaroon carrot cake dragée cake. Liquorice icing gummies jujubes bear claw chocolate candy canes cake. Gingerbread pudding carrot cake icing pudding. Pastry pie tootsie roll marshmallow pastry. Soufflé jelly gingerbread pudding I love. Caramels sugar plum topping topping sweet cake."
				},
				"paquete-12" : {
					"id" : "12", "nombre": "Nombre de tarifa tipo 3", "costo": "199.00", "tyc" : "Pie jelly beans fruitcake powder cake biscuit. Toffee oat cake biscuit jujubes gummi bears tart I love. Tiramisu fruitcake tiramisu gummies lollipop cake sweet oat cake. Sweet roll sesame snaps donut pastry. Jujubes lemon drops jujubes macaroon carrot cake dragée cake. Liquorice icing gummies jujubes bear claw chocolate candy canes cake. Gingerbread pudding carrot cake icing pudding. Pastry pie tootsie roll marshmallow pastry. Soufflé jelly gingerbread pudding I love. Caramels sugar plum topping topping sweet cake."
				},
				"paquete-14" : {
					"id" : "14", "nombre": "Tarifa Marítima Tipo 1", "costo": "189.00", "tyc" : "Pie jelly beans fruitcake powder cake biscuit. Toffee oat cake biscuit jujubes gummi bears tart I love. Tiramisu fruitcake tiramisu gummies lollipop cake sweet oat cake. Sweet roll sesame snaps donut pastry. Jujubes lemon drops jujubes macaroon carrot cake dragée cake. Liquorice icing gummies jujubes bear claw chocolate candy canes cake. Gingerbread pudding carrot cake icing pudding. Pastry pie tootsie roll marshmallow pastry. Soufflé jelly gingerbread pudding I love. Caramels sugar plum topping topping sweet cake."
				}
			};

			callBack(data);

		},
		getPaquetesRoamingUsuarioUsuarioFailResponse : function(error){
			console.log(error);
		},
		getSearchRoamingResponse : function(data, form, callBack, destinos ){

			/**Aquí regresa los paquetes y tarifas disponibles que coincidan con la búsqueda y se pintan en el html**/
			var data = {
				"paquete-4" : {"id" : "4", "nombre": "Paquete Viajero Internacional de Internet 1000 MB", "costo": "932.00", "tyc" : "Pie jelly beans fruitcake powder cake biscuit. Toffee oat cake biscuit jujubes gummi bears tart I love. Tiramisu fruitcake tiramisu gummies lollipop cake sweet oat cake. Sweet roll sesame snaps donut pastry. Jujubes lemon drops jujubes macaroon carrot cake dragée cake. Liquorice icing gummies jujubes bear claw chocolate candy canes cake. Gingerbread pudding carrot cake icing pudding. Pastry pie tootsie roll marshmallow pastry. Soufflé jelly gingerbread pudding I love. Caramels sugar plum topping topping sweet cake."},

				"paquete-6" : {
					"id" : "6", "nombre": "Nombre de tarifa tipo 1", "costo": "199.00", "tyc" : "Pie jelly beans fruitcake powder cake biscuit. Toffee oat cake biscuit jujubes gummi bears tart I love. Tiramisu fruitcake tiramisu gummies lollipop cake sweet oat cake. Sweet roll sesame snaps donut pastry. Jujubes lemon drops jujubes macaroon carrot cake dragée cake. Liquorice icing gummies jujubes bear claw chocolate candy canes cake. Gingerbread pudding carrot cake icing pudding. Pastry pie tootsie roll marshmallow pastry. Soufflé jelly gingerbread pudding I love. Caramels sugar plum topping topping sweet cake."

				},
				"paquete-8" : {"id" : "8", "nombre": "Paquete Completo con Claro Video 50", "costo": "199.00", "tyc" : "Pie jelly beans fruitcake powder cake biscuit. Toffee oat cake biscuit jujubes gummi bears tart I love. Tiramisu fruitcake tiramisu gummies lollipop cake sweet oat cake. Sweet roll sesame snaps donut pastry. Jujubes lemon drops jujubes macaroon carrot cake dragée cake. Liquorice icing gummies jujubes bear claw chocolate candy canes cake. Gingerbread pudding carrot cake icing pudding. Pastry pie tootsie roll marshmallow pastry. Soufflé jelly gingerbread pudding I love. Caramels sugar plum topping topping sweet cake."},
				"paquete-10" : {
					"id" : "10", "nombre": "Cruceros y Ferries que pertenecen a las siguientes líneas navieras: Royal Caribbean International, Pullmantur Cruices, Celebrity Cruices", "costo": "199.00", "tyc" : "Pie jelly beans fruitcake powder cake biscuit. Toffee oat cake biscuit jujubes gummi bears tart I love. Tiramisu fruitcake tiramisu gummies lollipop cake sweet oat cake. Sweet roll sesame snaps donut pastry. Jujubes lemon drops jujubes macaroon carrot cake dragée cake. Liquorice icing gummies jujubes bear claw chocolate candy canes cake. Gingerbread pudding carrot cake icing pudding. Pastry pie tootsie roll marshmallow pastry. Soufflé jelly gingerbread pudding I love. Caramels sugar plum topping topping sweet cake."
				},
				"paquete-12" : {
					"id" : "12", "nombre": "Nombre de tarifa tipo 3", "costo": "199.00", "tyc" : "Pie jelly beans fruitcake powder cake biscuit. Toffee oat cake biscuit jujubes gummi bears tart I love. Tiramisu fruitcake tiramisu gummies lollipop cake sweet oat cake. Sweet roll sesame snaps donut pastry. Jujubes lemon drops jujubes macaroon carrot cake dragée cake. Liquorice icing gummies jujubes bear claw chocolate candy canes cake. Gingerbread pudding carrot cake icing pudding. Pastry pie tootsie roll marshmallow pastry. Soufflé jelly gingerbread pudding I love. Caramels sugar plum topping topping sweet cake."
				},
				"paquete-14" : {
					"id" : "14", "nombre": "Tarifa Marítima Tipo 1", "costo": "189.00", "tyc" : "Pie jelly beans fruitcake powder cake biscuit. Toffee oat cake biscuit jujubes gummi bears tart I love. Tiramisu fruitcake tiramisu gummies lollipop cake sweet oat cake. Sweet roll sesame snaps donut pastry. Jujubes lemon drops jujubes macaroon carrot cake dragée cake. Liquorice icing gummies jujubes bear claw chocolate candy canes cake. Gingerbread pudding carrot cake icing pudding. Pastry pie tootsie roll marshmallow pastry. Soufflé jelly gingerbread pudding I love. Caramels sugar plum topping topping sweet cake."
				}
			};

			callBack(data);
		},
		getSearchRoamingFailResponse : function(error, form){
			console.log(error);
		},
		contratarServiciosSuccessCallback : function(data, form, sentTo){
			console.log('Formulario enviado.');
			window.location.href = sentTo;
		},
		contratarServiciosFailCallback : function(error, form){
			console.log(error);
		},
	};


	return{

		apiURL :{
			generalTest : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			consultarLineas : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			eliminarGrupo : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			editarNombreGrupo : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			arbolGruposRoot : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/root.php"; },
			arbolGruposChildren : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/children-group.php"; },
			arbolGruposBusqueda : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/search-tree.php"; },
			arbolBusqueda : function(tree){ return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/search"+tree+"-tree.php"; },
			arbolOnlyGruposRoot : function(){
				var hash = window.location.hash;
				if(hash=='#soloSinAgrupar')
					return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/root-grupos-sin-agrupar.php";
				else
					return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/root-grupos.php";
				 },
			arbolOnlyGruposBusqueda : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/search-grupos-tree.php"; },
			moverGrupo : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			agregarLineasArchivo : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			agregarLineas : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			editarNombreAlias : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			eliminarAlias : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			eliminarAdmin : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			quitarCuentas : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			asociarCuentas : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			generarReferenciaUnica : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			getFacturasPendientesHome : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			getCACs : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			getEstadosMunicipios : function(){ return "https://bitbucket.org/foxnetorka/estados-de-mexico/raw/6fc110abab0167e8d0aa42f537135dce8dfa834e/Mexico-Estados.json"; },
			getCACAvailableDateTimes : function(){ return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			cancelarCita : function(){ return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			cancelarVisita : function(){ return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			reprogramarCita : function(){ return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			getCurrentDateTime : function(){ return "http://time.jsontest.com/"; },
			editarNombreRol : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			eliminarRol : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			eliminarRolAdmin : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			agregarUsuariosArchivo : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			agregarUsuarios : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			eliminarUsuarioRol : function(){return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			cancelarRol : function(){ return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			eliminarContacto: function(){ return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			getRoamingDestinos: function(){ return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
			getRoamingDestinosJSON : function(){ return "../../assets/roaming.json"; },
			getPaquetesUsuario : function(){ return "http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php"; },
		},

		buscador : buscador,

		ordenamiento : ordenamiento,

		general : {
			getAutocompleteData : autocompleteTokenfield,
			getArbolBusquedaGeneralCallSuccess : general.getArbolBusquedaGeneralResponse,
			getArbolBusquedaGeneralCallFail : general.getArbolBusquedaGeneralFailResponse,
			getArbolBusquedaGruposCallSuccess : general.getArbolBusquedaGruposResponse,
			getArbolBusquedaGruposCallFail : general.getArbolBusquedaGruposFailResponse
		},
		login : {
			passForgotCallSuccess : login.getPassForgotResponse,
			passForgotCallFail : login.getPassForgotFailResponse,
			userLoginCallSuccess : login.getUserLoginResponse,
			userLoginCallFail : login.getUserLoginFailResponse,
			activarCuentaCallSuccess : login.getActivarCuentaResponse,
			activarCuentaCallFail : login.getActivarCuentaFailResponse,
			reestablecerContrasenaCallSuccess : login.getEstablecerContrasenaResponse,
			reestablecerContrasenaCallFail : login.getEstablecerContrasenaFailResponse,
			actualizarDatosCallSuccess : login.getActualizarDatosResponse,
			actualizarDatosCallFail : login.getActualizarDatosFailResponse
		},
		gestionGrupos : {
			cuentasAsociadasSuccessCallback : gestionGrupos.cuentasAsociadasSuccessCallback,
			cuentasAsociadasFailCallback : gestionGrupos.cuentasAsociadasFailCallback,
			enviarDatosAutogestionMasivosPost : gestionGrupos.enviarDatosAutogestionMasivos,
			agregarGrupoSuccessCallback : gestionGrupos.getAgregarGrupoResponse,
			agregarGrupoFailCallback : gestionGrupos.getAgregarGrupoFailResponse,
			consultarLineasSuccessCallback : gestionGrupos.getConsultarLineasResponse,
			consultarLineasFailCallback : gestionGrupos.getConsultarLineasFailResponse,
			eliminarGrupoSuccessCallback : gestionGrupos.getEliminarGrupoResponse,
			eliminarGrupoFailCallback : gestionGrupos.getEliminarGrupoFailResponse,
			descargarFacturasSuccessCallback : gestionGrupos.getDescargarFacturasResponse,
			descargarFacturasFailCallback : gestionGrupos.getDescargarFacturasFailResponse,
			editarNombreGrupoSuccessCallback : gestionGrupos.getEditarNombreGrupoResponse,
			editarNombreGrupoFailCallback : gestionGrupos.getEditarNombreGrupoFailResponse,
			editarNombreLineaSuccessCallback : gestionGrupos.getEditarNombreLineaResponse,
			editarNombreLineaFailCallback : gestionGrupos.getEditarNombreLineaFailResponse,
			busquedaArbolGruposSuccessCallback : gestionGrupos.getBusquedaArbolGruposResponse,
			busquedaArbolGruposFailCallback : gestionGrupos.getBusquedaArbolGruposFailResponse,
			moverGrupoSuccessCallback : gestionGrupos.getMoverGrupoResponse,
			moverGrupoFailCallback : gestionGrupos.getMoverGrupoFailResponse,
			postAgregarLineasArchivo : gestionGrupos.postAgregarLineasArchivo,
			agregarLineasSuccessCallback : gestionGrupos.getAgregarLineasResponse,
			agregarLineasFailCallback : gestionGrupos.getAgregarLineasFailResponse,
			cargaMasivaPostArbolCallSuccess : gestionGrupos.getCargaMasivaPostArbolResponse,
			cargaMasivaPostArbolCallFail : gestionGrupos.getCargaMasivaPostArbolFailResponse,
			cargaMasivaCallSuccess : gestionGrupos.getCargaMasivaResponse,
			cargaMasivaCallFail : gestionGrupos.getCargaMasivaFailResponse,
		},
		autogestion : {
			enviarCorreoConfirmacionCallSuccess : autogestion.getEnviarCorreoConfirmacionResponse,
			enviarCorreoConfirmacionCallFail : autogestion.getEnviarCorreoConfirmacionFailResponse,
			singleSuspensionCallSuccess : autogestion.getSingleSuspensionResponse,
			singleSuspensionCallFail : autogestion.getSingleSuspensionFailResponse,
			singleAutogestionGeneralCallSuccess : autogestion.getSingleAutogestionGeneralResponse,
			singleAutogestionGeneralCallFail : autogestion.getSingleAutogestionGeneralFailResponse,
			masivoSuspensionCallSuccess : autogestion.getMasivoSuspensionResponse,
			masivoSuspensionCallFail : autogestion.getMasivoSuspensionFailResponse,
			masivoAutogestionGeneralCallSuccess : autogestion.getMasivoAutogestionGeneralResponse,
			masivoAutogestionGeneralCallFail : autogestion.getMasivoAutogestionGeneralFailResponse,
			masivoAutogestionServiciosCallSuccess : autogestion.getMasivoAutogestionServiciosResponse,
			masivoAutogestionServiciosCallFail : autogestion.getMasivoAutogestionServiciosFailResponse,
			masivoAutogestionConfirmacionGeneralCallSuccess : autogestion.getMasivoAutogestionConfirmacionGeneralResponse,
			masivoAutogestionConfirmacionGeneralCallFail : autogestion.getSingleAutogestionConfirmacionGeneralFailResponse,
			redPrivadaCallSuccess : autogestion.getRedPrivadaCallResponse,
			redPrivadaCallFail : autogestion.getRedPrivadaCallFailResponse,
			abonoDeSaldoCallSuccess : autogestion.getAbonoDeSaldoCallResponse,
			abonoDeSaldoCallFail : autogestion.getAbonoDeSaldoCallFailResponse,
			masivoAutogestionRoamingCallSuccess : autogestion.getMasivoAutogestionRoamingResponse,
			masivoAutogestionRoamingCallFail : autogestion.getMasivoAutogestionServiciosFailResponse,
			singleAutogestionRoamingCallSuccess : autogestion.getSingleAutogestionRoamingResponse,
			singleAutogestionRoamingCallFail : autogestion.getSingleAutogestionRoamingFailResponse,

		},
		servicios : {
			contratarServiciosSuccessCallback : servicios.contratarServiciosSuccessCallback,
			contratarServiciosFailCallback : servicios.contratarServiciosFailCallback,
		},
		gestionEjecutivos : {
			/** Gestión de alias **/
			agregarAliasSuccessCallback : gestionEjecutivos.getAgregarAliasResponse,
			agregarAliasFailCallback : gestionEjecutivos.getAgregarAliasFailResponse,
			editarNombreAliasSuccessCallback : gestionEjecutivos.getEditarNombreAliasResponse,
			editarNombreAliasFailCallback : gestionEjecutivos.getEditarNombreAliasFailResponse,
			eliminarAliasSuccessCallback : gestionEjecutivos.getEliminarAliasResponse,
			eliminarAliasFailCallback : gestionEjecutivos.getEliminarAliasFailResponse,
			agregarAdminSuccessCallback : gestionEjecutivos.getAgregarAdminResponse,
			agregarAdminFailCallback : gestionEjecutivos.getAgregarAdminFailResponse,
			editarAdminSuccessCallback : gestionEjecutivos.getEditarAdminResponse,
			editarAdminFailCallback : gestionEjecutivos.getEditarAdminFailResponse,
			eliminarAdminSuccessCallback : gestionEjecutivos.getEliminarAdminResponse,
			eliminarAdminFailCallback : gestionEjecutivos.getEliminarAdminFailResponse,
			/** Fin Gestión de alias **/

			/** Asociar/Quitar cuentas **/
			asociarCuentasSuccessCallback : gestionEjecutivos.getAsociarCuentasResponse,
			asociarCuentasFailCallback : gestionEjecutivos.getAsociarCuentasFailResponse,
			quitarCuentasSuccessCallback : gestionEjecutivos.getQuitarCuentasResponse,
			quitarCuentasFailCallback : gestionEjecutivos.getQuitarCuentasFailResponse,
			cuentasAsociadasSuccessCallback : gestionEjecutivos.cuentasAsociadasSuccessCallback,
			cuentasAsociadasFailCallback : gestionEjecutivos.cuentasAsociadasFailCallback,
			/** Fin Asociar/Quitar cuentas **/
		},

		facturacion : {
			facturacionFormCallSuccess : facturacion.getFacturacionFormResponse,
			facturacionFormCallFail : facturacion.getFacturacionFormFailResponse,
			descargarFacturasSuccessCallback : facturacion.getDescargarFacturasResponse,
			descargarFacturasFailCallback : facturacion.getDescargarFacturasFailResponse,
			generarReferenciaUnicaSuccessCallback : facturacion.generarReferenciaUnicaResponse,
			generarReferenciaUnicaFailCallback : facturacion.generarReferenciaUnicaFailResponse,
		},
		home : {
			getFacturasPendientes : home.getFacturasPendientes,
			getFacturasPendientesFail : home.getFacturasPendientesFail,
			cambioFormCallSuccess: home.getCambioFormResponse,
			cambioFormCallFail: home.getCambioFormFailResponse,
			suspensionFormCallSuccess: home.getSuspensionFormResponse,
			suspensionFormCallFail: home.getSuspensionFormFailResponse,
			CACFormCallSuccess: home.getCACFormResponse,
			CACFormCallFail: home.getCACFormFailResponse,
			reactivacionFormCallSuccess: home.getReactivacionFormResponse,
			reactivacionFormCallFail: home.getReactivacionFormFailResponse,
		},
		citas : {
			setCACLocationSuccessCallback : citas.setCACLocation,
			setCACClosestLocationSuccessCallback : citas.setCACClosestLocation,
			getCACAvailableDateTimesSuccessCallback : citas.getCACAvailableDateTimes,
			getCACAvailableDateTimesCallFail: citas.getCACAvailableDateTimesFailResponse,
			CACFormCallSuccess: citas.getCACFormResponse,
			CACFormCallFail: citas.getCACFormFailResponse,
			consultarDateTimeSuccessCallback : citas.consultarDateTimeResponse,
			consultarDateTimeFailCallback : citas.consultarDateTimeFailResponse,
			cancelarCitaSuccessCallback : citas.getCancelarCitaResponse,
			cancelarCitaFailCallback : citas.getCancelarCitaFailResponse,
			cancelarVisitaSuccessCallback : citas.getCancelarVisitaResponse,
			cancelarVisitaFailCallback : citas.getCancelarVisitaFailResponse,
			reprogramarCitaSuccessCallback : citas.getReprogramarCitaResponse,
			reprogramarCitaFailCallback : citas.getReprogramarCitaFailResponse,
		},
		adendum : {
			singleAdendumCallSuccess : adendum.getSingleAdendumResponse,
			singleAdendumCallFail : adendum.getSingleAdendumFailResponse,
			masivoAdendumCallSuccess : adendum.getMasivoAdendumResponse,
			masivoAdendumCallFail : adendum.getMasivoAdendumFailResponse,
			allCallSuccess : adendum.getAllResponse,
			allCallFail : adendum.getAllFailResponse,
			descargarFacturasSuccessCallback : adendum.getDescargarFacturasResponse,
			descargarFacturasFailCallback : adendum.getDescargarFacturasFailResponse,
		},
		sertec : {
			specificIMEICallSuccess : sertec.getSpecificIMEIResponse,
			specificIMEICallFail : sertec.getSpecificIMEIFailResponse,
			allIMEICallSuccess : sertec.getAllIMEIResponse,
			allIMEICallFail : sertec.getAllIMEIFailResponse,
			singleCallSuccess : sertec.getSingleResponse,
			singleCallFail : sertec.getSingleFailResponse,
			descargarFacturasSuccessCallback : sertec.getDescargarFacturasResponse,
			descargarFacturasFailCallback : sertec.getDescargarFacturasFailResponse,
		},
		historial : {
			descargarFacturasSuccessCallback : historial.getDescargarFacturasResponse,
			descargarFacturasFailCallback : historial.getDescargarFacturasFailResponse,
		},
		configuracion : {
			agregarRolSuccessCallback : configuracion.getAgregarRolResponse,
			agregarRolFailCallback : configuracion.getAgregarRolFailResponse,
			agregarRolAdminSuccessCallback : configuracion.getAgregarRolAdminResponse,
			agregarRolAdminFailCallback : configuracion.getAgregarRolAdminFailResponse,
			postAgregarLineasArchivo : configuracion.postAgregarLineasArchivo,
			agregarLineasSuccessCallback : configuracion.getAgregarLineasResponse,
			agregarLineasFailCallback : configuracion.getAgregarLineasFailResponse,
			editarNombreRolSuccessCallback : configuracion.getEditarNombreRolResponse,
			editarNombreRolFailCallback : configuracion.getEditarNombreRolFailResponse,
			eliminarRolSuccessCallback : configuracion.getEliminarRolResponse,
			eliminarRolFailCallback : configuracion.getEliminarRolFailResponse,
			eliminarRolAdminSuccessCallback : configuracion.getEliminarRolAdminResponse,
			eliminarRolAdminFailCallback : configuracion.getEliminarRolAdminFailResponse,
			agregarUsuarioSuccessCallback : configuracion.getAgregarUsuarioResponse,
			agregarUsuarioFailCallback : configuracion.getAgregarUsuarioFailResponse,
			cambiarRolSuccessCallback : configuracion.getCambiarRolResponse,
			cambiarRolFailCallback : configuracion.getCambiarRolFailResponse,
			eliminarUsuarioRolSuccessCallback : configuracion.getEliminarUsuarioRolResponse,
			eliminarUsuarioRolFailCallback : configuracion.getEliminarUsuarioRolFailResponse,
			editarUsuarioSuccessCallback : configuracion.getEditarUsuarioResponse,
			editarUsuarioFailCallback : configuracion.getEditarUsuarioFailResponse,
			editarPermisosSuccessCallback : configuracion.getEditarPermisosResponse,
			editarPermisosFailCallback : configuracion.getEditarPermisosFailResponse,
			editarNotificacionesSuccessCallback : configuracion.getEditarNotificacionesResponse,
			editarNotificacionesFailCallback : configuracion.getEditarNotificacionesFailResponse,
			cancelarAgregarRolSuccessCallback : configuracion.getCancelarAgregarRolResponse,
			cancelarAgregarRolFailCallback : configuracion.getCancelarAgregarRolFailResponse,
		},
		redPrivada : {
			agregarContactoSuccessCallback : redPrivada.getAgregarContactoResponse,
			agregarContactoFailCallback : redPrivada.getAgregarContactoFailResponse,
			editarContactoSuccessCallback : redPrivada.getEditarContactoResponse,
			editarContactoFailCallback : redPrivada.getEditarContactoFailResponse,
			eliminarContactoSuccessCallback : redPrivada.getEliminarContactoResponse,
			eliminarContactoFailCallback : redPrivada.getEliminarContactoFailResponse,
			cargaMasivaCallSuccess : redPrivada.getCargaMasivaResponse,
			cargaMasivaCallFail : redPrivada.getCargaMasivaFailResponse,
			modificarContactoSuccessCallback : redPrivada.getModificarContactoResponse,
			modificarContactoFailCallback : redPrivada.getModificarContactoFailResponse,
			marcacionCortaSuccessCallback : redPrivada.getMarcacionCortaResponse,
			marcacionCortaFailCallback : redPrivada.getMarcacionCortaFailResponse,
			controlCostosServiciosSuccessCallback : redPrivada.getControlCostosServiciosResponse,
			controlCostosServiciosFailCallback : redPrivada.getControlCostosServiciosFailResponse,
			modificarDesvioSuccessCallback : redPrivada.getModificarDesvioResponse,
			modificarDesvioFailCallback : redPrivada.getModificarDesvioFailResponse,
			cargaDirectorioGeneralCallSuccess : redPrivada.getCargaDirectorioGeneralResponse,
			cargaDirectorioGeneralCallFail : redPrivada.getCargaDirectorioGeneralFailResponse,
		},
		roaming : {
			getCoberturaSuccessCallback : roaming.getCoberturaResponse,
			getCoberturaFailCallback : roaming.getCoberturaFailResponse,
			getPaquetesRoamingUsuarioSuccessCallback : roaming.getPaquetesRoamingUsuarioResponse,
			getPaquetesRoamingUsuarioFailCallback : roaming.getPaquetesRoamingUsuarioFailResponse,
			getSearchRoamingSuccessCallback : roaming.getSearchRoamingResponse,
			getSearchRoamingFailCallback : roaming.getSearchRoamingFailResponse,
			contratarServiciosSuccessCallback : roaming.contratarServiciosSuccessCallback,
			contratarServiciosFailCallback : roaming.contratarServiciosFailCallback,
		}


	}

}();

// var utils = (window.location.hostname == "localhost:3000" || window.location.hostname == "multiplicamx") ? utils.multiplica : utils.gluo;

// MODALES TELCEL
var $body = $('body');

function modalesTelcel($element, options){
	this.element = $element;

	if(typeof options != undefined){

		if(typeof options.onInit != undefined){
			this.initAction = options.onInit;
			this.init();
		}

		if(typeof options.onReset != undefined)
			this.resetAction = options.onReset;

		if(typeof options.onOpen !=undefined)
			this.openAction = options.onOpen;

		if(typeof options.onClose !=undefined)
			this.closeAction= options.onClose;
	}

	this.generalActionCloseModal();
}

modalesTelcel.prototype.openModal = function(){

	if(typeof this.openAction == 'function')
		this.openAction();

	(this.element).addClass('active');
	document.body.className += " fixed-body";

	if(typeof window.event != 'undefined' && window.event != null)
		window.event.cancelBubble = true;

	if($('.gestion-cuentas-block').length>0 || $('.gestion-ejecutivos-block').length>0){
		$('.group-block').removeClass('active');
		$('.row-ls').removeClass('active-settings');
		$('.general-group-options-container').removeClass('active');
	}

	if($('.roles-block #main-view-block').length>0){
		$('.rol-element').removeClass('active');
		// $('.row-ls').removeClass('active-settings');
		// $('.general-group-options-container').removeClass('active');
	}
}

modalesTelcel.prototype.closeModal = function(){

	if(typeof this.closeAction == 'function')
		this.closeAction();

	this.element.removeClass('active');
	this.element.removeClass('active-up-black');
	$body.removeClass('fixed-body');
	$body.removeClass('settings-open');
	//document.body.className = "MTE loaded";
	this.reset();

}

modalesTelcel.prototype.generalActionCloseModal = function(){

	var self = this;

	(self.element).on('click', '.m-btn-close-modal', function(){
		self.closeModal();
		var $toelement = null;
		// Acciones generales a realizar en Gestion de grupos
		if(!$('body').hasClass('settings-open') && $('.gestion-cuentas-block').length>0 || $('.gestion-ejecutivos-block').length>0)
			$toelement = ($('#main-view-block').length>0 ? $('#main-view-block') : $('.container-fluid.gestion-ejecutivos'));
		else if($('.autogestion-general-block').length>0)
			$toelement = ($('#listado-autogestion-container').length>0 ? $('#listado-autogestion-container') : null );

		if($toelement!=null){
			$('html, body').animate({
		        scrollTop: $toelement.offset().top
		    }, 400);
		}
	});

	(self.element).on('click', '.window-modal', function(e){
		e.stopPropagation();

		if($('body').hasClass('settings-open'))
		{
			$('body').removeClass('settings-open');
			$('.date-picker').removeClass('open');
		}


	});


	(self.element).click(function(e){
		e.stopPropagation();
		if(!$(this).hasClass('no-close-out'))
			self.closeModal();
	});

}

modalesTelcel.prototype.reset = function(){
	var self = this;
	if(typeof this.resetAction != undefined)
		this.resetAction();
}

modalesTelcel.prototype.init = function(){
	var self = this;
	if(typeof this.initAction != undefined)
		this.initAction();
}
// VARIABLE PARA TESTEAR NUESTROS POST
var postURL = 'http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/test.php';
var postURLUpload = 'http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/upload.php';
var homeURL = '../index.html';
var imgUrl = '../../assets/img/';
var initialWidth = $(window).width(),
initialHeight = $(window).height();
var EnvironmentServices = {'development': EnvironmentServicesDevelopment, 'production': EnvironmentServicesProduction };

var Services  = (isDevelopmentEnvironment()) ? EnvironmentServices.development : EnvironmentServices.production;

checkBrowserCompatibility();
getOsName();

function checkBrowserCompatibility(){

	var browsers = [
		{ 'name': 'Microsoft Edge', 'minVersion': '12' },
		{ 'name': 'Samsung Internet', 'minVersion': '1' },
		{ 'name': 'Opera Mini', 'minVersion': '24'},
		{ 'name': 'Opera', 'minVersion': '24' },
		{ 'name': 'Chrome', 'minVersion': '21'},
		{ 'name': 'Chrome Mobile', 'minVersion': '21' },
		{ 'name': 'Firefox', 'minVersion': '16' },
		{ 'name': 'Firefox for iOS', 'minVersion': '16' },
		{ 'name': 'IE', 'minVersion': '10' },
		{ 'name': 'Safari', 'minVersion': '6.4' }
	];
	var $body = $('body');

	var found = false;
	var compatible = true;

	for (var i = 0; i < browsers.length; i++) {
		if (platform.name == browsers[i].name){
			found = true;
			var min_version = parseFloat(browsers[i].minVersion);
			// console.log('Min version: ' + min_version);
			if(!isNaN(min_version) && min_version > parseFloat(platform.version)){
				compatible = false;
			}
		}
	}

	//console.log('Navegador: '+ platform.name + ' v. '+ platform.version);
	if(compatible){
		//setNoCompatibleScreen();
		var hasSwipers = ( $('body .swiper-mobile').length>0 ? true : false );

		$body.addClass('loaded');

		//15 del fix de los lados
		var initw = $(window).width()+15;

		if(hasSwipers && initw < 768)
			generalFullLoadingIcon($('body'), true);

		//console.log('!Navegador compatible¡');
	}else{

		setNoCompatibleScreen();
		throw new('Navegados no compatible');
	}

	return compatible;
}

function setNoCompatibleScreen(){
	var template_url = '../../sections/navegador-no-soportado/no-compatible.html';

	var $body = $('body'),
	$container = $body.find('.full-content');

	$.get( template_url , function( template ) {
		$body.addClass('no_heading-footer no-compatible-msg');
		$container.html('');
		$container.append(template);

		var browsers = getOsBrowsers();

		$(browsers).removeClass('hidden');
		$body.addClass('loaded');

    });
}

function getOsBrowsers(){
	var os_browsers = false;

	var os_linux = ['CentOS', 'Debian', 'Fedora', 'FreeBSD', 'Gentoo', 'Haiku', 'Kubuntu', 'Linux Mint', 'OpenBSD', 'Red Hat', 'SuSE', 'Ubuntu', 'Xubuntu', 'Cygwin', 'Symbian OS', 'hpwOS', 'webOS ', 'webOS', 'Tablet OS', 'Tizen', 'Linux', "Debian", "Fedora", "Red Hat", "SuSE", "Ubuntu"];
	var os_mac = ["OS X", 'Mac OS X', 'Macintosh', 'Mac'];
	var os_windows = ['Windows 98;','Windows ',"Windows", "Windows Server 2008 R2 / 7", "Windows Server 2008 / Vista", "Windows XP"];
	// console.log(platform.os);
    for (var i = 0; i < os_windows.length; i++) {
    	if(platform.os.family == os_windows[i]){
    		if(parseFloat(platform.os.version)>=10)
    			os_browsers = '.c-edge,.c-firefox,.c-chrome';
    		else
    			os_browsers = '.c-ie,.c-firefox,.c-chrome';
    	}
    }

    if(!os_browsers){
	    for (var i = 0; i < os_mac.length; i++) {
	    	if(platform.os.family == os_mac[i]){
	    		os_browsers = '.c-safari,.c-firefox,.c-chrome';
	    	}
	    }
    }

    if(!os_browsers){
	    for (var i = 0; i < os_linux.length; i++) {
	    	if(platform.os.family == os_linux[i]){
	    		os_browsers = '.c-firefox,.c-chrome';
	    	}
	    }
    }

// Mac:  Safari, Firefox, Chrome
// Windows 10: Edge Firefox Chrome
// Windows <10: Iexplore Firefox Chrome
// Linux: Firefox Chrome
    if(!os_browsers)
    	os_browsers ='.c-safari,.c-ie,.c-firefox,.c-chrome,.c-edge';

    return os_browsers;
}

function getOsName(){
	var os_name = false;

	var os_linux = ['CentOS', 'Debian', 'Fedora', 'FreeBSD', 'Gentoo', 'Haiku', 'Kubuntu', 'Linux Mint', 'OpenBSD', 'Red Hat', 'SuSE', 'Ubuntu', 'Xubuntu', 'Cygwin', 'Symbian OS', 'hpwOS', 'webOS ', 'webOS', 'Tablet OS', 'Tizen', 'Linux', "Debian", "Fedora", "Red Hat", "SuSE", "Ubuntu"];
	var os_mac = ["OS X", 'Mac OS X', 'Macintosh', 'Mac'];
	var os_windows = ['Windows 98;','Windows ',"Windows", "Windows Server 2008 R2 / 7", "Windows Server 2008 / Vista", "Windows XP"];

    //Mobile: "Android", "iOS" and "Windows Phone"

    for (var i = 0; i < os_windows.length; i++) {
    	if(platform.os.family == os_windows[i]){
    		os_name = 'Windows';
    	}
    }

    if(!os_name){
	    for (var i = 0; i < os_mac.length; i++) {
	    	if(platform.os.family == os_mac[i]){
	    		os_name = 'Macintosh';
	    	}
	    }
    }

    if(!os_name){
	    for (var i = 0; i < os_linux.length; i++) {
	    	if(platform.os.family == os_linux[i]){
	    		os_name = 'Linux';
	    	}
	    }
    }

    if(!os_name)
    	os_name = platform.os.family;

    //console.log('OS: ' +os_name);

    return os_name;
}


function isDevelopmentEnvironment(){
	var response = false;
	var development_domains = ['localhost','localhost','localhost'];

	for (var i = 0; i < development_domains.length; i++) {
		if (checkEnvironment(development_domains[i]))
			response = true;
	}

	return response;
}

function checkEnvironment(domain){
	var url_array = window.location.href.split("/");

	var found = false;

	for (var i = 0; i < url_array.length; i++) {
		if (url_array[i] == domain)
			found = true;
	}

	return found;
}

/* Checa si se esta haciendo un post a un html */
function checkDevelopmentPostHTML(apiURL){

	if (apiURL.slice(apiURL.length-5,apiURL.length) === '.html')
		apiURL = Services.apiURL.generalTest();

	return apiURL;
}

/* Checa si se esta haciendo un post a un html */

var generalCheckBoxAll = (function(){

	var $main = $('#listado-check-all-container.general-block'),
	isLimited = $('#listado-check-all-container.general-block').hasClass('limit-data') && typeof $main.data('limit') != 'undefined',
	limit = (isLimited ? $main.data('limit') : 0),
	$paginaCheckbox = $main.find('#checkbox-pagina-all'),
	$allCheckbox = $('#check-all-elements'),
	$elementContainer = null,
	$elements = null,
	$mainBtn = null,
	allChecked = false,
	//Aquí hardcodeo en total de checkbox en todas las páginas
	totalcheckbox = 0,
	checkedElements = [],
	texto = '',
	pronombre = 'las';


	function checkElementExists(){
		if($main.length>0)
			initGeneralCheckBoxAll();
	}

	function getCheckedElements(){
		var checkedData = { all: false , data : [], total : 0};

		if(allChecked)
		{
			checkedData.all = true;
			checkedData.total = totalcheckbox;
		}
		else{
			checkedData.data = checkedElements;
			checkedData.total = checkedElements.length;
		}

		return checkedData;
	}

	function initGeneralCheckBoxAll(){
		$elementContainer = ( typeof $main.data('elements') != 'undefined' ? $($main.data('elements')) : null );

		if($elementContainer.length>0){
			setVariables();
			initActions();
		}
	}

	function setVariables(){
		$elements = $elementContainer.find('linea-batch');
		$mainBtn = ( typeof $main.data('btn') != 'undefined' ? $($main.data('btn')) : null );
		texto = ( typeof $main.data('elemento') != 'undefined' ? $main.data('elemento') : '' );
		pronombre = ( typeof $main.data('pronombre') != 'undefined' ? $main.data('pronombre') : 'las' );
	}

	function initActions(){
		setActionsCheckbox();

		//**obtener el total de lineas de todas las páginas o actualizar**/
		totalcheckbox = (typeof $main.data('total') != 'undefined' ? $main.data('total') : 22);
	}


	function checkButtonsActive(){
		if($elementContainer.find('input[type="checkbox"]:checked').length>0)
			$mainBtn.prop('disabled', false);
		else
			$mainBtn.prop('disabled', true);
	}

	function setMessageCheckbox(selectAll){

		var totalpagecheckbox = $elementContainer.find('input[type="checkbox"]:checked').length;

		$('.total-all-pagina-checkbox').html(totalcheckbox);
		if(isLimited && totalcheckbox>limit)
			$allCheckbox.addClass('hidden');

		if(totalpagecheckbox == 0){
			$paginaCheckbox.prop("checked", false);
			$('.listado-select-all-block').removeClass('active');
			$('.listado-select-all-block').trigger('cssClassChanged');
		}
		else if(selectAll){
			$allCheckbox.html('Anular la selección');
			$('#total-pagina-checkbox').html('todo el listado.');
			$('#total-checkbox').html(totalcheckbox);
		}
		else{
			$allCheckbox.html('Seleccionar '+pronombre+' <strong>'+totalcheckbox+'</strong> '+texto+' del listado');
			$('#total-pagina-checkbox').html('esta página'+(isLimited ? ' (puede elegir máximo '+limit+')' : '' )+'.');
			$('#total-checkbox').html(totalpagecheckbox);
		}

		if(isLimited && totalpagecheckbox ==0)
			$('.listado-select-all-block').removeClass('active');
		else{
			$('.listado-select-all-block').addClass('active');
		}

		$('.listado-select-all-block').trigger('cssClassChanged');

	}


	function setActionsCheckbox(){

		allChecked = false;

		actionsCheckboxIndividual();

		actionsCheckboxAll();

		actionsCheckboxAllPagina();

	}

	function updateCheckboxElement($checkbox){
		var index = checkedElements.indexOf($checkbox.val());
		 // && index == -1
		if($checkbox.is(':checked'))
			checkedElements.push($checkbox.val());
		//&& index > -1
		else if(!$checkbox.is(':checked'))
			checkedElements.splice(index, 1);
	}

	function actionsCheckboxIndividual(){

		//CHECKBOX INDIVIDUAL
		$elementContainer.on('change', 'input[type="checkbox"]', function(e){
			e.stopPropagation();
			var $checkbox = $(this);
			var totalNew = checkedElements.length + 1;

			if(limit>0 && totalNew>limit && $checkbox.is(':checked')){
				$checkbox.prop('checked', false);
				// $('#modal-limitar-masivo .regular-msg').addClass('hidden');
				// $('#modal-limitar-masivo .limit-data-msg').removeClass('hidden');
				modalLimitarMasivo.openModal();
			}
			else{

				var $container = $checkbox.closest('.linea-batch, .row-ls');
				$container.toggleClass('checked-element');

				if($elementContainer.find('input[type="checkbox"]').length == $elementContainer.find('input[type="checkbox"]:checked').length){
					$paginaCheckbox.prop('checked', true);
					setMessageCheckbox(false);
				}
				else if(isLimited){
					setMessageCheckbox(false);
				}
				else{
					allChecked = false;
					$paginaCheckbox.prop('checked', false);
					$allCheckbox.data('value', true);
					$('.listado-select-all-block').removeClass('active');
					$('.listado-select-all-block').trigger('cssClassChanged');
				}

				//Agregar elemento a arreglo
				updateCheckboxElement($checkbox);

				checkButtonsActive();
			}

		});
	}

	function actionsCheckboxAllPagina(){

		$('.listado-select-all-block .elements-name').html(texto);


		$paginaCheckbox.change(function(e) {

			e.stopPropagation();

			var totalNew = $elementContainer.find('input[type="checkbox"]').length;

			if(limit>0 && totalNew>limit && $paginaCheckbox.is(':checked')){
				$paginaCheckbox.prop('checked', false);
				// $('#modal-limitar-masivo .regular-msg').addClass('hidden');
				// $('#modal-limitar-masivo .limit-data-msg').removeClass('hidden');
				modalLimitarMasivo.openModal();
			}
			else{
				// //SE ACTUALIZA CADA UNO DE LOS ELEMENTOS DE LA PÁGINA
				$elementContainer.find('input[type="checkbox"]').each(function( index ) {

					var $checkbox = $(this);
					var $parent = $checkbox.closest('.linea-batch, .row-ls');

					if($paginaCheckbox.is(":checked")){
						$checkbox.prop( "checked", true );
						$parent.addClass('checked-element');
					}
					else {
						$checkbox.prop( "checked", false );
						$parent.removeClass('checked-element');
					}

					updateCheckboxElement($checkbox);

				});

				//MOSTRAR EL MENSAJE PARA PODER SELECCIONAR TODOS
				if($paginaCheckbox.is(":checked")) {
					setMessageCheckbox(false);
				}
				else{
					$allCheckbox.data('value', true);
					$('.listado-select-all-block').removeClass('active');
					$('.listado-select-all-block').trigger('cssClassChanged');
				}

				checkButtonsActive();
			}

		});
	}

	function actionsCheckboxAll(){

		$allCheckbox.click(function(e) {

			e.preventDefault();
			e.stopPropagation();

			var flag = $allCheckbox.data('value');

			allChecked = flag;

			var totalNew = totalcheckbox;

			if(limit>0 && totalNew>limit && allChecked){
				$allCheckbox.prop('checked', false);
				// $('#modal-limitar-masivo .regular-msg').addClass('hidden');
				// $('#modal-limitar-masivo .limit-data-msg').removeClass('hidden');
				modalLimitarMasivo.openModal();
			}
			else{
				$paginaCheckbox.prop('checked', flag);

				$elementContainer.find('input[type="checkbox"]').each(function( index ) {

					var $checkbox = $(this);
					$checkbox.prop( "checked", flag );

					var $parent = $checkbox.closest('.linea-batch, .row-ls');

					if(flag)
						$parent.addClass('checked-element');
					else
						$parent.removeClass('checked-element');

				});

				$allCheckbox.data('value', !flag);

				if(flag){
					setMessageCheckbox(flag);
				}
				else{
					$('.listado-select-all-block').removeClass('active');
					$('.listado-select-all-block').trigger('cssClassChanged');
					//$('#total-pagina-checkbox').html('esta cuenta.');
				}

				checkButtonsActive();
			}
		});

	}

	return{
		inicializar: function(){
			checkElementExists();
		},
		getCheckedElements : getCheckedElements
	}

})();

var initializedDate = false;

var generalDatePicker = (function(){
	var $searchMovimientos = $('.general-fs-container#search-movimientos-container');

	var range = { 'init' : null, 'fin' : null },
	maxDate = null,
	maxDateData = null,
	maxDate = null,
	minDate = null,
	minDateData = null,
	minDate = null,
	currentDate = null;

	function initCalendars(){
		initializedDate = true;
		init();
		setActions();
	}

	function initCalendar(){
		var $datepickers = $( '.date-picker' );

		$datepickers.each(function() {

			var $datepicker = $(this),
			$fechaSpan = $datepicker.find('.one-field'),
			$calendar = $datepicker.find('.calendar'),
		  	fields = (typeof $fechaSpan.data('field') != 'undefined' ? $fechaSpan.data('field') : null),
		  	name = (fields != null && typeof fields.name != 'undefined' ? fields.name : null),
		  	currentDate = $fechaSpan.html(),
		  	exclude = (typeof $calendar.data('exclude') != 'undefined' ? $calendar.data('exclude').replace(/ /g, '') : ''),
		  	exclude = exclude.split(',');

		  	$calendar.datepicker({
		        dateFormat: 'dd/mm/yy',
				firstDay: 1,
				beforeShowDay: function(date){
			        var string = jQuery.datepicker.formatDate('dd/mm/yy', date);
			        return [ exclude.indexOf(string) == -1 ]
			    }
			});

		  	if(name!=null){
		  		$( '<input type="hidden" class="fecha-input" name="'+name+'" id="input-'+name+'" value="'+currentDate+'"/>' ).insertAfter( $fechaSpan );
		  	}

		  	$calendar.datepicker( "option", "minDate", range.init );
		  	$calendar.datepicker( "option", "maxDate", range.fin );

		  	if( $('.calendar.fin').length>0)
				$( '.calendar.fin' ).parents('.date-picker').addClass('disabled');

		  	if(currentDate!=''){
		  		$calendar.datepicker( "setDate" , currentDate );
		  		if(!$( '.calendar.fin' ).parents('.date-picker').hasClass('preselected'))
		  			$( '.calendar.fin' ).parents('.date-picker').removeClass('disabled');

		  		if($('.date-pickers-container').length>0 && $calendar.hasClass('init'))
		  			updateDateRange($calendar, currentDate);
		  	}

		});
	}

	function init(){
		$.datepicker.regional['es'] = {
			closeText: 'Cerrar',
			prevText: '',
			nextText: '',
			currentText: 'Hoy',
			monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
			monthNamesShort: ['Ene','Feb','Mar','Abr', 'May','Jun','Jul','Ago','Sep', 'Oct','Nov','Dic'],
			dayNames: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
			dayNamesShort: ['Dom','Lun','Mar','Mié','Juv','Vie','Sáb'],
			dayNamesMin: ['D','L','M','M','J','V','S'],
			weekHeader: 'Sm',
			dateFormat: 'dd/mm/yy',
			firstDay: 0,
			isRTL: false,
			showMonthAfterYear: false,
			yearSuffix: ''
		 };

		$.datepicker.setDefaults($.datepicker.regional['es']);

		var $calendarFirst = ( $( '.calendar.init' ).length>0 ? $( '.calendar.init' ) : $( '.calendar' ));

		maxDate = (typeof $calendarFirst.data('max') != 'undefined' ? $calendarFirst.data('max') : null );
		maxDateData = (maxDate != null ? maxDate.split('/') : null);
		maxDate = (maxDateData != null ? new Date(maxDateData[2], maxDateData[1]-1, maxDateData[0] ) : new Date()),
		minDate = (typeof $calendarFirst.data('min') != 'undefined' ? $calendarFirst.data('min') : null );
		minDateData = (minDate != null ? minDate.split('/') : null);
		minDate = (minDateData != null ? new Date(minDateData[2], minDateData[1]-1, minDateData[0] ) : new Date()),
		exclude = [];

		range = {'init' : minDate, 'fin' : maxDate };

		initCalendar();


	}

	function closeCalendar(){
		$('.date-picker').removeClass('open');
		$('body').removeClass('settings-open');
	}


	function setActions(){

		$(window).on("resize", closeCalendar);

		/** Mostrar/Esconder Calendario**/
		$('.date-picker').on('click', '.input', function(e){
			e.stopPropagation();

			var $calendar = $(this),
				$parent = $calendar.parents('.date-picker');

			if(!$parent.hasClass('disabled')){
				if($('.date-picker').length>1 && $('.date-picker.open').length>0)
					$('.date-picker').removeClass('open');

				else if(!$parent.hasClass('open')){
					$parent.addClass('open');
					$('body').addClass('settings-open');
					if(is_mobile()){
						scrollToElement($('.general-fs-container'));
					}
				}
				else
					$parent.removeClass('open');


				// //$parent.toggleClass('open');
			}

		});

		/**Esconder Calendario en Mobile**/
		$(".date-picker").on('click', '.layer-mobile-aux', function(e){
			closeCalendar();
		});

		$(".calendar").on('click','',function(e){
			e.stopPropagation();
		});

		/**Cuando cambia settear el valor de las fechas**/
		$(".calendar").on("change",function(e){

			var $calendar = $(this),
				selected = $calendar.val(),
				selectedA =
				$parent = $calendar.parents('.date-picker'),
				$child = $parent.find('.result').children('span'),
				$input = $parent.find('input.fecha-input');

				$child.html(selected);
				$input.val(selected);
				$parent.removeClass('open');


			if($calendar.hasClass('init')){

				$parent = $parent.parents('.date-pickers-container'),
				$fin = $parent.find('.calendar.fin'),
				$finParent = $fin.parent('.date-picker'),
				$inputFin = $finParent.find('.fecha-input'),
				$spanFin = $finParent.find('span.fecha'),
				selectedDateInit = new Date(selected),
				selectedFin = ($inputFin.val()!='' ? new Date(separateDate($inputFin.val())) : '');

				if(selectedFin == '')
					selectedFin = maxDate;

				var selectedDateFin = selectedFin;

				if(selectedDateInit>selectedDateFin){
					$inputFin.val('');
					$spanFin.html('');
					$fin.datepicker( "setDate");
					$fin.find('.ui-state-active').removeClass('ui-state-active');
				}

				if($searchMovimientos.length>0)
				{
					var $inits = $('.calendar.init');
					$inits.each(function() {
						var $this = $(this);
						var $datepicker = $this.parent('.date-picker');
						var $fechaSpan = $datepicker.find('.one-field');

						$fechaSpan.html(selected);
						$inits.datepicker( "setDate", selected );
						updateDateRange($this, selected);
						$('.date-pickers-container').find('.date-picker.disabled').removeClass('disabled');

					});
				}
				else{

					updateDateRange($calendar, selected);
					$parent.find('.date-picker.disabled').removeClass('disabled');
				}

			}

			if($calendar.hasClass('fin') && $searchMovimientos.length>0){
				var $fins = $('.calendar.fin');

				$fins.each(function() {
					var $this = $(this);
					var $datepicker = $this.parent('.date-picker');
					var $fechaSpan = $datepicker.find('.one-field');

					$fechaSpan.html(selected);
					$fins.datepicker( "setDate", selected );
				});
			}

			if($('.time-picker').length>0)
				$('.time-picker').trigger('updateDataTiempos');

			generalContainerFS.updateData();

		});
	}

	function separateDate(date){
		var dateS = /(\d+)\/(\d+)\/(\d+)/.exec(date);

		return [dateS[3], dateS[2], dateS[1]];
	}

	function updateDateRange($calendarInit, selectedInit){
		var initialize = (typeof init != 'undefined' ? true : false);
		var $calendarParent = $calendarInit.parents('.date-picker'),
		$parent = $calendarParent.parents('.date-pickers-container'),
		limit = $parent.hasClass('limit-month'),
		limitv2 = $parent,
		initDate = new Date(separateDate(selectedInit)),
		$calendarFin = $parent.find('.calendar.fin'),
		$datepickerFin = $calendarFin.parent('.date-picker'),
		$spanFin = $datepickerFin.find('.one-field'),
		$inputFin = $datepickerFin.find('input.fecha-input'),
		selectedFin = null;

		if($inputFin.val() != '')
		{
			var n = separateDate($inputFin.val());
			selectedFin = new Date(n[0], n[1]-1, n[2]);
		}
		else
			selectedFin = maxDate;


		var finDate = (selectedFin!='' ?  selectedFin : ''),
		preselectedFin = selectedFin;

		if(limit){
			var daysRange = 31,
			/**El rango de fechas a seleccionar de la fecha Init seleccionada + 31**/
			endDate = addDays(selectedInit, daysRange);

			if( endDate > range.fin )
				endDate = range.fin;

			if(preselectedFin>endDate || preselectedFin == '')
				preselectedFin = endDate;


			$calendarFin.datepicker('option', { minDate: selectedInit});
			$calendarFin.datepicker('option', { maxDate : endDate });

			if(preselectedFin!=null){
				$calendarFin.datepicker( "setDate", preselectedFin);
				var dia = preselectedFin.getDate().toString();
				var mes = (preselectedFin.getMonth()+1).toString();
				var f = (dia.length>1 ? dia : '0'+dia ) +'/'+(mes.length>1 ? mes : '0'+mes)+'/'+preselectedFin.getFullYear();
				$spanFin.html(f);
				$inputFin.val(f);
			}
		}
	}


	function addDays(date, days) {
		var nDate = separateDate(date);
	    var result = new Date(nDate[0], nDate[1], nDate[2]);
	    result.setDate(result.getDate() + days);
	    return result;
	}

	function subtractDays(date, days) {
	    var result = new Date(separateDate(date));
	    result.setDate(result.getDate() - days);
	    return result;
	}

	function updateBothElements(){

	}

	return{
		inicializar: initCalendars
	};

})();

var generalContainerFS = (function(){

	var $container = $('.general-fs-container'),
	$btnBuscar = $container.find('.main-btn'),
	$btnLimpiarFiltro = $container.find('.btn-limpiar-filtro'),
	$btnLimpiar = $('.btn-limpiar-busqueda'),
	containerData = {},
	$wrapper = $container.parent('form'),
	hasBusqueda = $wrapper.hasClass('con-busqueda-filtrado'),
	query = '';

	function init(){

		if($container.length>0){
			//*Simular filtrado botón "limpiar filtros"**//
			var hash = window.location.hash;
			//END//
			initFields();
			initActions();

			if($('.date-picker').length>0)
				generalDatePicker.inicializar();

			if(hasBusqueda)
				mostrarBusquedaMobile();
		}
	}

	function mostrarBusquedaMobile(){
		var $btnshow = $wrapper.closest('section').find('.hide-show-filter');
		$btnshow.trigger('click');
	}

	function initFields(){
		$container.find('.one-field').each(function (index, value) {
			var $field = $(this);
			var fieldOptions = ( typeof $field.data('field') != 'undefined' ? $field.data('field') : null );
			if(fieldOptions != null)
				if(fieldOptions.name != 'undefined')
					initData(fieldOptions);
				//if(fieldOptions.minLength != 'undefined')
					//initFieldMin(fieldOptions.minLength);
		});

	}

	function initData(fieldOptions){
		containerData[fieldOptions.name] = { value : '', min : (typeof fieldOptions.min != 'undefined' ? fieldOptions.min : 1 ) };
	}

	function initFieldMin(min){
		var length = Number(min);

	}

	function initActions(){
		var sendingForm = false;

		$container.on('change', '.one-field', function(e){
			var $field = $(this);
			updateData($field);
		});

		$container.find('input.one-field').bind('input', function(e){
			var $field = $(this);
			updateData($field);
		});

		$btnBuscar.on('click',function(e){

			e.preventDefault();

			if(!sendingForm){

				var $button = $(this),
					$parent = $button.closest('form'),
					form_data = $parent.serialize(),
					parent_id = $parent.attr('id'),
					urlPOST = ( $parent.prop('action') == '' ? postURL : $parent.prop('action') ),
					/**Quitar una vez en producción**/
					sendTo = urlPOST,
					urlPOST = checkDevelopmentPostHTML(urlPOST);

					sendingForm = true;

				if(typeof parent_id != 'undefined' && typeof Services.buscador[parent_id].searchForm != 'undefined'){
					$.post(  urlPOST , form_data )
						.done(function( data ) {
						  	Services.buscador[parent_id].searchForm(form_data, sendTo);
							sendingForm = false;

						 })
						.fail(function( jqxhr, textStatus, error ) {
						  	//Mensaje de error del sistema
						  	console.log('Mensaje de error');
						  	sendingForm = false;
						});

				} else {
					if(urlPOST){
						limpiarFiltros(urlPOST);
						sendingForm = false;
					} else {
						searchItemsQuery(query);
						sendingForm = false;
					}
				}
			}

		});

		$btnLimpiarFiltro.on('click', function(e){
			var $button = $(this),
			parent_id = $button.closest('form').attr('id'),
			url = (typeof $button.data('href') !='undefined' ? $button.data('href') : null );

			limpiarForm($('#'+parent_id));

			if(typeof parent_id != 'undefined' && typeof Services.buscador[parent_id].cleanForm != 'undefined'){
				Services.buscador[parent_id].cleanForm();
			} else {
				if(url!=null)
					limpiarFiltros(url);
			}

		});

		$btnLimpiar.on('click', function(e){
			var $button = $(this),
			parent_id = $button.closest('form').attr('id'),
			url = (typeof $button.data('href') !='undefined' ? $button.data('href') : null );

			limpiarForm($('#'+parent_id));

			// Si se desea agregar un comportamiento se debe agregar el id del formulario como Método en el Services correspondiente, con el submétodo cleanForm
			if(typeof parent_id != 'undefined' && typeof Services.buscador[parent_id].cleanForm != 'undefined'){
				Services.buscador[parent_id].cleanForm();
			} else {
				if(url!=null)
					limpiarFiltros(url);
			}
		});

		/**
			Mostrar/Ocultar tablas
		**/
		$('body').on('click', '.hide-show-filter', function(e){

			var filter = ( typeof $(this).data('filter') != 'undefined' ? $(this).data('filter') : null ),
			nombre = ( typeof $(this).data('name') != 'undefined' ? $(this).data('name') : 'filtrado' );

			checkDetalleOpen();

			if(filter!=null){
				var text = $(this).text();
				var newtext = (text == "Mostrar "+nombre ? "Ocultar "+nombre : "Mostrar "+nombre);

    			$(this).text( newtext );

    			$(filter).toggleClass( 'visible' );
    			$(filter).trigger('cssClassChanged');
			}
		});
	}

	function checkDetalleOpen(){
		var $containerDetalle = $('.collapse-table-block');
		var $detalle = $containerDetalle.find('#mobile-info');
		var $btn = $containerDetalle.find('.hide-show-table');

		if($detalle.is(':visible'))
			$btn.trigger('click');
	}

	function limpiarForm($form){
		$form.find('input').val('');
		$form.find('select').val('');
		$form.find("input[type=checkbox], input[type=radio]").prop("checked", false);
		$form.find('span.fecha').html('');
		$form.find('.date-picker.fin').addClass('disabled');
		$form.find('.main-btn').prop('disabled',true);
		$form.find('.btn-limpiar-filtro, .btn-limpiar-busqueda').prop('disabled',true);
	}

	function limpiarFiltros(url){
		window.location.href = url;
	}

	function updateData($field){
		var disabled = true,
		count = 0;
		query = '';

		$.each( containerData, function( key , v ) {
			var $element = $container.find('.'+key);
			var value = ($element.hasClass('fecha') ? $element.html() : ( $element.is(':checkbox') && !$element.is(':checked') ? '' : $element.val()) );

			var min = containerData[key].min;

			if(value != '' && value.length>=min){
				containerData[key].value = value;
				disabled = false;
			}
			else
				containerData[key].value = '';

			query+= ( count == 0 ? '?' : '&' )+key+'='+containerData[key].value;
			count++;

		});

		$container.find('.main-btn').prop('disabled', disabled);
		$container.find('.btn-limpiar-busqueda, .btn-limpiar-filtro').prop('disabled', disabled);
	}

	return{
		inicializar : init,
		updateData : updateData
	};

})();

var confirmacionEnvioCorreo = function(){

	var formValidator = null;
	var sending = false;

	function setActions(){

		$('#enviar-a-mas').click(function(){
			$('.op-resend-id').addClass('send-emails');
		});

		$('#enviar-nuevo').click(function(){
			resetForm();
		});
	}

	function resetForm(){
		$('.enviar-set-info').find("input[type=text], input[type=email], input[type=password], select").val("");
		$('.op-resend-id').removeClass('email-sent');
		$('.enviar-set-info').find('button[type="submit"]').prop('disabled', true);

		if(formValidator)
			formValidator.resetForm();
	}
	/***VALIDAR FORM DE ENVIO DE CORREO***/

	function initForm(){
		setActions();
		validateForm();
	}

	function validateForm(){
		var $form = $('.enviar-set-info');

		disableSumbitButton($form, true);
		//checkRequiredElements('.enviar-set-info');

		formValidator = $form.validate({
			  rules: {
				email: {
				  required: true,
				  email : true
				  // multiEmails: true
				}
			  },
			  messages: {
				 email: {
					required: "Ingresa un correo electrónico.",
			   		email: "Ingresa un correo electrónico válido."
				   // multiEmails: "Ingresa correos electrónicos válidos."
				 }
			   },
			   errorPlacement: function(error, $element) {
			   	var $parent = $element.closest('.op-resend-form');
			   	$parent.append(error);

			  },
				submitHandler: function(form) {
					if(!sending)
						sendFormData(form);
				}
			});

		checkGeneralValidForm($form);

		function loadingIcon(form, show){
			var loading = '<div class="loading-block full-width"><div class="loading-wrapper"><div class="sk-circle"> <div class="sk-circle1 sk-child"></div> <div class="sk-circle2 sk-child"></div> <div class="sk-circle3 sk-child"></div> <div class="sk-circle4 sk-child"></div> <div class="sk-circle5 sk-child"></div> <div class="sk-circle6 sk-child"></div> <div class="sk-circle7 sk-child"></div> <div class="sk-circle8 sk-child"></div> <div class="sk-circle9 sk-child"></div> <div class="sk-circle10 sk-child"></div> <div class="sk-circle11 sk-child"></div> <div class="sk-circle12 sk-child"></div> </div></div></div>';

			if(show){
				$('.op-resend-id').append(loading);
			}
			else{
				$('.loading-block').remove();
			}
		}

		function sendFormData(form){
			sending = true;
			$(form).find('button[type="submit"]').prop('disabled', true);
			loadingIcon(form, true);

			var self = $(form).serialize();
			var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

			$.post(  urlPOST , self )
			.done(function( data ) {
			  	Services.autogestion.enviarCorreoConfirmacionCallSuccess(data, form);
			  	loadingIcon(form, false);
				sending = false;
				$(form).find('button[type="submit"]').prop('disabled', false);

			 })
			.fail(function( jqxhr, textStatus, error ) {
			  	//Mensaje de error del SISTEMA
			  	Services.autogestion.enviarCorreoConfirmacionCallFail(error, form);
			  	loadingIcon(form, false);
			  	sending = false;
			});

		}
	}



	return{
		inicializar : function(){
			if($('.enviar-set-info').length>0)
				initForm();
		}
	}

}();


function preventPaste(){
	$(".prevent-paste").bind('paste', function(event) {
		return false;
    });
}

function orderItemsQueryURL(){
	/**
		Ordenar elementos de listado de líneas
	**/
	$('.general-block.has-filters .order-by-query').on('click', 'button', function(e){
		var opciones = ( typeof $(this).data('opc') != 'undefined' ? $(this).data('opc') : null );
		var parent_id = $(this).closest('.has-filters').attr('id');

		if(opciones!=null){
			orderItemsQuery(opciones, parent_id);
		}


	});
}

function itemsByPagina(query){
	var url = window.location.href.split('?')[0];
	window.location.href = url+query;
}

function verPorPagina(){

	var $container = $('.ver-por-pagina-block');

	initActions();

	function initActions(){
		$container.on('change', '#ver-por', function(e){
			var val = $(this).val();
			itemsByPagina('?ver-por='+val);
		});
	}

}

function checkTelefonoLength($form){
	var $lada = $form.find('.lada'),
	$telefono = $form.find('.telefono'),
	$numero = $form.find('.numero');

	/**init**/
	if($lada.length>0 && $telefono.length>0){
		var iLada = $lada.val(),
		iLadaL = iLada.length;


		$lada.data('maxlength', iLadaL > 2 ? 3 : 2);
		$telefono.data('maxlength', iLadaL>2 ? 7 : 8);
	}
	/**init**/

	$lada.bind('keyup', function(e){
		var lada = $lada.val(),
		telefono = $telefono.val(),
		maxlength = (lada.length==3 ? 7 : 8);

		$telefono.data('maxlength', maxlength);
		$telefono.val(telefono.substring(0, maxlength));
		$numero.val(lada+telefono);
		if( typeof $numero.valid() != "undefined" )
			$numero.valid();

	});

	$telefono.bind('keyup', function(e){
		var lada = $lada.val(),
		telefono = $telefono.val(),
		maxlength = (telefono.length==8 ? 2 : 3);

		$lada.data('maxlength', maxlength);
		$lada.val(lada.substring(0, maxlength));
		$numero.val(lada+telefono);
		if( typeof $numero.valid() != "undefined" )
			$numero.valid();
	});

}

function initCheckFixedHeader($tofix){

	var $elemento = ( typeof $tofix.data('after') != 'undefined' ? $($tofix.data('after')) : null ),
	height = $tofix.outerHeight(),
	$aux = null,
	$generalfs = $('.general-fs-container');
	var $starte, $ende, start;

	addInvisibleElement($tofix);

	$tofix.bind('cssClassChanged', '.listado-select-all-block', function(){
		setTimeout(function(){updateInvisibleElement();}, 100);
	});

	$generalfs.bind('cssClassChanged', '', function(){
		setTimeout(function(){updateTopFixedElement();}, 100);
	});


	if($elemento!=null){
		checkFixedHeaderAfterGeneral($elemento, $tofix);
	}

	function updateTopFixedElement(){
		start = $starte.offset();
	}

	function addInvisibleElement($tofix){

		$( '<div class="header-fixed-auxiliar"></div>').insertAfter( $tofix );
		$aux = $tofix.next('.header-fixed-auxiliar');
		$aux.css('height',height);

	}

	function updateInvisibleElement(){
		if($tofix.hasClass('fixed')){
			var $extra = $tofix.find('.listado-select-all-block');
			if($extra.hasClass('active')){
				$aux.css('margin-bottom',$extra.outerHeight());
				height+=$extra.outerHeight();
			}
			else{
				$aux.css('margin-bottom',0);
				height-=$extra.outerHeight();
			}
		}
	}

	function checkFixedHeaderAfterGeneral($elemento, $tofix){
		$starte = $tofix,
		$ende = $elemento;
		start = $starte.offset();

		$(window).scroll(function(){
			$starte = $tofix;
			$ende = $elemento;

			var end = $ende.offset().top+$ende.outerHeight()-height;
			var beg = start.top+height-6;
		    // if ($(this).scrollTop() >= beg && $(this).scrollTop() < end && !$('body').hasClass('settings-open') )
		    if ((start.top+20 < $(this).scrollTop() && $(this).scrollTop() < end-$tofix.height()+20 ) && !$('body').hasClass('settings-open') )
		       	$tofix.addClass('fixed');
		    else if($tofix.hasClass('fixed')){
		    	if($(this).scrollTop() > start.top+20){
		       		$tofix.addClass('fade-out');
			       		setTimeout(function(){
			   			$tofix.removeClass('fixed fade-out');
			   		}, 200);
		    	}
		    	else{
		    		$tofix.removeClass('fixed fade-out');
		    	}


		   	}

		});
	}
}


function checkOnlyNumberElements(){
	var userAgent = navigator.userAgent,
	mobile = (/iPad|iPhone|iPod/.test(userAgent) || /android/i.test(userAgent) )&& !window.MSStream;

	if(mobile)
		checkMobile();
	else
		checkDesktop();


	$(".only-numbers").bind('input', function() {
		var $input = $(this);
		leaveOnlyNumbers($input);
		checkLength($input);
	});

	function leaveOnlyNumbers($input){
		var data = $input.val().replace(/\D/g,'');
	    $input.val(data);
	}

    function checkMobile(){
		$(document).on('change', '.only-numbers', function (event) {
			var value = this.value;
		    this.value = this.value.replace(/[^0-9]+/g, '');

		    if (this.value.length>0 && this.value < 1) this.value = 0;
		});

		// Block non-numeric chars.
		$(document).on('keypress', '.only-numbers', function (event) {
		    return (((event.which > 47) && (event.which < 58)) || (event.which == 13));
		});

		$(".only-numbers").keydown(function (e) {
		    // Allow: backspace, delete, tab, escape, enter and .
		    if ($.inArray(e.keyCode, [46, 8, 9, 27, 13]) !== -1 ||
		         // Allow: Ctrl+A
		        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true) ) ||
		         // Allow: Ctrl+C
		        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true) ) ||
		         // Allow: Ctrl+V
		        (e.keyCode == 86 && (e.ctrlKey === true || e.metaKey === true) ) ||
		         // Allow: Ctrl+X
		        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true) ) ||
		         // Allow: home, end, left, right
		        (e.keyCode >= 35 && e.keyCode <= 39)) {
		             // let it happen, don't do anything
		             return;
		    }

		});

    }

    function checkDesktop(){
		$(".only-numbers").keydown(function (e) {
		    // Allow: backspace, delete, tab, escape, enter and .
		    if ($.inArray(e.keyCode, [46, 8, 9, 27, 13]) !== -1 ||
		         // Allow: Ctrl+A
		        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true) ) ||
		         // Allow: Ctrl+C
		        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true) ) ||
		         // Allow: Ctrl+V
		        (e.keyCode == 86 && (e.ctrlKey === true || e.metaKey === true) ) ||
		         // Allow: Ctrl+X
		        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true) ) ||
		         // Allow: home, end, left, right
		        (e.keyCode >= 35 && e.keyCode <= 39)) {
		             // let it happen, don't do anything
		             return;
		    }

		    // Ensure that it is a number and stop the keypress
		    if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
		        e.preventDefault();
		    }
		});

		$(".only-numbers").bind('paste', function(event) {
			var data = event.originalEvent.clipboardData.getData('Text');

			var _this = this;
	        // Short pause to wait for paste to complete
	        setTimeout( function() {
	            data = data.replace(/\D/g,'');
	            $(_this).val(data);
	        }, 50);

	    });

    }

    function checkLength($input){
    	var fieldVal = $input.val(),
    	fieldLength = fieldVal.length,
    	maxlength = (typeof $input.data('maxlength') != "undefined" ? $input.data('maxlength') : 9999999999);


	    if(fieldLength <= maxlength){
	        return true;
	    }
	    else
	    {
	        fieldVal = fieldVal.substring(0, fieldLength - 1);
	        $input.val(fieldVal);
	    }
    }

}


function checkOnlyEmailElements(){
	var userAgent = navigator.userAgent,
	mobile = (/iPad|iPhone|iPod/.test(userAgent) || /android/i.test(userAgent) )&& !window.MSStream,
	multiple =/[A-Za-z0-9_@.,-]/g,
	single = /[A-Za-z0-9_@.-]/g,
	multipleN = /[^A-Za-z0-9_@.,-]/g,
	singleN = /[^A-Za-z0-9_@.-]/g;

	init();

    function init(){
    	var $inputs = $(".only-email, input[name='email']");

    	$inputs.each(function (index) {
    		var $input = $(this);
    		checkValidInputs($input);
		});
    }

    function checkValidInputs($input){
		var isMultiple = $input.hasClass('multiple'),
		emailRegex = (isMultiple ? multiple : single),
		emailRegexN = (isMultiple ? multipleN : singleN);

		if(mobile)
			checkMobile();
		else
			checkDesktop();


	$(".only-email, input[name='email']").bind('input', function() {
		var $input = $(this);
		leaveOnlyEmail($input);
	});

	function leaveOnlyEmail($input){
		var data = $input.val().replace(/[^A-Za-z0-9_@.-]/g,'');
	    $input.val(data);
	}

	function checkMobile(){
		$(document).on('change', ".only-email, input[name='email']", function (event) {
		    this.value = this.value.replace(/[^A-Za-z0-9_@.-]+/g, '');
		    if (this.value < 1) this.value = 0;
		});

		// Block non-numeric chars.
		// $(document).on('keypress', '.only-email, input[name='email']', function (event) {
		//     return (((event.which > 47) && (event.which < 58)) || (event.which == 13));
		// });

		$(".only-email, input[name='email']").keydown(function (e) {
		    // Allow: backspace, delete, tab, escape, enter and .
		    if ($.inArray(e.keyCode, [46, 8, 9, 27, 13]) !== -1 ||
		         // Allow: Ctrl+A
		        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true) ) ||
		         // Allow: Ctrl+C
		        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true) ) ||
		         // Allow: Ctrl+V
		        (e.keyCode == 86 && (e.ctrlKey === true || e.metaKey === true) ) ||
		         // Allow: Ctrl+X
		        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true) ) ||
		         // Allow: home, end, left, right
		        (e.keyCode >= 35 && e.keyCode <= 39)) {
		             // let it happen, don't do anything
		             return;
		    }
		});

    }

    function checkDesktop(){

    	$(".only-email, input[name='email']").on("keypress", function(e) {
		    var emailRegex = /[A-Za-z0-9_@.-]/g;

		    var key = String.fromCharCode(e.which);
		    if (e.keyCode == 8 ||  emailRegex.test(key))
		        return true;

		    return false;

		});

		$(".only-email, input[name='email']").on("keydown", function(e) {
			if(e.keyCode == 229)
		    	return false;

			if ($.inArray(e.keyCode, [46, 8, 9, 27, 13]) !== -1 ||
		         // Allow: Ctrl+A
		        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true) ) ||
		         // Allow: Ctrl+C
		        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true) ) ||
		         // Allow: Ctrl+V
		        (e.keyCode == 86 && (e.ctrlKey === true || e.metaKey === true) ) ||
		         // Allow: Ctrl+X
		        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true) ) ||
		         // Allow: home, end, left, right
		        (e.keyCode >= 35 && e.keyCode <= 39))
		        	return;

		});

		// $('.only-email, input[name='email']').on("paste",function(e)
		// {
		//     e.preventDefault();
		// });

    }


    }
}

function initCheckInputRegex(){

	$('.meet-regex').each(function (index) {
	  var $element = $(this);
	  var regex = $element.data('regex');

	  if(typeof regex != 'undefined'){
	  	regex = new RegExp(regex, "g");
	  	checkRegex($element, regex);
	  }
	});

	function checkRegex($element, regex){

		$element.bind('input', function(e) {
			var $input = $(this),
			value = $input.val();
			var classAcute = $input.hasClass('acute');
			var acute = value.substr(value.length - 1).localeCompare('´') ===0 ;
			var dieresis = value.substr(value.length - 1).localeCompare('¨') ===0 ;

			if(!acute && classAcute)
				leaveCharacters($input);
			else if(!classAcute)
				leaveCharacters($input);
		});

		function leaveCharacters($input){
			var data = $input.val().replace(regex,'');
		    $input.val(data);
		}

		// $element.on("paste",function(e)
		// {
		//     e.preventDefault();
		// });

	}

}

function checkOnlyAlphanumericElements(){

	$(".only-alphanumeric" ).keyup(function(){
	    var firstspace = $(this).val();

	    if ( firstspace.charAt( 0 ) === ' ' ){
			firstspace = firstspace.substring(1);
			$(this).val(firstspace);
	    }


	    return;
	});

	$(".only-alphanumeric").on("paste",function(e)
	{
	 	var value = $(this).val();

	 	if ( value.charAt( 0 ) === ' ' ){
	 		value = value.substring(1);
	 		$(this).val(value);
	 	}

	});
}

function initRefreshSite(){
	$('.refresh-site').click( function(e){
		location.reload();
	});
}

function initSendTo(){
	$('.send-to-url').on('click', function(e){
		var $button = $(this),
		url = (typeof $button.data('href') !='undefined' ? $button.data('href') : null );

		if(url!=null)
			window.location.href = url;
	});
}

function validateOneField(){
	var $container = $('.general-validator-one-field'),
	containerData = {};

	initFields();
	initActions();

	function initFields(){

		$container.find('.one-field').each(function (index, value) {
			var $field = $(this);
			var fieldOptions = ( typeof $field.data('field') != 'undefined' ? $field.data('field') : null );
			if(fieldOptions != null)
				initData(fieldOptions);
		});

	}

	function initData(fieldOptions){
		if(fieldOptions.name != 'undefined')
			containerData[fieldOptions.name] = { value : '', min : (fieldOptions.min != 'undefined' ? fieldOptions.min : 0 ) };
	}

	function initActions(){
		$container.on('change', '.one-field', function(e){
			var $field = $(this);
			updateButton();
		});

		$container.find('input.one-field').bind('input', function(e){
			var $field = $(this);
			updateButton();
		});
	}

	function updateButton(){
		var disabled = true;

		$.each( containerData, function( key , v ) {
			var $element = $container.find('.'+key);
			var value = ($element.hasClass('fecha') ? $element.html() : $element.val());

			if(value != '')
				disabled = false
		});

		$container.find('.main-btn').prop('disabled', disabled);

	}
}

function checkGeneralValidForm($form, extraCheck){

	var hasExtra = ( typeof extraCheck!= 'undefined' ? true : false);

	$form.find('input').on('keyup change input keydown', function () {
        validateForm();
    });

    $form.find('input[type="checkbox"], input[type="radio"], select').on('change', function () {
        validateForm();
    });

    function validateForm(){
    	var extraValidation = true;

    	if(hasExtra)
    		extraValidation = extraCheck();

    	if ($form.validate().checkForm() && extraValidation)
            $form.find('.first-submit, button[type="submit"]').prop('disabled', false);
        else
           $form.find('.first-submit, button[type="submit"]').prop('disabled', true);
    }

}

var currentHeight = $(window).height(),
currentWidth = $(window).width();
var currentOrientation = function() {

	currentWidth = $(window).width();
	currentHeight = $(window).height();
	// && initialWidth - currentWidth >20

	var keyboardMaxHeight = (currentHeight*100)/initialHeight;

	if(is_mobile() && currentHeight <=380 && ( (initialHeight > currentHeight && keyboardMaxHeight < 25) || (initialWidth != currentWidth && Math.abs(initialWidth - currentWidth) > 0))){
		$('body').addClass('landscape');
		if((document.activeElement != document.body))
			document.activeElement.blur();

		initialWidth = currentWidth;
		initialHeight = currentHeight;
	}
	else{
		$('body').removeClass('landscape');
	}

}

function initSendToGestion(){
	$('body').on('click', '.m-btn-close-admin-view', function(e){
		e.preventDefault();
		window.location.href = 'gestion-ejecutivos-1.html';
	});
}

function chatWindow(){

	$('body').on('click','.open-chat-window',function(e) {
		e.preventDefault();
		e.stopPropagation();

		var $parent = $(this),
		href = $parent.find('.open-chat').prop('href');

		window.open(href, 'Mi Telcel', 'left=20,top=20,width=675,height=460,toolbar=1,resizable=0');
	});
}

function goToTop(){
	$('body').on('click','.go-to-top',function(e) {
		e.preventDefault();
		$('html, body').animate({scrollTop : 0}, 800);
	});

	 $(window).scroll(function () {
	 	checkGoToTop();
	 });

	 function checkGoToTop(){
	 	var heightHalf = window.innerHeight/3;

		if ($(this).scrollTop() > heightHalf ) {
	        $('.go-to-top').addClass('visible');
	    } else {
	        $('.go-to-top').removeClass('visible');

	    }
	}
}

var accent_map = {á: "a", é: "e", í: "i", ó: "o", ú: "u"};
function accent_fold(t){if(!t)return"";for(var e="",i=0;i<t.length;i++)e+=accent_map[t.charAt(i)]||t.charAt(i);return e}

var jqueryAutocompleteRemote = function() {

	$('.js-autocomplete-remote').each(function () {
	    var inputAutocomplete = $(this);
	        //appendTo = $(this).data('append-to');

	    $.getJSON($(this).data('source'), function (data) {

	        $.widget("custom.catcomplete", $.ui.autocomplete, {
	            _create: function () {
	                this._super();
	                this.widget().menu("option", "items", "> :not(.ui-autocomplete-category)");
	                this.widget().addClass('autocomplete-search-menu')
	            },
	            _renderItem: function( ul, item ) {
	                return $( "<li>" ).append( $( "<a href='"+item.url+"'>" ).text( item.label ) ).appendTo( ul );
	            },
	            _renderMenu: function (ul, items) {
	                var that = this,
	                    currentCategory = "";

	                $.each(items, function (index, item) {
	                    var li;
	                    if (item.category != currentCategory) {
	                        ul.append("<li class='ui-autocomplete-category'>" + item.category + "</li>");
	                        currentCategory = item.category;
	                    }
	                    li = that._renderItemData(ul, item);
	                    if (item.category) {
	                        li.attr("aria-label", item.category + " : " + item.label);
	                    }
	                });
	            },

	        });

	        inputAutocomplete.catcomplete({
	            source: function (request, response) {
	                var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
	                response($.grep(data, function (value) {
	                    value = value.label || value.value || value;
	                    return matcher.test(value) || matcher.test(accent_fold(value));
	                }));
	            },
	            search: '',
	            open: function() {
			        $('.ui-autocomplete-category').next('.ui-menu-item').addClass('ui-first');
			    }
	        });

	    });

	});

};

/** es admin mode **/
function is_admin_mode(){

	if($('body').hasClass('admin-mode'))
		return true;

	return false;
}

/** ingreso por primera vez **/
function is_first_fime(){

	if($('body').hasClass('first-time'))
		return true;

	return false;
}

/**Acciones masivas en modal bloqueo masivo**/
function initAccionesMasivasModal(){

	var $body = $('body');
	var size = null;

	//obtenerHTML();
	checkMobileMasivo();

	$( window ).resize(function() {
		size = $( window ).width();
		$('#modal-bloquear-masivo .newsize').html(size);
  		checkMobileMasivo();
	});

	function obtenerHTML(){
		 $.get( '../../sections/header-footer/modal-masivo.html' , function( template_modal ) {
            $('#info-content').prepend(template_modal);
        });
	}

	function checkMobileMasivo(){
		if(is_mobile()){
			$body.addClass('acciones-masivas-bloqueadas');
	  	}
	  	else{
	  		$body.removeClass('acciones-masivas-bloqueadas');
	  	}
	}
}
var menuComponent = (function(){

	function initMenu(){
		setActions();
		//initSearchBlock();
	}

	function setPreventEnter(){
		$('.main-search-form').submit(function(e){
			e.preventDefault();
			return false;
		});
	}

	function setActions(){
		$('.full-content').on("click", '#m-greeting', function(e) {
			var $button = $(this),
			href = (typeof $button.data('href') != 'undefined' ? $button.data('href') : null);

			if(!$('#jam-icon').is(':visible'))
				e.stopPropagation();

			if(href!=null && !$('#jam-icon').is(':visible')){
				window.location.href = href;
			}
			else{

				$button.parent().siblings().removeClass('active');

				$button.parent().toggleClass('active');

				if($button.parent().hasClass('active'))
					$('body').addClass('settings-open');
				else
					$('body').removeClass('settings-open');
			}

		});


		$('.full-content').on("click", '#m-notificacion', function(e) {

			var $button = $(this);

				e.stopPropagation();

				$('.notify-block').siblings().removeClass('active');

				if($('.notify-block').hasClass('active')){
					$('.notify-block').removeClass('active');
					$('body').removeClass('settings-open');
				}
				else{
					$('.notify-block').addClass('active');
					$('body').addClass('settings-open');
				}

		});

		$('body').on("keyup", '#search-terms-menu-input',function(){
			var search_input = $(this).val();
			search_input = accent_fold(search_input.toLowerCase());

			var selector_terms = '#search-terms-menu';

			/* TO DO searchMenuTerms:
				- Solo permitir letras y espacios
				- Reemplazar caracteres especiales en caso que se filtren por espacio
				- Reemplazar acentos por las letras sin el ej. é -> e
			*/
			searchMenuTerms(search_input, selector_terms);

		});

		$('body').on("click", '.ui-search-toggle-element', function() {
			$('#ui-search-block').toggleClass('active');
			$('.black-layer').toggleClass('active');
			var buscador = { input: '#search-terms-menu-input', terms: '#search-terms-menu'}
			cleanTermsSearch(buscador);

			setPreventEnter();
		});


		$('body').on("click", '.greeting-block', function() {
			$(this).toggleClass('active');
			$('.greeting-block-m').toggleClass('active');
			$('.full-content').toggleClass('active-greeting');
	  	});

		$('body').on("click", '#jam-icon', function() {
			var $button = $(this);
			$('.main-links li.active').removeClass('active');
			$button.toggleClass('active');
			$('.main-block-m').toggleClass('active');
			$('.full-content').toggleClass('active-menu');
			$('#searchbox').val('');
	  	});

		$('body').on("click", '.ui-mobile-layer', function() {
			$('#jam-icon, #m-greeting .avatar-g').removeClass('active');
			$('.main-block-m, .greeting-block-m').removeClass('active');
			$('#searchbox').val('');
			$('.full-content').removeClass('active-menu').removeClass('active-greeting');
	  	});

	  	$('body').on("click", '.main-block-m .has-submenu', function() {

	  		var active = $(this).hasClass('active');
	  		$('.main-block-m .has-submenu').removeClass('active');
	  		$('.main-block-m .has-submenu').find('ul').slideUp('800');

	  		if(!active){
	  			$(this).find('ul').slideDown('800');
				$(this).addClass('active');
	  		}


		});


	  	$('.full-content').on("mouseover", '.main-links >li.has-submenu', function(e) {
	  		e.stopPropagation();
			$('.notify-block').removeClass('active');
			$('.greeting-block').removeClass('active');
			$('body').removeClass('settings-open');
	  	});


	}


	function updateNotificacionesCounter(n){
		var $counter = $('#m-notificacion .number-n');
		if($counter.length==0)
			$('#m-notificacion').append('<span class="number-n"></span>');

		$counter = $('#m-notificacion .number-n');

		$counter.html(n);
		$counter.addClass('active');
	}

	function removeNotificacionesCounter(){
		var $counter = $('#m-notificacion .number-n');

		if($counter.length>0){
			$counter.removeClass('active');
			setTimeout(function(){
				$counter.remove();
			}, 1000);
		}
	}

	function searchMenuTerms(search, selector_terms){
		var search_input = search.replace(',',' ')
			.replace('.',' ')
			.replace(';',' ')
			.split(' ');

		var $searchTerms = $(selector_terms + ' [data-tag]');

		$searchTerms.removeClass('active');

		for (var i = $searchTerms.length - 1; i >= 0; i--) {
			var $term = $($searchTerms[i]);
			var item_terms = $term.data('tag').split(' ');
			var found = false;

			for (var f = search_input.length - 1; f >= 0; f--) {
				for (var g = item_terms.length - 1; g >= 0; g--) {
					//console.log(item_terms[g], (search_input[f] == item_terms[g]))

					if (search_input[f].search(item_terms[g]) > -1)
						found= true;
				}
			}


			if (found)
				$term.addClass('active');

		}
	}

	function cleanTermsSearch(search){
		var $searchTerms = $(search.terms + ' [data-tag]');
		$(search.input).val('');
		$searchTerms.removeClass('active');
	}

	function initSearchBlock(){
		$('.main-search-form').each(function( index ) {
			var $form = $(this);
			searchBlock($form);
        });

		function searchBlock($form){

			var id = $form.data('id');
			disableSumbitButton($form, true);
			checkRequiredElements(id);

			formSubmit($form);

			function formSubmit($form){
				$form.submit(function( event ) {
					// AQUI IRÍA EL CALL
				  event.preventDefault();
				  var self = $form.serialize();
				  $.when( searchAPICall(self) )
						.done(function() {



						});
				});
			}

			function searchAPICall(data){
				// Aquí iría el servicio para el update
				return $('body').delay( 1000 );
			}
		}
	}


	return{
		fInitMenu : initMenu,
		updateNotificacionesCounter : updateNotificacionesCounter,
		removeNotificacionesCounter : removeNotificacionesCounter
	};

})();
var tokenFieldComponent = (function(){
	var total = 0,
	initialLimit = 0,
	initialGroups = false,
	isIMEI = false,
	isCitas = false,
	isCuentas = false,
	hasGroups = false;

	function getDataAutocomplete(term, groups, cuentas, isCitas, isIMEI){

		var queryresults = Services.general.getAutocompleteData(term, groups, cuentas, isCitas, isIMEI);
		var autocompleteData = [];

		$.each( queryresults, function( i, v ) {

			if(v.tipo == 'cuenta')
				v.html = '<span class="icon io-City"></span> <span><strong> ' + v.nombre + ' </strong>'+ v.cuenta +'</span>';
		 	else if(v.tipo=='group')
			    v.html = '<span class="icon i-users"></span> <span><strong> ' + v.nombre + ' <small>('+ v.total + ' ' +  ( v.total == 1 ? 'línea' : 'líneas' ) +')</small></strong></span>';
			else if(v.tipo =='imei')
				v.html = '<span class="icon io-celular"></span> <span><strong> ' + v.telefono + ' </strong> IMEI :'+ v.imei +' <span class="modelo">'+v.nombre+'</span></span>';
			else
				v.html = '<span class="icon i-user"></span> <span><strong> ' + v.nombre + ' </strong> '+ v.telefono + '</span>';

		 	autocompleteData.push(v);

		});

		return autocompleteData;

	}

	function initAllTokenField(){

		if($('.token-field-input').length>0)
			$('.token-field-input').each(function (index) {
				var $element = $(this);
			 	initTokenField($element);
			});
	}

	function setTokenFieldDisabled($element){
		$element.addClass('disable');
		$element.tokenfield('disabled');
	}

	function disabledInput($element){
		var elementid = $element.attr('id');
		if(elementid){
			var $e = $('#'+elementid+'-tokenfield');
			$e.prop('disabled', true);
			$e.prop('placeholder', '');
		}
	}

	function enableInput($element, placeholder){
		var elementid = $element.attr('id');
		if(elementid){
			var $e = $('#'+elementid+'-tokenfield');
			$e.prop('disabled', false);
			//$e.prop('placeholder', placeholder);
		}
	}

	function cleanObject(tokens) {

		var cleaned = [];

		$.each( tokens, function( key, token ) {
		  	if(typeof token.tipo != 'undefined')
		  	{
		  		cleaned.push({ tipo : token.tipo, id : token.id, value : token.value });
		  	}
		});

		return cleaned;

	}

	// filtrados es [12, 130, 44]
	function initTokenField($element){

		var options = $element.data('options');
		var maxTotal = 50;


		initialLimit = options.limit;
		initialGroups = (typeof options.groups != 'undefined' ? options.groups : false);
		isIMEI = (typeof options.isIMEI != 'undefined' ? options.isIMEI : false );
		isCitas = (typeof options.isCitas != 'undefined' ? options.isCitas : false );
		isCuentas = (typeof options.cuentas != 'undefined' ? options.cuentas : false );
		hasGroups = (typeof options.groups != 'undefined' ? options.groups : false );

		maxTotal = (initialLimit == 0 ? 50 : initialLimit);

		$element.tokenfield({
		  autocomplete: {
		    source: function( request, response ) {

		    	//Regreso la Data AQUI HARDCODEO PARA QUE ME REGRESE LA INFORMACION QUE NECESITO
		    	var data = { success: false, data: getDataAutocomplete(request.term, hasGroups, isCuentas , isCitas, isIMEI ) };

		    	//utils.general.autocomplete
		    	var existingTokens = $element.tokenfield('getTokens');


				var filtrados = cleanObject(existingTokens);
				response(data.data);

	        },
		    delay: 100,
		    minLength: 4,
		    classes : "autocomplete-numeros-grupos"
		    //ui-autocomplete ui-front ui-menu ui-widget ui-widget-content
		  },
		  showAutocompleteOnFocus: true,
		  delimiter : [',', ';'],
		  limit : options.limit,
		  createTokensOnBlur : true
		})
		.on('tokenfield:edittoken', function (e) {
			return false;
	  	})
	  	.on('tokenfield:createdtoken', function (e) {

			var data = e.attrs;

			$(e.relatedTarget).addClass('valid');

			if(typeof data.tipo == 'undefined'){

				if((isIMEI && data.value.length!=15)  || (isCuentas && (data.value.length>12)) || (!isIMEI && !isCuentas && !validatePhoneNumber(data.value))){
					$(e.relatedTarget).removeClass('valid');
					$(e.relatedTarget).addClass('invalid');
				}

				data.tipo = 'general';
			}
			else
			{
				if(data.tipo == 'single')
					e.attrs.value = data.telefono;

				$(e.relatedTarget).addClass(data.tipo);
			}


			if(typeof options.activate != undefined){
				activateElement($(options.activate), false);
			}

			if(typeof options.show != undefined){
				showElement($(options.show), true);
			}

			if($element.data('bs.tokenfield').options.limit==1 || ( total>0 && $element.data('bs.tokenfield').options.limit == total )){
				disabledInput($element);
			}


	  	})
	  	.on('tokenfield:createtoken', function (e) {

	  		var data = e.attrs;

			if(typeof data.tipo != 'undefined' && data.tipo == 'group'){
				temp = data.total;
				total+= data.total
			}
			else{
				temp = 1;
				total+= 1;
			}


			if(total>maxTotal){
				modalLimitarMasivo.openModal();
				$('#tokenfield-agregar-lineas-tokenfield').val('');
				total-=temp;
				return false;
			}

			$('.total-autocomplete .total').html(total);

			if(total>0){
				/**Esconder placeholder**/
				$('#tokenfield-agregar-lineas-tokenfield').prop('placeholder', '');
				//**Esconder placeholder fin**/
				$('.total-autocomplete').removeClass('hidden');
			}
			else{
				var nplaceholder = ( is_mobile() ? options.placeholderM : options.placeholder );
				/**Esconder placeholder**/
				$('#tokenfield-agregar-lineas-tokenfield').prop('placeholder', nplaceholder);
				//**Esconder placeholder fin**/
				$('.total-autocomplete').addClass('hidden');
			}

			ingresarLineasComponentTotal = total;

			validateAdminMode($element);

	  	})
	  	.on('tokenfield:removedtoken', function (e) {
			var data = e.attrs;


			if(typeof data.tipo != 'undefined' && data.tipo == 'group')
				total-= data.total
			else
				total-= 1;

			$('.total-autocomplete .total').html(total);
			if(total>0){
				/**Esconder placeholder**/
				$('#tokenfield-agregar-lineas-tokenfield').prop('placeholder', '');
				//**Esconder placeholder fin**/
				$('.total-autocomplete').removeClass('hidden');
				console.log('remove');

			}
			else{
				var nplaceholder = ( is_mobile() ? options.placeholderM : options.placeholder );
				/**Esconder placeholder**/
				$('#tokenfield-agregar-lineas-tokenfield').prop('placeholder', nplaceholder);
				//**Esconder placeholder fin**/
				$('.total-autocomplete').addClass('hidden');
			}

			validateAdminMode($element);

			var nplaceholder = ( is_mobile() ? options.placeholderM : options.placeholder );
			enableInput($element, nplaceholder);

			var existingTokens = $element.tokenfield('getTokens');

			if(typeof options.activate != undefined && existingTokens.length==0){
				activateElement($(options.activate), true);

				if(typeof options.inSteps != undefined){
					var $step = $element.closest(options.inSteps);
					var stepIndex = $( options.inSteps ).index( $step );
					hideSteps($(options.inSteps), stepIndex+1);
				}
			}


	  	})
	  	.data('bs.tokenfield')
		.$input
		.on('paste', function (e) {

			var $target = $(e.target);
			var $textArea = $('<textarea class="txtarea-aux-tokenfield"></textarea>');


			var text = null;
			if (window.clipboardData)
			  text = window.clipboardData.getData("Text");
			else if (e.originalEvent && e.originalEvent.clipboardData)
			  text = e.originalEvent.clipboardData.getData("Text");


			text = text.replace(/\r?\n/g, ',');

			$textArea.bind('blur', function (e) {
				$target.val(text);
				$textArea.remove();
			});


			$('body').append($textArea);
			$textArea.focus();

			setTimeout(function () {
				$target.focus();
				$target.blur();
				$target.focus();
			}, 10);
		});

	  	$('.ui-autocomplete').addClass('autocomplete-numeros-grupos');

	  	checkInputMobile();
	  	checkMobileLimit();

	  	var $body = $(this.ie6 ? document.body : document),
	  	windowWidth = $(window).width(),
	  	initialWidth = $(window).width();

	  	var rtime;
		var timeout = false;
		var delta = 200,
		mobileField = (is_mobile() ? true : false);


		function resizeend() {
		    if (new Date() - rtime < delta) {
		        setTimeout(resizeend, delta);
		    } else {
		        timeout = false;
		        windowWidth = $(window).width();

		        if( (initialWidth>767 && windowWidth<768) || (initialWidth<768 && windowWidth>767) ){
		        	checkMobileLimit();
		        }
		    }
		}

	  	$( window ).resize(function() {

	  		if( windowWidth != $(window).width() ){
				rtime = new Date();
				//windowWidth = $body.innerWidth();
			    if (timeout === false) {
			        timeout = true;
			        initialWidth = $(window).width();
			        setTimeout(resizeend, delta);
			    }

			    //Do something

			    windowWidth = $(window).width();

			    delete windowWidth;

			}

		});



	  	function validateAdminMode($element){
	  		if(is_admin_mode() && !is_mobile()){
	  			var $form = $element.closest('form'),
	  			valid = $form.validate().checkForm(),
	  			$motivo = $('input[name="motivoAutogestion"]:checked').val(),
	  			totalValid = (typeof  $motivo!= 'undefined' && $motivo == 'nuevo-chip-equipo' ? 0 : 1);

				if (valid && total>totalValid) {
		            $form.find('.first-submit, button[type="submit"]').prop('disabled', false);
		        } else {
		           $form.find('.first-submit, button[type="submit"]').prop('disabled', true);
		        }

			}
	  	}

		function checkInputMobile(){

			$('#tokenfield-agregar-lineas-tokenfield').bind('input', function(e) {
				if(is_mobile()){

					var $input = $(this),
					value = $input.val();

					if(isIMEI &&value.length==15 && /^\d+$/.test(value)){
						$input.val('');
						$element.tokenfield('createToken', value);
						if((document.activeElement != document.body))
							document.activeElement.blur()
					}
					else if(!isIMEI && !isCuentas && value.length==10 && /^\d+$/.test(value)){
						$input.val('');
						$element.tokenfield('createToken', value);

						if((document.activeElement != document.body))
							document.activeElement.blur()
					}
				}
			});
		}

	  	function checkMobileLimit(){
	  		total = 0;
		  	$element.tokenfield('setTokens', []);
		  	$('#tokenfield-agregar-lineas-tokenfield').val('');
			$('.total-autocomplete .total').html(total);

			var nplaceholder = ( is_mobile() ? options.placeholderM : options.placeholder );

	  		if(is_mobile()){

	  			modalLimitarMasivo.closeModal();
		  		$element.data('bs.tokenfield').options.limit = 1;
		  		options.groups = false;
		  		existingTokens = $element.tokenfield('getTokens');
		  		if(existingTokens.length==0)
		  			enableInput($element, nplaceholder);

		  	}
		  	else{
		  		$element.data('bs.tokenfield').options.limit = initialLimit;
		  		options.groups = initialGroups;
		  		enableInput($element, nplaceholder);
		  	}

		  	$('#tokenfield-agregar-lineas-tokenfield').prop('placeholder', nplaceholder);

		  	if($('.btn-lineas-autocomplete').length>0)
		  		$('.btn-lineas-autocomplete').trigger('click');
		  	else
		  		showElement($(options.show), false);


	  	}

	  	function validatePhoneNumber(value){

	  		if(value.length!=10 || !/^[0-9]+$/.test(value))
	  			return false;

	  		return true;
	  	}

	  	function hideSteps($steps, start){

	  		for( var i=start; i < $steps.length ; i++ ){
	  			var $step = $steps.eq(i);

	  			$step.hide();
	  			$step.find('input[type="checkbox"]').prop('checked', false);
	  			$step.find('input[type="radio"]').prop('checked', false);
	  			$step.find('button[type="submit"]').prop('disabled', true);
	  		}

	  	}
	  	function activateElement($activate, value){
	  		$activate.prop('disabled', value);
	  	}

	  	function showElement($show, value){
	  		if(value)
	  			$show.show();
	  		else
	  			$show.hide();
	  	}


		 $.ui.autocomplete.prototype._renderItem = function (ul, item) {
	        var t = String(item.html).replace(
	                new RegExp(this.term, "gi"),
	                "<span class='ui-state-highlight-tokenfield'>$&</span>"),
	        container = ul;

	        if($element.attr('id') == 'tokenfield-agregar-lineas'){
	        	container = $($element.closest('.tokenfield-block'));
	        	container.append(ul);
	        	container = container.find('ul');
	        }


	        return $("<li></li>")
	            .data("item.autocomplete", item)
	            .append("<a>" + t + "</a>")
	            .appendTo(container);
	            //.appendTo(ul);
	    };

	    $.ui.autocomplete.prototype._resizeMenu = function( ) {
		    var outerwidth = $element.parent().closest('.tokenfield').outerWidth();
		    this.menu.element.width( outerwidth );
	    };
	}

	return{
		inicializar : function(){
			initAllTokenField();
		},
		resetTotal : function(){
			total = 0;
		},
		getTotal : function(){
			return total;
		}
	};

})();

/* Para agregar el footer y header dinamicamente */
var pushHeaderFooter = (function(){
    return{
        inicializar: function(){

            var $body = $('html body'),
            $fullContent = $body.find('.full-content'),
            isloggedin = !$body.hasClass('no-user-logged-in'),
            isEjecutivos = $body.hasClass('header-ejecutivos'),
            isAdmin = $body.hasClass('admin-mode'),
						isSeleccionEmpresa = $body.hasClass('seleccion-empresa'),
            template_header_url = (isAdmin ? '../../sections/header-footer/header-admin.html' : isEjecutivos ? '../../sections/header-footer/header-ejecutivos.html' : isSeleccionEmpresa ? '../../sections/header-footer/header-seleccion-empresa.html' : (!isloggedin ? '../../sections/header-footer/header-invitado.html' : '../../sections/header-footer/header.html')),
            template_footer_url = (isloggedin ? ( isEjecutivos ? '../../sections/header-footer/footer-ejecutivos.html' : '../../sections/header-footer/footer.html') : '../../sections/header-footer/footer-log-out.html'),
            template_footer_cta_url = (isloggedin ? '../../sections/header-footer/footer-cta.html' : '../../sections/header-footer/footer-cta-log-out.html'),
            template_header_m_url = (isAdmin ? '../../sections/header-footer/header-m-admin.html' : isEjecutivos ? '../../sections/header-footer/header-m-ejecutivo.html' : (!isloggedin ? '../../sections/header-footer/header-m-invitado.html' : '../../sections/header-footer/header-m.html')),
            template_modal_error = '../../sections/header-footer/modal-masivo-error.html',
            template_modal_landscape = '../../sections/header-footer/modal-landscape.html';

            if ($body.hasClass('MTE')){

                if( !$body.hasClass('no_heading') && !$body.hasClass('no_heading-footer')){


                    $.get( template_header_url , function( template_header ) {
                        $fullContent.prepend(template_header);
                        //Header degradado
                        if($body.hasClass('header-con-degradado'))
                            $('header.container-fluid').addClass('navigation-main-tab');

                        checkMainHeaderFixed();

                        if($body.hasClass('no-header-ticket-fast'))
                            $('header .main-links').remove();
                    });

                    $.get( template_header_m_url , function( template_header_m ) {
                      $( template_header_m ).insertBefore( $fullContent );
                      jqueryAutocompleteRemote();
                    });


                }

                if(!$body.hasClass('no_heading-footer')){
                    $.get( template_footer_url , function( template_footer ) {
                      $fullContent.append(template_footer);
                    });

                    $.get( template_footer_cta_url , function( template_footer_cta ) {
                      $fullContent.find('#info-content').append(template_footer_cta);

                        if($body.hasClass('no_heading')){
                            $('#info-content .last-section-cnt .get-ticket-fast').remove();
                            $('#info-content .get-fast-ticket').parent('section').remove();
                        }

                        if($body.hasClass('no_footer_cta')){
                            $('#info-content .get-fast-ticket').parent('section').remove();
                            $('#info-content .last-section-cnt').remove();
                        }

                        if($body.hasClass('no-header-ticket-fast')){
                            $('#info-content .get-fast-ticket .block-gft').remove();
                        }

                    });

                }

                $.get( template_modal_error , function( template_error ) {
                    $fullContent.prepend(template_error);
                    //Header degradado
                    var hash = window.location.hash;
                    if(hash=='#alerta-general-conexion')
                        $('#modal-error-general').addClass('active');
                });

                $.get( template_modal_landscape , function( template_landscape ) {
                    $fullContent.prepend(template_landscape);
                });


                function checkMainHeaderFixed(){
                    var $header = $('#main-header');

                    addInvisibleElement($header);
                    $(window).scroll(function() {
                        var scroll = $(window).scrollTop();

                        if (scroll >= 15) {
                            $header.addClass('fixed-header');
                        } else {
                            $header.removeClass('fixed-header');
                        }
                    });
                }

                function addInvisibleElement($tofix){
                    $( '<div class="main-header-fixed-auxiliar"></div>').insertAfter( $tofix );
                }
            }
        }
    }

})();


document.addEventListener("DOMContentLoaded", function(event) {

    // Para poner en el clipboard el valor de un input
    new Clipboard('.c-and-p');
    $(".c-and-p").on('click', function(){
        var $cp = $(this);
        $cp.addClass("ready-on-cb");

        setTimeout(function(){
            $cp.fadeOut(500);
        },2000);
    })

    // Define el dia de hoy para los calendarios
    var defineToday = moment().format('YYYY-MM-DD')

    // Define 5 dias proximos para el calendario
    ,defineinFiveDays = moment().transform('YYYY-MM-+05').format('YYYY-MM-DD');

    // Para inicializar en .calendarBox agregados dinámicamente
    $(document).on('focus',".calendarBox.dynamic", function(){
        $(this).daterangepicker(
            {
                locale: {
                  format: 'YYYY-MM-DD'
                },
                "startDate": defineToday,
                "endDate": defineinFiveDays,
                "minDate": defineToday,
                "buttonClasses": "bton",
                "applyClass": "orange",
                "cancelClass": "",
                "opens": "center"

            }
        );
    });
});

$(document).ready(function(){
    $(this).scrollTop(0);

    function init(){


        // Set orientation on initiliasation
        currentOrientation();
        // Reset orientation each time window is resized. Keyboard opening, or change in orientation triggers this.
        $(window).on("resize", currentOrientation);

        initmodalLimitarMasivo();

        var $tofixAfter = $('.to-fixed-block.after-general');
        if($tofixAfter.length>0)
            initCheckFixedHeader($tofixAfter);

        if($('.ver-por-pagina-block').length>0)
            verPorPagina();

        if($('.general-block.has-filters .order-by-query').length>0)
            orderItemsQueryURL();


        initRefreshSite();
        initSendTo();
        //preventPaste();
        validateOneField();
        initSendToGestion();
        goToTop();
        chatWindow();


        generalContainerFS.inicializar();

        /**fin Acciones masivas en modal bloqueo masivo**/
        if($('.bloquear-acciones-masivas').length>0)
            initAccionesMasivasModal();

        if($('#modal-error-mantenimiento').length>0)
            initModalErrorMantenimiento();

        if(typeof searchFaq!= 'undefined')
            searchFaq.inicializar();

        if(typeof pushHeaderFooter!= 'undefined')
            pushHeaderFooter.inicializar();

        if(typeof questionFaq!= 'undefined')
            questionFaq.inicializar();

        if(typeof menuComponent !='undefined')
            menuComponent.fInitMenu();

        if(typeof tokenFieldComponent !='undefined')
            tokenFieldComponent.inicializar();

        /*Inicio componente Login*/
        if(typeof loginTemplate !='undefined')
            loginTemplate.inicializar();

        if(typeof miCuenta !='undefined')
            miCuenta.inicializar();

        if(typeof activacionCuenta !='undefined')
            activacionCuenta.inicializar();

        if(typeof estableceContrasena !='undefined')
            estableceContrasena.inicializar();
        /*Fin componente Login*/

        /*Inicio componente gestión de grupos*/
        if(typeof gestionGrupos !='undefined')
            gestionGrupos.inicializar();
        /*Fin componente gestión de grupos*/

        if(typeof homeAdminComponent!='undefined' && $('#gestionar-favoritos').length>0)
            homeAdminComponent.fInitComponent();

        if(typeof chartsTelcel !='undefined')
            chartsTelcel.inicializar();

        if(typeof swipersMTelcel !='undefined')
            swipersMTelcel.inicializar();

        if(typeof sliderCreate != 'undefined')
            sliderCreate.inicializar();

        /** componente enviar correo confirmación**/
        if(typeof confirmacionEnvioCorreo !='undefined')
            confirmacionEnvioCorreo.inicializar();
        /** fin componente enviar correo confirmación**/

        /**Inicio componente autogestion general**/
        if(typeof autogestionTelcel !='undefined')
            autogestionTelcel.inicializar();
        /** Fin componente autogestion general**/

        /**Inicio componente notificaciones**/
        if(typeof notificaciones !='undefined')
            notificaciones.inicializar();
        /**Fin componente notificaciones**/

        /**Componente gestión de ejecutivos**/
        if(typeof gestionEjecutivos !='undefined' && $('.gestion-ejecutivos-block').length>0)
            gestionEjecutivos.inicializar();
        /**Fin Componente gestión de ejecutivos**/

        /**Componente gestión de ejecutivos**/
        if(typeof historialMovimientos !='undefined' && $('.historial-movimientos-block').length>0)
            historialMovimientos.inicializar();
        /**Fin Componente gestión de ejecutivos**/

        /**Componente sertec**/
        if(typeof sertec !='undefined' && $('.sertec-block').length>0)
            sertec.inicializar();
        /**Fin Componente sertec**/

        /**Componente home**/
        if(typeof home !='undefined')
            home.inicializar();
        /**Fin Componente home**/

        /**Componente citas**/
        if(typeof misCitas !='undefined')
            misCitas.inicializar();
        if(typeof CACcomponent !='undefined')
            CACcomponent.inicializar();
        /**Fin Componente citas**/

        /**Componente adendum**/
        if(typeof adendum !='undefined' && $('.adendum-block').length>0)
            adendum.inicializar();
        /**Fin Componente adendum**/

        /**Componente Carga masiva**/
        if(typeof cargaMasivaGrupos !='undefined' && $('.carga-masiva-block').length>0)
            cargaMasivaGrupos.inicializar();
        /**Fin Componente Carga masiva**/

        /**Header Radio opciones**/
        if($('.options-header-block .element-option').length>0)
            initHeaderOptions();
        /**Fin Header Radio opciones**/


        checkOnlyNumberElements();
        checkOnlyEmailElements();


        if (is_desktop()) {
            checkOnlyAlphanumericElements();
        }


        terminosActions();
        initActionsTerminosGenerales();

        cerrarConfiguracionAfuera();

        if(typeof ingresarLineasComponent !='undefined')
            ingresarLineasComponent.inicializar();


        if(typeof FAQComponente !='undefined' && $('.faq-main').length>0)
            FAQComponente.inicializar();

        if(typeof facturacionTelcel !='undefined' && $('.facturacion-block').length>0 || $('.autogestion-facturacion-block').length>0)
            facturacionTelcel.inicializar();


        initCheckInputRegex();

    }


    var hash = window.location.hash;
    // EJEMPLO PANTALLA MOSTRAR CHIP
    if($('.notificacion-chip-container').length>0){

        if(hash=='#notificacionChip')
            $('.notificacion-chip-container').show();
    }

    //EJEMPLO MOSTRAR EXITO
    if($('.success-tooltip').length>0){

        if(hash=='#exito')
            $('.success-tooltip').removeClass('hidden');

        if(hash=='#cambioPass'){
            $('.success-tooltip p').html('Tu contraseña ha sido cambiada con éxito.');
            $('.success-tooltip').removeClass('hidden');
        }


    }

    /** En éxito login **/
    if(hash=='#exitoLogin'){
        var $infoContent = $('body #info-content');
        var htmlExitoLogin = '<div id="login-exito-msg" class="fixed"> <div class="container"> <div class="row"> <div class="col-sm-12 col-xs-12 center-block flexbox v-align-center main-block system-general-msg-fs"> <div class="success-tooltip back-green vertical-align col-sm-7 col-xs-12 system-msg"> <div class="center-element"> <span class="icon io-TickNeg"></span> <p>​Bienvenido a Mi Telcel Empresas. Tu cuenta ha sido activada con éxito.</p> </div> <span class="close-msg"> <span class="icon io-Close"></span> </span> </div> </div> </div> </div> </div>';

        $infoContent.prepend(htmlExitoLogin);

        $infoContent.find('.close-msg').on('click', function(e){
            e.stopPropagation();
            $('#login-exito-msg').remove();
        });

        $infoContent.find('.system-general-msg-fs').on('click', function(e){
            e.stopPropagation();
            $('#login-exito-msg').remove();
        });

        $infoContent.find('.system-msg').on('click', function(e){
            e.stopPropagation();
        });
    }
    /** Fin éxito login **/

    /** En aviso **/
    if(hash=='#avisoErrorGeneral'){
        generalErrorButtonAction(true);
    }
    /** Fin aviso **/

    //EJEMPLO MOSTRAR ERROR
    if($('.error-tooltip').length>0){

        if(hash=='#error')
            $('.error-tooltip').removeClass('hidden');
    }

    //MOSTRAR ERROR DE PASSWORD
    if($('#pass-incorrecto').length>0){

        if(hash=='#passIncorrecto'){
            $('#pass-incorrecto').removeClass('hidden');
            $('#pass-usuario').addClass('error');
        }
    }

        //MOSTRAR ERROR DE PASSWORD
    if($('#pass-igual').length>0){
        if(hash=='#passIgual'){
            $('#pass-igual').removeClass('hidden');
            $('#nuevo-pass-usuario').addClass('error');
            $('#nuevo-pass-usuario-r').addClass('error');
        }
    }


    init();

});
var w = 0;

$( window ).load( function(){

   w = $( window ).width();

});

(function ($, undefined) {
    "use strict";
    $.jstree.plugins.noclose = function () {
        this.close_node = $.noop;
    };
})(jQuery);


(function ($) {
	  $.each(['show', 'hide'], function (i, ev) {
	    var el = $.fn[ev];
	    $.fn[ev] = function () {
	      this.trigger(ev);
	      return el.apply(this, arguments);
	    };
	  });
	})(jQuery);

// MÉTODOS JQUERY VALIDATOR

// Validar formato de email
$.validator.methods.email = function( value, element ) {
    //console.log(/[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9]+\.[a-z]+/.test( value ));
    // /[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9]+\.[a-z]+(?:\.[a-zA-Z0-9-]+)*$/
    return this.optional( element ) || /^[a-zA-Z0-9.!#$%&’*+\/=?^_`{|}~-]+@[a-zA-Z0-9-]+\.[a-z]+(?:\.[a-zA-Z0-9-]+)*$/.test( value.toLowerCase() );
};

$.validator.addMethod( "basicName", function( value, element ) {
	return this.optional( element ) || /^[A-Za-zá-úÁ-Úä-üÄ-Ü0-9\'ñ\s]+$/i.test( value );
}, "Ingresa un nombre válido." );

$.validator.addMethod( "grupoNombre", function( value, element ) {
	return this.optional( element ) || /^[A-Za-zÑñ]*[A-Za-zNñ-\s]*[A-Za-zNñ]$/i.test( value );
}, "Ingresa un nombre válido, no puede contener caracteres especiales ni números, no debe terminar ni comenzar con un espacio." );

$.validator.addMethod( "sinEspacioInicioFin", function( value, element ) {
	return this.optional( element ) || value.length == value.toString().trim().length;
}, "Ingresa un nombre válido, no debe terminar ni comenzar con un espacio." );

$.validator.addMethod('filesize', function (value, element, param) {
    return this.optional(element) || (element.files[0].size <= param)
}, 'El tamaño del archivo debe ser menor a {0}');

$.validator.addMethod("exactlength", function(value, element, param) {
 return this.optional(element) || value.length == param;
}, 'Longitud debe ser de {0}');

$.validator.addMethod("notEqual", function(value, element, param) {
  return this.optional(element) || value != $(param).val();
}, "Ingresa un valor diferente");

$.validator.addMethod(
    "multiEmails",
     function(value, element) {
         if (this.optional(element))
             return true;
         var emails = value.split(/[;,]+/);
         valid = true;
         for (var i in emails) {
             value = emails[i];
             valid = valid &&
                     $.validator.methods.email.call(this, $.trim(value), element);
         }
         return valid;
     },

   $.validator.messages.multiEmails
);

function setSteps($steps){
	this.steps = $steps;
	this.initSteps();

}

setSteps.prototype.initSteps = function(){
	this.hideAllSteps();

	// Mostrar el primer
	this.showStep(0, false);
	// setActions();
}

setSteps.prototype.hideAllSteps= function(){
	this.steps.hide();
}

setSteps.prototype.hideStep= function(i){
	this.steps.eq(i).hide();
}

setSteps.prototype.showStep= function(i, scroll){
	scroll = (typeof scroll != 'undefined' ? scroll : true);
	this.steps.eq(i).show();
	if(scroll)
		scrollToElement(this.steps.eq(i));

}

setSteps.prototype.justShowStep = function(i){
	this.steps.eq(i).show();
}

if (!Array.prototype.filter) {
  Array.prototype.filter = function(fun /*, thisp*/) {
    var len = this.length >>> 0;
    if (typeof fun != "function")
    throw new TypeError();

    var res = [];
    var thisp = arguments[1];
    for (var i = 0; i < len; i++) {
      if (i in this) {
        var val = this[i]; // in case fun mutates this
        if (fun.call(thisp, val, i, this))
        res.push(val);
      }
    }
    return res;
  };
}

function PaginacionTelcel(items, options){
	this.items = items;
	this.itemsPerPage = options.itemsPerPage;
	this.currentPage = 1;
	this.paginationControlsContainer = options.paginationControlsContainer;

	if(typeof options != undefined){

		if(typeof options.onInit != undefined){
			this.initAction  = options.onInit;
			this.init();
		}

		if(typeof options.onReset != undefined){
			this.resetAction = options.onReset;
		}

		if(typeof options.onPageClick!= undefined){
			this.pageClickAction = options.onPageClick;
			this.pageClick();
		}
	}

	this.renderControls();

}

PaginacionTelcel.prototype.pageClick = function(){
	var self = this;
	if(typeof self.pageClickAction != undefined){

		$(self.paginationControlsContainer).on('click','.page-li .page', function(e){
			e.preventDefault();
			e.stopPropagation();
			self.currentPage = $(this).data('page');
			var itemsP = self.showPage(self.currentPage);
	      	self.pageClickAction(itemsP);
	  	});
   }
}

PaginacionTelcel.prototype.init = function(){
	var self = this;
	if(typeof self.initAction != undefined){
 		self.currentPage = 1;
		var itemsP = self.showPage(self.currentPage);
	    self.initAction(itemsP);
	}
}


PaginacionTelcel.prototype.reset = function(){
	var self = this;
	this.currentPage = 1;
	var itemsP = self.showPage(this.currentPage);
	// this.resetAction(itemsP);
	if(typeof self.resetAction != undefined)
		self.resetAction(itemsP);

}

PaginacionTelcel.prototype.getNumberPages = function(){

	var numPages = 0;

	if(this.itemsPerPage == 0)
		numPages = 1;
	else if (this.items != null && this.itemsPerPage != null)
        numPages = Math.ceil(this.items.length / this.itemsPerPage);

    return numPages;

}

PaginacionTelcel.prototype.showPage = function(page) {

    this.currentPage = page;

    if(this.itemsPerPage == 0){
    	var currentItems = this.items;
    }
    else{

    	var currentItems = this.items.slice((page-1) * this.itemsPerPage,
        ((page-1)*this.itemsPerPage) + this.itemsPerPage);
    }

    this.renderControls();

    return currentItems;
}

PaginacionTelcel.prototype.updateItemsPerPage = function(itemsPerPage){
	this.itemsPerPage = itemsPerPage;
}

PaginacionTelcel.prototype.updateItems = function(items){
	this.items = items;
}

PaginacionTelcel.prototype.getCurrentPage = function(){
	return this.currentPage;
}

PaginacionTelcel.prototype.renderControls = function() {
    var paginationControls = '<ul>';
    var numberPages = this.getNumberPages();
    var maxNumberPages = numberPages-2;
    var minNumberPages = 2;

    if(this.currentPage>1)
    	paginationControls += '<li class="page-li page-'+(this.currentPage-1)+'"><span class="page icon io-AccordionLeft" data-page="'+(this.currentPage-1)+'"></span></li>';


    if(numberPages >5 && this.currentPage>minNumberPages && this.currentPage <= maxNumberPages){
    	// PINTAR LOS 2 PRIMEROS
    	for (var i = this.currentPage-2; i < this.currentPage; i++) {
	        paginationControls += '<li class="page-li page-'+i+'"><span class="page" data-page="'+i+'">' + i + '</span></li>';
	    }

	    //Actual
	    paginationControls += '<li class="page-li page-'+this.currentPage+' active"><span class="page" data-page="'+this.currentPage+'">' + this.currentPage + '</span></li>';

	    // PINTAR LOS 2 PRIMEROS
    	for (var i = this.currentPage+1; i <= this.currentPage+2; i++) {
	        paginationControls += '<li class="page-li page-'+i+'"><span class="page" data-page="'+i+'">' + i + '</span></li>';
	    }

    }
    else{
    	var ifrom = 1;
    	var ito = (numberPages >5 ? minNumberPages +3 : numberPages);

    	if(numberPages >5 && this.currentPage>maxNumberPages)
    	{
    		ifrom = maxNumberPages-2;
    		ito = numberPages;
    	}

	    for (var i = ifrom; i <= ito; i++) {
	        paginationControls += '<li class="page-li page-'+i+' '+(i==this.currentPage ? 'active' : '') +'"><span class="page" data-page="'+i+'">' + i + '</span></li>';
	    }

	}

	if(this.currentPage<numberPages)
    	paginationControls += '<li class="page-li page-'+(this.currentPage+1)+'"><span class="page icon io-AccordionRight" data-page="'+(this.currentPage+1)+'"></span></li>';

    paginationControls += '</ul>';

    $(this.paginationControlsContainer).html(paginationControls);
}



function orderItemsHTML(opc, $main, $children, data){

	data = (typeof data != 'undefined' ? data : 'item');

	$children.detach().sort(function(a, b){
		var aData = $(a).data(data);
		var bData = $(b).data(data);

		if(opc.type == 'int')
			return Number(aData[opc.key]) > Number(bData[opc.key]) ? 1 : -1;
		else
			return aData[opc.key] > bData[opc.key] ? 1 : -1;

	});

	if(opc.orderby == 'desc')
		$main.append($children.get().reverse());
	else
		$main.append($children);

}

function scrollToElement(element){

	function timeAnimation(element_distance){
		var distance = element_distance - window.pageYOffset;
		var max_time_animation = 500;
		var min_distance_for_max_time = 400;

		var time = Math.floor((distance*max_time_animation)/min_distance_for_max_time);

		return (time <= max_time_animation) ? time : max_time_animation;
	}

	if(element.length>0){
		var headerHeight = $('#main-header').height();
		var element_distance = element.offset().top-headerHeight;

		//Realizamos el posicionamiento del scroll
		$('html, body').animate({
			scrollTop: element_distance
		}, timeAnimation(element_distance));
	}

}

function shuffle(a, all) {
    var j, x, i;
    for (i = a.length; i; i--) {
        j = Math.floor(Math.random() * i);
        x = a[i - 1];
        a[i - 1] = a[j];
        a[j] = x;
    }

    var total = Math.floor(Math.random() * 6) + 1;

    if(!all)
    	a = a.slice(0, total);

    return  a;
}

function generalLoadingIcon(container, show){
	var loading = '<div class="loading-block full-width"><div class="loading-wrapper"><div class="sk-circle"> <div class="sk-circle1 sk-child"></div> <div class="sk-circle2 sk-child"></div> <div class="sk-circle3 sk-child"></div> <div class="sk-circle4 sk-child"></div> <div class="sk-circle5 sk-child"></div> <div class="sk-circle6 sk-child"></div> <div class="sk-circle7 sk-child"></div> <div class="sk-circle8 sk-child"></div> <div class="sk-circle9 sk-child"></div> <div class="sk-circle10 sk-child"></div> <div class="sk-circle11 sk-child"></div> <div class="sk-circle12 sk-child"></div> </div></div></div>';

	if(show){
		$(container).addClass('has-loading');
		$(container).append(loading);
	}
	else{
		$(container).removeClass('has-loading');
		$(container).find('.loading-block').remove();
	}
}

function generalFullLoadingIcon(container, show){
	var loading = '<div class="loading-block full-width full-body"><div class="loading-wrapper"><div class="sk-circle"> <div class="sk-circle1 sk-child"></div> <div class="sk-circle2 sk-child"></div> <div class="sk-circle3 sk-child"></div> <div class="sk-circle4 sk-child"></div> <div class="sk-circle5 sk-child"></div> <div class="sk-circle6 sk-child"></div> <div class="sk-circle7 sk-child"></div> <div class="sk-circle8 sk-child"></div> <div class="sk-circle9 sk-child"></div> <div class="sk-circle10 sk-child"></div> <div class="sk-circle11 sk-child"></div> <div class="sk-circle12 sk-child"></div> </div></div></div>';

	if(show){
		$(container).append(loading);
	}
	else{
		$(container).find('.loading-block').remove();
	}
}

function generalErrorButtonAction(show){
	var $infoContent = $('body #info-content');
	var htmlAvisoServicio = '<div id="aviso-serv-msg" class="fixed"> <div class="container"> <div class="row"> <div class="col-sm-12 col-xs-12 center-block flexbox v-align-center main-block system-general-msg-fs"> <div class="success-tooltip back-pink vertical-align col-sm-7 col-xs-12 system-msg"> <div class="center-element"> <span class="icon io-Alert2"></span> <p>Por el momento el servicio solicitado no está disponible. Por favor, intenta más tarde.</p> </div> <span class="close-msg"> <span class="icon io-Close"></span> </span> </div> </div> </div> </div> </div>';

	if(show){
		$infoContent.prepend( htmlAvisoServicio );

		$infoContent.find('.close-msg').on('click', function(e){
			e.stopPropagation();
			generalErrorButtonAction(false);
		});

		$infoContent.find('.system-general-msg-fs').on('click', function(e){
			e.stopPropagation();
			generalErrorButtonAction(false);
		});

		$infoContent.find('.system-msg').on('click', function(e){
			e.stopPropagation();
			generalErrorButtonAction(false);
		});

	}else{
		$('#aviso-serv-msg').remove();
	}
}


function disableSumbitButton($form, flag){
	$form.find('button[type="submit"]').prop( "disabled", flag );
}

function checkRequiredElements(form){
	var empty = true;

	$(form+' '+ '.required').each(function (index) {
	  var $element = $(this);

	  validateNotEmpty($element);
	});


	function validateNotEmpty($element){

		$(document).on( 'input', $element , function(){
			empty = false;
			$(form+' '+ '.required').each(function (index) {

				var $e = $(this);

				if($e.is(':checkbox')){
					if (!$e.is(':checked')) {
						empty = true;
					}
				}
				else{
					var ivalue = $e.val();
					var requiredOpc = $e.data('required');
					var length = ( typeof requiredOpc!= 'undefined' && requiredOpc.minLength ? Number(requiredOpc.minLength) : 1  )

					if (ivalue.length<length) {
						empty = true;
					}
				}

			});

			disableSumbitButton($(form), empty);

		});


		$(document).on( 'change', $element , function(){
			empty = false;
			$(form+' '+ '.required').each(function (index) {

				var $e = $(this);

				if($e.is(':checkbox')){
					if (!$e.is(':checked')) {
						empty = true;
					}
				}
				else{
					var ivalue = $e.val();
					var requiredOpc = $e.data('required');
					var length = ( typeof requiredOpc!= 'undefined' && requiredOpc.minLength ? Number(requiredOpc.minLength) : 1  )

					if (ivalue.length<length) {
						empty = true;
					}
				}

			});

			disableSumbitButton($(form), empty);

		});

	}
}

function checkRequiredElementsOptional(form){
	// $("input[id*=Hours]").rules("add", "required");
	var validRequired = false;

	$(form+' '+ '.required-optional').each(function (index) {
	  var $element = $(this);
	  validateNotEmpty($element);
	});


	function validateNotEmpty($element){

		$element.bind('input', function() {

			validRequired = false;

			$(form+' '+ '.required-optional').each(function (index) {
				var ivalue = $(this).val();

				if (ivalue.length>0) {
					validRequired = true;
				}

			});

			if(validRequired){
				$(form+' '+ '.required-optional').addClass('required');
			}
			else{
				$(form+' '+ '.required-optional').removeClass('required');
			}

		});

	}
}

function parseURLParams(url) {
    var queryStart = url.indexOf("?") + 1,
        queryEnd   = url.indexOf("#") + 1 || url.length + 1,
        query = url.slice(queryStart, queryEnd - 1),
        pairs = query.replace(/\+/g, " ").split("&"),
        parms = {}, i, n, v, nv;

    if (query === url || query === "") {
        return;
    }

    for (i = 0; i < pairs.length; i++) {
        nv = pairs[i].split("=");
        n = decodeURIComponent(nv[0]);
        v = decodeURIComponent(nv[1]);

        if (!parms.hasOwnProperty(n)) {
            parms[n] = [];
        }

        parms[n].push(nv.length === 2 ? v : null);
    }
    return parms;
}

function searchItemsQuery(query){
	var url = window.location.href.split('?')[0];
	window.location.href = url+query;
}

function sortByAZ(data, key, boolean){

	var byName = data.slice(0);
	byName.sort(function(a,b) {
		var x = '',
			y= '';
		if(typeof boolean != 'undefined'){
			x = new Boolean(a[key]);
			x = x.toString();

			y = new Boolean(b[key]);
			y = y.toString();

		}
		else{
			x = a[key].toLowerCase();
			y = b[key].toLowerCase();
		}
	    return x < y ? -1 : x > y ? 1 : 0;
	});
	return byName;
}

function sortByNumber(data, key){
	var byNumber = data.slice(0);
	byNumber.sort(function(a,b) {
	    var x = a[key];
	    var y = b[key];
	    return x < y ? -1 : x > y ? 1 : 0;
	});

	return byNumber;
}

/*Función general de ordenamiento*/
var ordenando = false;

/**El contenedor que tiene los botones de ordenamiento debe
tener el id que coincida con el metodo ordenamiento en Services más un data-action que contenga la liga del json POST**/
function orderItemsQuery(opc, parent_id){

	if(typeof parent_id != 'undefined' && typeof Services.ordenamiento[parent_id] != 'undefined'){
		var $parent = $('#'+parent_id);

		var urlOrdenamiento = ( $parent.data('action') == '' ? postURL : $parent.data('action') );

		urlOrdenamiento = checkDevelopmentPostHTML(urlOrdenamiento);

		$.post(  urlOrdenamiento , opc)
			.done(function( data ) {
			  	Services.ordenamiento[parent_id](data);
				ordenando = false;
			 })
			.fail(function( jqxhr, textStatus, error ) {
			  	//Mensaje de error del sistema
			  	console.log('Mensaje de error');
			  	ordenando = false;
			});

	} else {
		//*Para propositos de simulación el envío de los parámetros vía "get" en la url*//
		ordenando = false;
		var query = '?key='+opc.key+'&order='+opc.orderby;
		var url = window.location.href.split('?')[0];
		window.location.href = url+query;
	}


}


function is_mobile(){

	// var w = window.innerWidth
	// || document.documentElement.clientWidth
	// || $(window).width();

	w = $( window ).width();
	if(w<768){

	    delete w;

	    return true;
	  }
	else{
		return false;
	}
}

function is_desktop(){
	return !navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry|IEMobile)/);
}

function appendErrorGeneral($e, $i, message){

	if($e.find('.general-error-tooltip').length == 0){
		var errorhtml = '<div class="general-error-tooltip"><p class="txt-300">'+message+'</p></div>';
		$e.append(errorhtml);

		if($i != null)
			$i.addClass('error');
	}
}

function appendErrorGeneralHTML($e, $i, errorhtml){
	if($('.system-error-msg').length==0){
		var errorhtml = '<div class="col-sm-12 center-block system-error-msg">'+errorhtml+'</div>';
		$e.addClass('has-system-error');
		$( errorhtml ).insertAfter( $e );
		if($i != null)
			$i.addClass('error');
	}
}

function cerrarConfiguracionAfuera(){

	$('html').on('click', 'body.settings-open',function(e){
		e.stopPropagation();
		$('.main-links li').removeClass('active');
		$('.date-picker').removeClass('open');
		$('.group-block, .block-eli-admin .settings-ri, .listado-header-autogestion .settings-ri').removeClass('active');
		$('.row-ls, .linea-batch').removeClass('active-settings');
		$('.general-group-options-container, .rol-element').removeClass('active');
		$('body').removeClass('settings-open');

	});
}

var modalLimitarMasivo = null;
function initmodalLimitarMasivo(){
	modalLimitarMasivo = new modalesTelcel($('#modal-limitar-masivo'),{
		onInit : function(){

		},
		onReset : function(){
			// if($('#modal-limitar-masivo .limit-data-msg').length>0){
			// 	$('#modal-limitar-masivo .limit-data-msg').addClass('hidden');
			// 	$('#modal-limitar-masivo .regular-msg').removeClass('hidden');
			// }
		},
		onOpen : function(){


		}
	});
};

var homeAdminComponent = (function(){

	function initComponent(){
		initGestionarLineas();
	}


	function initGestionarLineas(){

		var dataGestionarFavoritos = {
			data: [],
			success: false
		};

		setActions();
		getData();


		function loadingIcon(show, $element, $extra){

			var loading = '<div class="loading-block"><div class="sk-circle"> <div class="sk-circle1 sk-child"></div> <div class="sk-circle2 sk-child"></div> <div class="sk-circle3 sk-child"></div> <div class="sk-circle4 sk-child"></div> <div class="sk-circle5 sk-child"></div> <div class="sk-circle6 sk-child"></div> <div class="sk-circle7 sk-child"></div> <div class="sk-circle8 sk-child"></div> <div class="sk-circle9 sk-child"></div> <div class="sk-circle10 sk-child"></div> <div class="sk-circle11 sk-child"></div> <div class="sk-circle12 sk-child"></div> </div></div>';

			if(show){
				$element.prepend(loading);

				if (typeof $extra !== 'undefined')
					$extra.addClass('hidden');
			}
			else{
				$('.loading-block').remove();
			}
		}

		function getData(){

			$('#btn-gestionar').one('click', function() {

			var $main =  $('#edit-group-block');

			loadingIcon(true, $main);

			$.when( callData() )
				.done(function() {

					if(dataGestionarFavoritos.success){
						// LLENAR INFO

						$.each(dataGestionarFavoritos.data, function( index, grupo ) {

							var html = '<form class="group-edit vertical-align col-sm-12" id="grupo-'+grupo.id+'" data-id="'+grupo.id+'">';
							html+= '<div class="col-sm-1 text-center">';
							html+= '<span class="icon '+(grupo.tipo == 1 ? 'i-user' : 'i-users')+'"></span>';
							html+= '</div>';

							html+= '<div class="col-sm-4" >';
							html+= '<input type="text" name="nombre" value="'+grupo.nombre+'" class="input-nombre" readonly/>';
							html+= '</div>';

							html+= '<div class="col-sm-4" >';
							html+= '<input type="text" name="telefono" value="'+grupo.telefono+'" readonly/>';
							html+= '</div>';

							html+= '<div class="col-sm-2">';
							html+= '<button type="button" class="icon io-Pen edit-btn btn-icon"></button>';
							html+= '<button type="submit" class="icon io-TickNeg hidden btn-icon"></button>';
							html+= '</div>';

							html+= '<div class="col-sm-2">';
							html+= '<button type="button" data-id="'+grupo.id+'" class="icon io-Bin delete-btn btn-icon"></button>';
							html+= '</div>';

							html+= '</form>';

						  	$main.append(html);

						  	var $form = $( '#grupo-'+grupo.id );
							validateForm($form);

						});

					}
					else{

						var msgHTML = 'Ocurrio un error, <strong>no pudimos obtener la información.</strong>';
						$('#edit-group-block .general-error .text').html(msgHTML);
						$('#edit-group-block .general-error').removeClass('hidden');
						scrollToElement($main);
					}

					loadingIcon(false);

				});

			});

			function callData(){

				/**HASH PARA SIMULAR ERROR**/
				var hash = window.location.hash;

				if(hash=='#errorData'){
					dataGestionarFavoritos = {
						data: [],
						success: false
					};
				}
				else{
					dataGestionarFavoritos = {
						data: [
							{id: 1, 'tipo': 1, 'nombre': 'Iván Rodríguez', 'telefono' : '5512345678'},
							{id: 2, 'tipo': 1, 'nombre': 'Multiplica México', 'telefono' : '5512345678'},
							{id: 3, 'tipo': 2, 'nombre': 'Glúo', 'telefono' : '5512345678'},
							{id: 4, 'tipo': 3, 'nombre': 'Metriplica', 'telefono' : '5512345678'}
						],
						success: true
					};
				}

				return $('body').delay( 3000 );
			}

			function updateCall(data, id){
				// Aquí iría el servicio para el update
				return $('body').delay( 3000 );
			}

			function validateForm($form){

				$form.validate({
				  rules: {
				  	nombre: {
				      required: true
				    },
				    telefono: {
				      required: true,
				      digits: true,
				      minlength: 10,
				      maxlength: 10
				    }
				  },
				  messages: {
				  	nombre: {
				       required: "Ingresa un nombre."
				    },

				    telefono: {
				       required: "Ingresa tu número de teléfono.",
				       digits: "Ingresa un número válido.",
				       minlength: "Ingresa un número de 10 dígitos.",
				       maxlength: "Ingresa un número de 10 dígitos."
				     }
				   },
				   	submitHandler: function(form) {
						var self = $(form).serialize();
						var id =$(this).data('id');


					var $editbtn = $(form).find('button[type="submit"]');

					loadingIcon( true, $editbtn.parent(), $editbtn );

					$.when( updateCall(self, id) )
						.done(function() {

							var hash = window.location.hash;

							if(hash=='#errorEdit'){
								$( form ).after( '<p class="error-text">Ha ocurrido un error.</p>' );
								$( form ).find('.edit-btn').removeClass('hidden');
								setTimeout(function(){ $('.error-text').remove() }, 1600);
							}
							else{
								// Success

								$(form).find('input').prop('readonly', true);
								$(form).find('button[type="submit"]').addClass('hidden');
								$(form).find('.edit-btn').removeClass('hidden');
							}

							loadingIcon( false );

						});

					}
				});
			}
		}

		function setActions(){


			// Botón mostrar popup gestionar
			$('#btn-gestionar').click(function() {
				$('#gestionar-favoritos').toggleClass('active');
			});

			// Botón mostrar Agregar
			$('#group-add-show').click(function() {
				$(this).addClass('hide');
				$('#form-add-group').toggleClass('active');
			});

			// Botón para editar
			$( '#edit-group-block' ).on( "click", ".group-edit .edit-btn", function() {
				var $parent = $(this).parent().parent();
				$parent.find('input').prop('readonly', false);
				$(this).addClass('hidden');
				$parent.find('button[type="submit"]').removeClass('hidden');
			});

			// Botón para borrar
			$( '#edit-group-block' ).on( "click", ".group-edit .delete-btn", function() {
				var id = $(this).data('id');
				var $btn = $(this);
				deleteGroup(id, $btn);
			});

		}

		function deleteGroup(id, $deletebtn){

			loadingIcon( true, $deletebtn.parent(), $deletebtn );

			$.when( callDeleteData(id) )
				.done(function() {

					var hash = window.location.hash;

					if(hash=='#errorDelete'){
						var $form = $('#grupo-'+id);
						$form.after( '<p class="error-text">Ha ocurrido un error.</p>' );
						$form.find('.delete-btn').removeClass('hidden');
						setTimeout(function(){ $('.error-text').remove() }, 1600);
					}

					else{
						$('#grupo-'+id).remove();
					}

					loadingIcon( false );

				});



			function callDeleteData(id){
				// Aquí iría el servicio
				return $('body').delay( 3000 );
			}

		}
	}

	return{
		fInitComponent : initComponent
	};

})();


var swipersM = [];

var swipersMTelcel = (function(){


	var rtime;
	var timeout = false;
	var delta = 200;


	function resizeend() {
	    if (new Date() - rtime < delta) {
	        setTimeout(resizeend, delta);
	    } else {
	        timeout = false;
	        initSwiperMobile();
	        setTimeout(function(){
	        	triggerChartResize();
	        	generalFullLoadingIcon('.swiper-mobile .s-slider', false);
	        }, 500);


	    }
	}

	function addActionsSliderHome(){

		$('.tab-pane').bind('openTerminos', '.btn-terminos', function(){
			var $button = $(this),
			$swiper = $button.closest('.swiper-container'),
			$slide = $swiper.find('.swiper-slide-active'),
			iheight = $slide.find('.slide-container').outerHeight(),
			newHeight = iheight+894;
			$swiper.data('iheight', iheight);
			resizeSlidesActive($swiper, newHeight);
		});

		$('.tab-pane').bind('closeTerminos', '.btn-terminos', function(){
			var $button = $(this),
			$swiper = $button.closest('.swiper-container'),
			newHeight = $swiper.data('iheight');
			resizeSlidesActive($swiper, newHeight);
		});

		$('.tab-pane').bind('closeTerminos', '.terminos-container .close-container .icon', function(){
			var $button = $(this),
			$swiper = $button.closest('.swiper-container'),
			newHeight = $swiper.data('iheight');
			resizeSlidesActive($swiper, newHeight);
		});

	}

	function addActions(){

		$('.swiper-slide select').on('mousedown touchstart MSPointerDown', function(e){
		       e.stopPropagation();
		});

		$('.tab-pane').bind('openFAQ', '.faq-element .question-container', function(){
			var $faq = $(this),
			$swiper = $faq.closest('.swiper-container'),
			$slide = $swiper.find('.swiper-slide-active'),
			iheight = $slide.find('.slide-container').outerHeight(),
			newHeight = iheight;
			$swiper.data('iheight', iheight);
			resizeSlidesActive($swiper, newHeight);
		});

		$('.tab-pane').bind('closeFAQ', '.faq-element .question-container', function(){
			var $faq = $(this),
			$swiper = $faq.closest('.swiper-container'),
			newHeight = $swiper.data('iheight');
			resizeSlidesActive($swiper, newHeight);
		});
	}

	function triggerChartResize(){
		if($('.pie-chart-container').length>0){
			$('.pie-chart-container').trigger('resizeChart');
		}
	}

	var totalSliders = 0;
	function initSwiperMobile(){

		$('.swiper-mobile').each(function( index ) {
			var $swiper = $(this);
			createSwiper(index, $swiper);
			totalSliders++;

			if($('.swiper-mobile').length==totalSliders)
				generalFullLoadingIcon($('body'), false);
        });

		//Un timeout para esperar a que termine de cargar la librería
		if(typeof chartsMTE != 'undefined')
			setTimeout(function(){
				chartsMTE.reinitDuplicates();
	      	}, 1500);

	}


	function initSwiperResize(){
		var $body = $(this.ie6 ? document.body : document);

		$(window).resize(function(){
			if( ww != $(window).width()+fixPaddingRow ){
				rtime = new Date();
				//ww = $body.innerWidth();
			    if (timeout === false) {

			    	generalLoadingIcon('.swiper-mobile .s-slider', true);
			        timeout = true;
			        setTimeout(resizeend, delta);
			    }

			    //Do something

			    ww = $(window).width()+fixPaddingRow;

			    delete ww;

			}

		});
	}
	function resizeSlidesActive($swiper, height){
		if($swiper){
		    $swiper.find('.swiper-slide').css('height', height+100);
		}
	}

	function resizeSlides($swiper, auto){
		// var swiperHeight = typeof auto != 'undefined' ? auto : $swiper.height();

		// if($swiper){
		//     $swiper.find('.s-slider').height(swiperHeight);
		// }
	}

	var $body = $(this.ie6 ? document.body : document);
	var ww = 0;

	var fixPaddingRow = (platform.name == 'Safari' ? 0 : 15);
	$( window ).load( function(){

	   ww = $(window).width()+fixPaddingRow;

	});

	function createSwiper(i, $swiper){
		//ww = $body.innerWidth();
		ww = $(window).width()+fixPaddingRow;
		if (ww < 768) {
		  if (swipersM[i]) return;

		  else {
		  		addClasses($swiper);
		  		var isFormsHome = $swiper.hasClass('inn-sec-tabs');

			  	swipersM[i] = new Swiper($swiper, {
			  		speed: 200,
	               	loop: !isFormsHome,
	                nextButton: '.swiper-button-next',
       				prevButton: '.swiper-button-prev',
	                autoHeight: true,
	                effect: 'coverflow',
	                grabCursor: true,
	                centeredSlides: true,
	                slidesPerView: 1.5,
	                watchSlidesVisibility : true,
	                spaceBetween: 5,
	                //touchMoveStopPropagation : false,
	                shortSwipes	: false,
	                coverflow: {
	                    rotate: 0,
	                    stretch: 0,
	                    depth: 0,
	                    modifier: 1.1,
	                    slideShadows: false
	                },
	                resizeReInit: true,

	                breakpoints: {
	                    500: {
	                        slidesPerView: 1,
	                        loop: !isFormsHome,
	                    }
	                },
	                onInit : function(){
	                	$('.facturas-block').on('click', '.btn-descargar', function(e){
							e.preventDefault();
							var $element = $(this);
							home.facturasSwiperMobile($element);
						});
	                },
				    onSlideChangeStart: function (swiper) {
				    	var index = swiper.activeIndex,
				    	$slide = $swiper.find('.swiper-slide').eq(index),
				    	innerHeight = $slide.find('.slide-container').outerHeight();
				    	resizeSlidesActive($swiper, innerHeight);
	                },
	                onSlideChangeEnd: function (swiper) {
				    	var $terminosInSwiper = $swiper.find('.tab-pane').find('.terminos-container');
	                    if($terminosInSwiper.length>0){
	                    	$terminosInSwiper.hide();
	                    	$terminosInSwiper.removeClass('visible');
	                    }
	                }
	            });


			  	$swiper.data('index', i);
			  	var index = swipersM[i].activeIndex,
			  	$slide = $swiper.find('.swiper-slide').eq(index),
				innerHeight = $slide.find('.slide-container').outerHeight();
			  	resizeSlidesActive($swiper, innerHeight);
			  	swipersM[i].slideTo(0);
			  }
		}
		else {
		  if (swipersM[i]) {

		     swipersM[i].destroy(false, true);
		     swipersM[i] = undefined;
		     removeClasses($swiper);
		     resizeSlides($swiper, 'auto');
		  }
		}

		function setHeightAttr($swiper){
			var height = $swiper.outerHeight();
			$swiper.data('iheight', height);
		}

		function addClasses($swiper){
			$swiper.addClass('swiper-container');
			$swiper.find('.s-wrapper').addClass('swiper-wrapper');
			$swiper.append('<div class="swiper-button-next io-slider-right swiper-button"></div><div class="swiper-button-prev io-slider-left swiper-button"></div>');
			$swiper.find('.s-slider').addClass('swiper-slide');

			var swiperHeight = $swiper.height();
            $swiper.find('.s-slider').css('height',swiperHeight);
            // setHeightAttr($swiper);
		}

		function removeClasses($swiper){
			$swiper.removeClass('swiper-container');
			$swiper.find('.s-wrapper').removeClass('swiper-wrapper');
			$swiper.find('.swiper-button').remove();
			$swiper.find('.s-slider').removeClass('swiper-slide');
		}

	}

    return{
        inicializar: function(){
        	if($('.swiper-mobile').length>0){
        		setTimeout(function(){
        			initSwiperMobile();
        			initSwiperResize();
        			addActionsSliderHome();
        			addActions();
        		}, 1000);


        	}
        },
        resizeSlidesActive : resizeSlidesActive
    }

})();

/*Slider*/
var sliderCreate = (function(){
    return{
        inicializar: function(){

            var swiper = new Swiper('.slider-type-one', {
                pagination: '.pag-type-one',
                paginationClickable: true,
                loop: true,
                autoplay: 1500,
                autoHeight: true
            });
        }
    }

})();


var firstChartLoaded = false;

/*Gráficas circulares de Pastel*/
var chartsTelcel = (function(){

    function calculateChartDonut($chart, perc){
        var deg = [];

        deg[0] = (perc/100*360)-180;
        deg[1] = 270; //90
        deg[2] = deg[0];

        // If percentage is less than 50%

        if(perc<50){

            $chart.addClass('flip-colors');
            deg[1] = (perc/100*360+90-180);
            deg[2] = 180;
        }

        return deg;

    }

    function setPropertiesDonut($chart, deg,text, percentage){

        $chart.find('.chart-center').html("<span class='robusta'>"+text+"</span>");

        $chart.find('.slice.one').css({
            "-webkit-transform": "rotate("+deg[1]+"deg)",
            transform: "rotate("+deg[1]+"deg)"
        });

        $chart.find('.slice.two').css({
            "-webkit-transform": "rotate("+deg[2]+"deg)",
            transform: "rotate("+deg[2]+"deg)"
        });

        $chart.find('.rest-block strong').html(100-percentage+'%');
    }

    function setPropertiesBar($chart, percentage, text){
    	var ilimitado = false;

    	if(percentage == 'Ilimitado'){
    		ilimitado = true;
    		percentage = 100;
    	}

    	if($chart.hasClass('v2')){
    		$chart.parent().append("<p>"+text+"</p>");

    		var style = "left:'+percentage+'%";

    		if(percentage == 100)
    			style = "right:0";

    		$chart.append('<span class="percentage robusta" style="'+style+'">'+( ilimitado ? 'Ilimitado' : percentage+'%' )+'</span>');
    	}
    	else
        	$chart.find('.bar-chart').html("<p>"+text+"</p>");

        $chart.find('.bar-chart').css({
            "width": percentage+"%"
        });


        $chart.show();

    }

    function setPropertiesBattery($chart, percentage, text){

        $chart.find('.chart-center').html("<p>"+text+"</p>");

        var base = 20;

        var coloreditems = (percentage*base)/100;

        if((percentage%5) != 0){
            coloreditems = 5*(Math.round(coloreditems/5));
        }

        for (var i=0; i<coloreditems; i++){
            $chart.find('.battery-chart').append("<span class='slice colored'></span>");
        }

        for (var i=0; i<base-coloreditems; i++){
            $chart.find('.battery-chart').append("<span class='slice'></span>");
        }


    }

    function drawChartsDonut(){
        $('.chart-block').each(function( index ) {

            var percentage = $(this).data('percentage');
            var text = $(this).data('description');
            var deg = [];

            if(percentage) {
                var $chart = $(this);
                deg = calculateChartDonut($chart,percentage);
                setPropertiesDonut($chart, deg, text, percentage);
            }


        });

    }

    function setChartError($chart){
		var $chartContainer = $chart;
		var html = '<div class="col-sm-12 api-msg api-msg-error"> <div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb"> <span class="icon io-Alert2"></span> <h2 class="h4">Información no disponible por el momento.</h2> <p class="p-only"><button class="btn-like-a btn-reintentar">Reintentar</button></p></div> </div> </div> </div>';

		$chartContainer.append(html);

		loadingChart($chartContainer, false);

	}

    function drawChartsBar(){

       $('.bar-chart-container').each(function( index ) {
        	var hash = window.location.hash;
        	var $chart = $(this);
		    loadingChart($chart, true);

		   	loadDataChartsBar($chart);

        });

    }

    function loadDataChartsBar($chartContainer){

    	/*Get data*/
		var loaded = typeof $chartContainer.data('loaded') != 'undefined' ? Number($chartContainer.data('loaded')) : 0;
		$chartContainer.find('.first-chart').hide();

		if(loaded){

			$chartContainer.find('.bar-block-container').each(function( index ) {
            	var $chart = $(this).find('.bar-block');
            	drawData($chart);
            });

			setTimeout(function(){
	            loadingChart($chartContainer, false);
	            $chartContainer.find('.first-chart').show();
	        }, 1000);


	        if($chartContainer.hasClass('swiper-slide') && !firstChartLoaded){
				firstChartLoaded = true;
				$chartContainer.addClass('firstLoaded');

				$swiper = $chartContainer.closest('.swiper-mobile');
				swipersM[$swiper.data('index')].slideTo(i);
			}

		}
		else{
			setChartError($chartContainer);
		}
    }

    function drawData($chart){
    	var percentage = typeof $chart.data('percentage') != 'undefined' ? $chart.data('percentage') : 0;
        var text = $chart.data('description');

        setPropertiesBar($chart, percentage, text);

    }

    function setErrorCharts(){

		var html = '<div class="col-sm-12 api-msg api-msg-error"> <div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb"> <span class="icon io-Alert2"></span> <h2 class="h4">Información no disponible por el momento.</h2> <p class="p-only"><button class="btn-like-a btn-reintentar">Reintentar</button></p></div> </div> </div> </div>';

		$('.bar-chart-container').each(function(){
			var $chartContainer = $(this);
			$chartContainer.append(html);

			loadingChart($chartContainer, false);
		});

	}

	function setActionsErrorBar(){
		$('.bar-chart-container').on('click', '.btn-reintentar', function(){
			var $button = $(this),
			$container = $button.closest('.bar-chart-container');
			loadingChart($container, true);
			setTimeout(function(){
				loadDataChartsBar($container);
			}, 3000);

			$container.find('.api-msg-error').remove();

		});
	}

	function setActionsErrorBattery(){
		$('.battery-chart-container').on('click', '.btn-reintentar', function(){
			var $button = $(this),
			$container = $button.closest('.battery-chart-container');
			loadingChart($container, true);
			setTimeout(function(){
				loadDataChartsBattery($container);
			}, 3000);

			$container.find('.api-msg-error').remove();

		});
	}

    function drawChartBattery(){
    	$('.battery-chart-container').each(function( index ) {
        	var hash = window.location.hash;
        	var $chartContainer = $(this);
		    loadingChart($chartContainer, true);

		    loadDataChartsBattery($chartContainer);

        });

        // $('.battery-block').each(function( index ) {

        //     var percentage = $(this).data('percentage');
        //     var text = $(this).data('description');

        //     if(percentage) {
        //         var $chart = $(this);
        //         setPropertiesBattery($chart, percentage, text);
        //     }

        // });

    }

    function loadDataChartsBattery($chartContainer){
    	var $chart = $chartContainer.find('.battery-block');

    	/*Get data*/
		var loaded = typeof $chart.data('loaded') != 'undefined' ? Number($chart.data('loaded')) : 0;

		$chartContainer.find('.first-chart').hide();

		if(loaded){

			var percentage = $chart.data('percentage');
			var text = $chart.data('description');
			setPropertiesBattery($chart, percentage, text);

			setTimeout(function(){
	            loadingChart($chartContainer, false);
	            $chartContainer.find('.first-chart').show();
	        }, 1000);

	        if($chartContainer.hasClass('swiper-slide') && !firstChartLoaded){
				firstChartLoaded = true;
				$chartContainer.addClass('firstLoaded');

				$swiper = $chartContainer.closest('.swiper-mobile');
				swipersM[$swiper.data('index')].slideTo(i);
			}

		}
		else{
			setChartError($chartContainer);
		}
    }

    return{
        inicializar: function(){
            drawChartsDonut();
            drawChartsBar();
            drawChartBattery();
            setActionsErrorBar();
            setActionsErrorBattery();
        }
    }

})();


function loadingChart($container, show){
	var loading = '<div class="loading-block full-width"><div class="loading-wrapper"><div class="sk-circle"> <div class="sk-circle1 sk-child"></div> <div class="sk-circle2 sk-child"></div> <div class="sk-circle3 sk-child"></div> <div class="sk-circle4 sk-child"></div> <div class="sk-circle5 sk-child"></div> <div class="sk-circle6 sk-child"></div> <div class="sk-circle7 sk-child"></div> <div class="sk-circle8 sk-child"></div> <div class="sk-circle9 sk-child"></div> <div class="sk-circle10 sk-child"></div> <div class="sk-circle11 sk-child"></div> <div class="sk-circle12 sk-child"></div> </div></div></div>';

	if(show){
		$container.append(loading);
	}
	else{
		$container.find('.loading-block').remove();
	}
}

/**Variable auxiliar en devx para saber a que url mandar el post FAKE**/
var ingresarLineasComponentTotal = 0;

var ingresarLineasComponent = (function(){

	var $component = $('#componente-ingresar-lineas');
	var $formArchivo = $('#componente-ingresar-lineas form.lineas-archivo');
	var currentBtn = null;

	var elementsForm = {
		'agregarLineasArchivo' : {
			id : null,
			validator : null,
			sending: false
		},
		'agregarLineasArbol' : {
			id : null,
			validator : null,
			sending: false
		},
		'buscarArbolLineas' : {
			id : null,
			validator : null,
			sending: false
		},
		'agregarLineasAutocomplete' : {
			id : null,
			validator : null,
			sending: false
		}
	};

	// GUARDAR ELEMENTOS DEPENDIENDO DEL TIPO DE SUBIDA
	var elementsPost = [];

	function init(){

		if($component.length>0){
			initGeneralActions();
			initArchivo();
			initAutocomplete();
			initArbol();
			checkPreSelectedData();
		}
	}

	// Acciones generales
	function initGeneralActions(){

		// ACCIONES PARA MOSTRAR CADA COMPONENTE DIFERENTE
		$('#componente-ingresar-lineas .componente-btn-block').on('click', '.btn-al', function(){

			var $button = $(this);

			$('#componente-ingresar-lineas .btn-al').removeClass('active');
			$button.addClass('active');

			var elementToShow = ( typeof $button.data('show') != 'undefined' ? $button.data('show') : null);

			if(elementToShow != null ){

				currentBtn =  elementToShow;
				showElement(elementToShow);
				showSecondaryEvent(elementToShow);

			}

			resetArchivo();
			resetAutocomplete();
			//resetTree();
		});
	}


	function showSecondaryEvent(element){

		var $element = $('#componente-ingresar-lineas '+element);
		var elementToShowOptions = ( typeof $element.data('options') != 'undefined' ? $element.data('options') : null);

		if(elementToShowOptions!=null){
			triggerElementEvent(elementToShowOptions, false);
		}
	}

  	function checkPreSelectedData(){
  		var $element = $('#tokenfield-agregar-lineas');

  		var preSelectedData = $element.data('preseleccionada');

  		if(typeof preSelectedData!='undefined'){
  			if($('#componente-ingresar-lineas .btn-al.btn-lineas-autocomplete').length>0)
  				$('#componente-ingresar-lineas .btn-al.btn-lineas-autocomplete').trigger('click');
  			$element.tokenfield('setTokens', preSelectedData );
  			/**Esconder placeholder**/
			$('#tokenfield-agregar-lineas-tokenfield').prop('placeholder', '');
			//**Esconder placeholder fin**/

  		}

  	}

  	function getType(){
  		return currentBtn;
  	}
	// Mostrar esconder elementos
	function showElement(element){

		$('#componente-ingresar-lineas .componente-lb').hide();

		// LLAMAR RESETS
		$('#componente-ingresar-lineas '+element).show();

		if($('.modal-mte #componente-ingresar-lineas').length<1)
			scrollToElement($('#componente-ingresar-lineas'));
	}

	function initArchivo(){

		var $element = $('#componente-ingresar-lineas .componente-lb.lineas-archivo');
		var elementOptions = ( typeof $element.data('options') != 'undefined' ? $element.data('options') : null);

		initActions();

		if($formArchivo.length>0)
			validateFormArchivo();

		// Validar formulario del archivo : tipo y tamaño del archivo
		function validateFormArchivo(){

			disableSumbitButton($formArchivo, true);

			elementsForm['agregarLineasArchivo']['validator'] =
				$formArchivo.validate({
					  rules: {
						archivo: {
							required: true,
							extension: "xls",
							filesize: 10000000
						}
					  },
					  messages: {
						 archivo: {
						   required: "Ingresa un archivo de 10 MB máximo.",
						   extension: "Ingresa un archivo con extensión: .xls",
						   filesize: "Ingresa un archivo de 10 MB máximo."
						 }
					   },
						errorClass : "error-dd error",
						errorElement : 'div',
						errorPlacement: function(error, element) {
							$('.lineas-archivo .extra-info').hide();
							error.appendTo( $('.lineas-archivo .add-lines-ge-mod' ));
							element.parent().addClass('error');
						},
				   		onclick: true,
						success: function (error) {
							$('.lineas-archivo .extra-info').hide();
						 	$('.lineas-archivo .file.error' ).removeClass('error');
				            error.remove();
				        }
				});

		}


		function initActions(){

			// CAMBIAR EL NOMBRE DEL ARCHIVO
			$('#componente-ingresar-lineas .file').on('change', 'input[type="file"]', function(e){
				e.stopPropagation();
				var $parent = $('#componente-ingresar-lineas .file');
				var title =  $(this).val().replace(/^.*[\\/]/, '');
				$parent.prop('title', title);

				if(title!='')
					$('.lineas-archivo .extra-info').hide();
				else{
					$('#archivo').parent('.file').removeClass('error');
					$('.lineas-archivo .extra-info').show();
				}

				if(elementOptions!=null){

					if(title!='')
						triggerElementEvent(elementOptions, true);
					else
						triggerElementEvent(elementOptions, false);

				}
				else{
					if(title!='' && $formArchivo.valid())
						disableSumbitButton($formArchivo, false);
					else
						disableSumbitButton($formArchivo, true);
				}
			});

		}

	}


	function triggerElementEvent(options, value){
		var show = true;

		if(options.event=='show'){

			var dependantShow = ( typeof options.showDependant != 'undefined' ? options.showDependant : null);

			if(dependantShow != null)
				show = ( typeof $(dependantShow).valid() != 'undefined' ? $(dependantShow).valid() : true);

			if(value && show)
				$(options.element).show();
			else
				$(options.element).hide();
		}
	}

	function formatDataAutocomplete(data){

		var dataT = null;

		elementsPost = [];

		$.each(data, function( index, item ) {
		 	dataT = {
		 		id : ( typeof item.id != 'undefined' ? item.id : null ),
		 		tipo : item.tipo,
		 		selected : (item.tipo == 'group' ? 'all' : 'single')
		 	};

		 	if(item.tipo=='general')
		 		dataT.value = item.value;

		 	elementsPost.push(dataT);
		});

	}

	function getArchivo(){

		var fileData = $('#componente-ingresar-lineas #archivo').prop('files')[0];
	   	var formData = new FormData();
	    formData.append('archivo', fileData);

	    return formData;

	}

	function getDataAutocomplete(){
		var tokens = $('#tokenfield-agregar-lineas').tokenfield('getTokens');
		formatDataAutocomplete(tokens);

		return elementsPost;
	}

	function initAutocomplete(){

		function sendAutocompleteData(){
			var container = '#componente-ingresar-lineas';
			var $form = $('.form-agregar-grupo #form-agregar-grupo');

			$('#btn-add-lineas-autocomplete').prop('disabled', true);

			//
			if(!elementsForm['agregarLineasAutocomplete']['sending']){

				elementsForm['agregarLineasAutocomplete']['sending'] = true;

				$('#btn-add-lineas-autocomplete').prop('disabled', true);

				generalLoadingIcon(container, true);

				var data = { success: true, data: [] };

				$.post( postURL , { data: self })
				  .done(function( json ) {

				  	if(data.success){
				  		//EXITO
				  		//Simular el id que se agrego en la DB
						var idAdded = $('#main-view-block .item-mv').length;

						//Envío el Id y el nombre del nuevo elemento
						addCreatedElementToHTML(idAdded, selfArray[0].value);

						$('#btn-agregar-lineas-grupo-modal').attr('data-item', '{"id": "'+idAdded+'" ,"texto": "'+selfArray[0].value+'"}');

						$(form).hide();
						$(form).addClass('success');

						$('.form-agregar-grupo .api-msg .grupo-txt').html(selfArray[0].value);

						elementsForm['agregarLineasAutocomplete']['sending'] = false;
						$(form).find('button[type="submit"]').prop('disabled', false);

				  	}
				  	else{

				  		//JSON SUCCESS FALSE
				  		if(data.error){
				  			appendErrorGeneral($('.form-agregar-grupo .element-input-block'), null , data.error.message);
				  		}

				  	}

				  	elementsForm['agregarLineasAutocomplete']['sending'] = false;
				  	generalLoadingIcon(form, false);

				  })
				  .fail(function( jqxhr, textStatus, error ) {
				  	//Mensaje de error del SISTEMA
				  	elementsForm['agregarLineasAutocomplete']['sending'] = false;
				  	generalLoadingIcon(form, false);
				});

			}

		}
	}



	function resetArchivo(){

		//FORM FILE
		$('.lineas-archivo .extra-info').show();
		$('#componente-ingresar-lineas .lineas-archivo').find("input[type=text], input[type=file]").val("");
		$('#componente-ingresar-lineas .lineas-archivo').find('button[type="submit"]').prop('disabled', true);
		$('#componente-ingresar-lineas .lineas-archivo').find('.error-dd, .error').removeClass('error-dd').removeClass('error');
		$('#componente-ingresar-lineas .lineas-archivo').find('.file').attr('title', '');
		$('#componente-ingresar-lineas .lineas-archivo').find('#archivo-error').remove();

		if(elementsForm['agregarLineasArchivo']['validator']){
			elementsForm['agregarLineasArchivo']['validator'].resetForm();
		}

	}

	function resetAutocomplete(){
		// AUTOCOMPLETE
		$('#btn-add-lineas-autocomplete').prop('disabled', true);
		$('#tokenfield-agregar-lineas').tokenfield('setTokens', []);
		$('#tokenfield-agregar-lineas').val('');
		$('.total-autocomplete').addClass('hidden');
		$('.total-autocomplete .total').html('0');
		tokenFieldComponent.resetTotal();
	}

	function resetSearchTree(){
		$('#tree-lineas-search').jstree("deselect_all");
	    $('#componente-ingresar-lineas .lineas-arbol .search-input').val('');
	    $('#componente-ingresar-lineas .lineas-arbol .btn-remover-busqueda').removeClass('active');
	    $('#componente-ingresar-lineas .lineas-arbol .btn-search').prop('disabled', true);
	    $('#tree-lineas-search').hide();
	    $('#tree-lineas').show();
	   	if($('#tree-lineas .jstree-clicked').length>0){
			$("#componente-ingresar-lineas .lineas-arbol .block-content-arbol-btn").removeClass('hidden');
			$("#componente-ingresar-lineas .lineas-arbol .block-content-arbol-btn .btn-remover-seleccion").addClass('active');
		}
		else{
			$("#componente-ingresar-lineas .lineas-arbol .block-content-arbol-btn").addClass('hidden');
			$("#componente-ingresar-lineas .lineas-arbol .block-content-arbol-btn .btn-remover-seleccion").removeClass('active');
		}
	}

	function resetTree(){
		$('#tree-lineas').jstree("deselect_all");
		$('#tree-lineas-search').jstree("deselect_all");

		$('#tree-lineas').jstree("destroy").empty();
		$('#tree-lineas-search').jstree("destroy").empty();

		//selectedGroup = { id: null , nombre: null, actual : null };
		$('#btn-mover-lineas').prop('disabled', true);
		$('#tree-lineas').jstree("close_all");
		$('#tree-lineas .detail-group').remove();
		$("#componente-ingresar-lineas .lineas-arbol .block-content-arbol-btn").addClass('hidden');
		$("#componente-ingresar-lineas .lineas-arbol .btn-like-a").removeClass('active');
	}

	function getDataArbol(){
		//Obtener los elementos seleccionados
		var result = $('#tree-lineas').jstree('get_selected');

		formatDataArbol(result);

		return elementsPost;
		//postAgregarLineas(phoneChecked, total);
	}

	// UNIFICAR LA INFORMACIÓN AL MISMO FORMATO
	function formatDataArbol(data){

		var dataT = null;

		elementsPost = [];

		data.forEach(function(item, index){

			if($('#'+item+' >.jstree-anchor .io-Phone').length>0){

				dataT = {
			 		id : ( typeof item != 'undefined' ? item : null ),
			 		tipo : 'single',
			 		selected : 'single'
			 	};
			}
			else{
				dataT = {
			 		id : ( typeof item != 'undefined' ? item : null ),
			 		tipo : 'group',
			 		selected : 'all'
			 	};
			}

			elementsPost.push(dataT);

		});

	}

	function initArbol(){

		var $element = $('#componente-ingresar-lineas .componente-lb.lineas-arbol'),
		elementOptions = ( typeof $element.data('options') != 'undefined' ? $element.data('options') : null),
		treeCuentas = false;

		initActions();
		initTree();

		function initActions(){

			// ACCIONES PARA MOSTRAR CADA COMPONENTE DIFERENTE
			$('#componente-ingresar-lineas .componente-btn-block').on('click', '.btn-lineas-arbol', function(){
				resetSearchTree();
				resetTree();
				initTree();

			});


			//EJECUTAR BUSQUEDA
			$("#componente-ingresar-lineas .lineas-arbol .btn-search").click(function() {

		        var searchString = $('#componente-ingresar-lineas .lineas-arbol .search-input').val();

		        if(searchString!=''){
		       		searchTree(searchString);
		        }

		    });

			//CAMBIAR ESTADO DEL BOTÓN Y DEL ARBOL DEPENDIENDO DEL SEARCH INGRESADO
		    $("#componente-ingresar-lineas .lineas-arbol .search-input").keyup(function() {

		        var searchString = $('#componente-ingresar-lineas .lineas-arbol .search-input').val();
		        var $input = $(this);
		        var min = (typeof $input.data('min') != 'undefined' ? $input.data('min') : 1);
		        if(searchString.length>=min){
		        	$('#componente-ingresar-lineas .lineas-arbol .btn-search').prop('disabled', false);
		       		//$('#componente-ingresar-lineas .lineas-arbol .btn-remover-busqueda').addClass('active');
		        }
		       	else{
		       		$('#componente-ingresar-lineas .lineas-arbol .btn-search').prop('disabled', true);
		       		//resetSearchTree();
		       	}

		    });

		    //BORRAR BUSQUEDA
		    $("#componente-ingresar-lineas .lineas-arbol").on('click', '.btn-remover-busqueda', function() {
		       	resetSearchTree();
		    });

		    //BORRAR SELECCION
		    $("#componente-ingresar-lineas .lineas-arbol .btn-remover-seleccion").click(function() {
		       	resetTree();
		       	initTree();
		    });
		}

		function mostrarNodos(node){

			$('#tree-lineas').jstree('open_node', node.id, function(e, data) {
				drawText(node);
				// var children = node.children;

				// children.forEach(function(child) {
				// 	if(!(/phone_root/i.test(child))){
				// 		var realNode = $("#tree-lineas").jstree().get_node(child);
				// 		drawText(realNode);
				// 	}
				// });
			}, true);
		}

		function esconderNodos(node){

			$('#tree-lineas').jstree('close_node', node.id);
			drawText(node);
		}

		function drawText(node){
			if(node && typeof node.children != 'undefined' && node.children.length>0){

				var nSelectedLines =  $('#tree-lineas #'+node.id+' .jstree-clicked .io-Phone').length;
				var nSelectedGroups =  $('#tree-lineas #'+node.id+' >ul >li >.jstree-clicked .io-Maletin').length;

				var $append = $('#tree-lineas #'+node.id+' >.jstree-anchor');

				var text = '';

				if(!treeCuentas){

					if(node.state.selected)
						nSelectedLines = node.original.total;
					else if(nSelectedLines == 0 && nSelectedGroups>0){

						$('#tree-lineas #'+node.id+' >ul >li >.jstree-clicked .io-Maletin').each(function( index ){
							var $nodo = $(this).parent().parent();
							var nodoId = $nodo.attr('id');
							var realNode = $("#tree-lineas").jstree().get_node(nodoId);

							nSelectedLines += realNode.original.total;
						});

					}

				}

				if($('#tree-lineas .jstree-clicked').length>0 || nSelectedLines>0){
					$("#componente-ingresar-lineas .lineas-arbol .block-content-arbol-btn").removeClass('hidden');
					$("#componente-ingresar-lineas .lineas-arbol .block-content-arbol-btn .btn-remover-seleccion").addClass('active');
				}
				else{
					$("#componente-ingresar-lineas .lineas-arbol .block-content-arbol-btn").addClass('hidden');
					$("#componente-ingresar-lineas .lineas-arbol .block-content-arbol-btn .btn-remover-seleccion").removeClass('active');
				}
			}

			if($('#tree-lineas .jstree-node .jstree-clicked').length>0)
				$('#btn-add-lineas-arbol').prop('disabled', false);
			else
				$('#btn-add-lineas-arbol').prop('disabled', true);
		}



		function updateTotal(node){
			var total = 0;
			var last = 0;
			var result = $('#tree-lineas').jstree('get_selected');

			$.each(result, function( index, value ) {
			  var n = $('#tree-lineas').jstree(true).get_node(value);
			  var exists = result.indexOf(n.parent);
			  if(exists<0)
			  	total+=n.original.total;
			});

			if(total>50){
				modalLimitarMasivo.openModal();
				$('#tree-lineas').jstree(true).deselect_node(node);
				total-=node.original.total;
			}

			$('.total-arbol .total').html(total);
			if(total>0)
				$('.total-arbol').removeClass('hidden');
			else
				$('.total-arbol').addClass('hidden');

			ingresarLineasComponentTotal = total;

			if(total>0){
				$("#componente-ingresar-lineas .lineas-arbol .block-content-arbol-btn").removeClass('hidden');
				$("#componente-ingresar-lineas .lineas-arbol .block-content-arbol-btn .btn-remover-seleccion").addClass('active');
			}
			else{
				$("#componente-ingresar-lineas .lineas-arbol .block-content-arbol-btn").addClass('hidden');
				$("#componente-ingresar-lineas .lineas-arbol .block-content-arbol-btn .btn-remover-seleccion").removeClass('active');
			}
		}

		function initTree(){

			treeCuentas = ($('#tree-lineas').hasClass('tree-cuentas') ? '-cuentas' : '');

			$('#tree-lineas')
			.on("changed.jstree", function (e, data) {


				if(data.action == "select_node"){

					mostrarNodos(data.node);

					if(elementOptions!=null){
						var results = getDataArbol();
						if(results.length>0)
							triggerElementEvent(elementOptions, true);
						else
							triggerElementEvent(elementOptions, false);

					}

					updateTotal(data.node);


					//$('#tree-lineas').jstree('open_node', data.node.id);
				}
				else if(data.action == "deselect_node"){
					esconderNodos(data.node);

					if(elementOptions!=null){
						var results = getDataArbol();
						if(results.length>0)
							triggerElementEvent(elementOptions, true);
						else
							triggerElementEvent(elementOptions, false);

					}

					updateTotal(data.node);
				}

			})
			.bind("open_node.jstree", function (event, data) {
			  mostrarNodos(data.node);
			})
			.jstree({
				'core' : {
					'check_callback' : true,
					'data' : {
						'dataType' : 'json',
						'url' : function (node) {
					      return node.id === '#' ?
					        'http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/root'+treeCuentas+'.php' :
					        'http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/children'+treeCuentas+'.php';
					    },
						'data' : function (node) {

							return { 'id' : node.id };
						}
					},
					'multiple' : true
				},
				'plugins' : [ 'checkbox' ]
			});


			// ARBOL DEL BUSCADOR
			$('#tree-lineas-search').hide();

			$('#tree-lineas-search')
			.on("changed.jstree", function (e, data) {

				if(data.action == "select_node"){

					var $result = $('#tree-lineas-search .jstree-children .jstree-search.jstree-clicked');

					$result.each(function(item, i){
						var instance = $('#tree-lineas').jstree(true);
						var id = $(this).parent('li').attr('id');
						instance.check_node(id);
						instance._open_to(id);
					});

					updateTotal(data.node);
				}
				else if(data.action == "deselect_node"){
					var treeData = $('#tree-lineas').jstree(true).get_json('#', {flat:false})
					var result = data.selected;

					treeData.forEach(function(item, i){
						var instance = $('#tree-lineas').jstree(true);
						if(result.indexOf(item.id) < 0)
							instance.uncheck_node(data.instance.get_node(item.id).id);
					});

					var auxtotal = Number($('.total-arbol .total').html());

					$('.total-arbol .total').html((auxtotal-data.node.original.total<0 ? 0 : auxtotal-data.node.original.total));
				}
			})
			.bind("refresh.jstree", function (event, data) {

		        var search = $('#componente-ingresar-lineas .lineas-arbol .search-input').val();

		        $('#tree-lineas-search').jstree("open_all");
		        $('#tree-lineas-search').jstree('search', search);

		        $('#tree-lineas-search .jstree-search').each(function( index ) {
		        	var texto = $( this ).text();
		        	var textoT = texto.replace(search, '<span class="exact-search">'+search+'</span>');
		        	var $innerHTML = $( this ).find('.jstree-icon');
		        	var $html = $(this);
		        	$html.html('');

		        	$innerHTML.each(function( index ) {
					  $html.append($(this));
					});

					$html.append(textoT);
				});

				var treeData = $('#tree-lineas').jstree('get_selected');
				treeData.forEach(function(item, i){
					var instance = $('#tree-lineas-search').jstree(true);
					if($('#'+item).length > 0)
						instance.check_node(item);
				});
		    })
			.jstree({
				'core' : {
					'expand_selected_onload': true,
					'dblclick_toggle' : false,
					'data' : {
						"dataType" : "json",
						"url" : function (node) {
					      return false;
					    },
						"data" : function (node) {

							return { "id" : node.id };
						}
					},
					"multiple" : true
				},
				'plugins' : ["noclose", "search", "checkbox"],
				'search': {
					"case_insensitive": true,
            		"show_only_matches" : true
				}
			});

		}


		function searchTree(search){

			if(!elementsForm['buscarArbolLineas']['sending']){

				var form = '.tree-groups-asoc';
				generalLoadingIcon(form, true);
				elementsForm['buscarArbolLineas']['sending'] = true;

				var postURL = Services.apiURL.arbolBusqueda(treeCuentas);

				$.post( postURL , { search: search })
				  .done(function( json ) {

				  	Services.general.getArbolBusquedaGeneralCallSuccess(json , form);
				  	elementsForm['buscarArbolLineas']['sending'] = false;
				  	generalLoadingIcon(form, false);

				  })
				  .fail(function( jqxhr, textStatus, error ) {
				  	Services.general.getArbolBusquedaGeneralCallFail(error, form);
				  	elementsForm['buscarArbolLineas']['sending'] = false;
				  	generalLoadingIcon(form, false);
				});

			}
		}
	}

	function resetComponente(){
		$('#componente-ingresar-lineas .btn-al').removeClass('active');
		$('#componente-ingresar-lineas .componente-lb').hide();
		resetAutocomplete();
		resetArchivo();
	}

	return{
		inicializar: init,
		getDataArbol : getDataArbol,
		getDataAutocomplete : getDataAutocomplete,
		getDataArchivo : getArchivo,
		reset : resetComponente,
		getType : getType
	}


})();

var FAQComponente = (function(){

	var $searchForm = $('#form-search-faq');
	var $searchInput = $('#input-search-faq');
	var $autocomplete = $('#autocomplete-ul');

	function init(){
		checkRequiredElements('#form-search-faq');
		initActions();
	}

	function initActions(){
		initSearchForm();
		initSearchAutocomplete();
	}

	function initSearchForm(){

		$searchForm.submit(function( event ) {

			var searchTerm = $searchInput.val();

			if(searchTerm.length>0)
				return true;

			return false;

		});

	}

	function initSearchAutocomplete(){

		$searchInput.bind('input', function() {

			var searchTerm = $searchInput.val();

			if(searchTerm.length>3)
				searchAutocomplete(searchTerm);
			else
				$autocomplete.html('');

		});

		function searchAutocomplete(searchTerm){
			var meta = [];

			$.get( postURL , { term: searchTerm } )
			  .done(function( data ) {
			  	//simular información data
			  	 meta = [
			  	 	{ id: 1, title: "¿Qué es la factura Telcel?", excerpt :  "La factura Telcel es el Estado de Cuenta de tu Plan de Renta.", url : "../faq/categorias" },
			  	 	{ id: 2, title: "¿Qué es la factura Telcel?", excerpt :  "La factura Telcel es el Estado de Cuenta de tu Plan de Renta.", url : "../faq/categorias" },
			  	 	{ id: 3, title: "¿Qué es la factura Telcel?", excerpt :  "La factura Telcel es el Estado de Cuenta de tu Plan de Renta.", url : "../faq/categorias" }
			  	];

			    setAutocompleteHTML(meta);

			  });
		}

		function setAutocompleteHTML(metaAutocomplete){

			$autocomplete.html('');

			$.each(metaAutocomplete, function( index, faq ) {
			  	var liHTML ="<li><a href='"+faq.url+"'><span class='faq-title'>"+faq.title+"</span><span class='faq-excerpt'>"+faq.excerpt+"</span></li>";
			  	$autocomplete.append(liHTML);
			});

		}
	}



	return{
		inicializar: init
	}

})();

function initActionsTerminosGenerales(){
	/**
		Abrir Términos y Condiciones
	**/

	var $terminosContainer = $('#terminos-container, .terminos-container');
	var fadein = false;

	if($terminosContainer.hasClass('fadein'))
		fadein = true;


	$('body').on('click', '.has-inner-tc .btn-terminos-general', function(e){
		e.preventDefault();
		var $button = $(this),
		fadein = false,
		$parent = $button.closest('.has-inner-tc'),
		$terminosBlock = $parent.find('.terminos-container-general-block'),
		$terminosContainer = $terminosBlock.find('.terminos-container');

		if($terminosContainer.hasClass('fadein'))
			fadein = true;

		$terminosContainer.toggleClass('visible');

		if($terminosContainer.hasClass('visible')){

			$('.terminos-container-general-block .terminos-container').removeClass('visible');
			$('.terminos-container-general-block .terminos-container').hide();

			$terminosContainer.addClass('visible');

			if(fadein){
				if(!is_mobile())
					$terminosContainer.fadeIn(300);
				else
					$terminosContainer.show();
			}
			else
				$terminosContainer.slideDown(300);
		}
		else{

			if(fadein){
				if(!is_mobile())
					$terminosContainer.fadeOut(300);
				else
					$terminosContainer.hide();
			}
			else
				$terminosContainer.slideUp(300);


		}

		scrollToElement($parent);
	});
}

function terminosActions(){
	/**
		Abrir Términos y Condiciones
	**/

	$('body').on('click', '#btn-terminos, .btn-terminos', function(e){
		e.preventDefault();
		var $button = $(this),
		fadein = false,
		$container = $button.closest('.data-write'),
		$terminosContainer = $container.next('#terminos-container, .terminos-container'),
		$swiper = $button.closest('.swiper-mobile'),
		$terminosContainerSwiper = $button.closest('.tab-pane').find('.terminos-container'),
		speed = 300;

		if($terminosContainer.hasClass('fadein'))
			fadein = true;

		if($terminosContainerSwiper.length>0){
			$terminosContainer = $terminosContainerSwiper;
			speed = 100;
		}

		$terminosContainer.toggleClass('visible');

		if($terminosContainer.hasClass('visible')){

			if(fadein){
				if(!is_mobile())
					$terminosContainer.fadeIn(300);
				else
					$terminosContainer.show();
			}
			else
				$terminosContainer.slideDown(300);

			if(!fadein)
				scrollToElement($terminosContainer);


			$button.trigger('openTerminos');
		}
		else{
			if(!fadein)
				scrollToElement($('#btn-terminos, .btn-terminos').parent());

			if(fadein){
				if(!is_mobile())
					$terminosContainer.fadeOut(300);
				else
					$terminosContainer.hide();
			}
			else
				$terminosContainer.slideUp(300);

			$button.trigger('closeTerminos');
		}
	});

	$('body').on('click', '#terminos-container .close-container .icon, .terminos-container .close-container .icon', function(e){
		e.preventDefault();

		var $button = $(this),
			fadein = false,
			$terminosContainer = $button.closest('#terminos-container, .terminos-container'),
			$swiper = $button.closest('.swiper-mobile'),
			$terminosContainerSwiper = $button.closest('.tab-pane').find('.terminos-container');

		if($terminosContainer.hasClass('fadein'))
			fadein = true;

		if($terminosContainerSwiper.length>0)
			$terminosContainer = $terminosContainerSwiper;

		var $scrollTo = ($button.closest('.has-inner-tc').length>0 ? $button.closest('.has-inner-tc') : $('#btn-terminos, .btn-terminos').parent() );

		scrollToElement($scrollTo);

		if(fadein){

			if(!is_mobile())
					$terminosContainer.fadeOut(300);
				else
					$terminosContainer.hide();
			}

		else
			$terminosContainer.slideUp(400);

		$terminosContainer.removeClass('visible');

		$('.terminos-container .close-container .icon').trigger('closeTerminos');

	});
}


function initHeaderOptions(){
	var $options = $('.options-header-block .element-option');

	$options.change(function(){
		var $option = $(this),
		value = $option.val(),
		$element = $('#'+value);

		$('.element-option-container').addClass('hidden');
		if($element.length>0)
			$element.removeClass('hidden');
	});
}

var modalErrorMantenimiento = null;
function initModalErrorMantenimiento(){
	modalErrorMantenimiento = new modalesTelcel($('#modal-error-mantenimiento'),{
		onInit : function(){
			$('#modal-error-mantenimiento #btn-aceptar').click(function(){
				modalErrorMantenimiento.closeModal();
			});
		}
	});
}
var gestionEjecutivos = (function(){

	// VARIABLE TEMPORAL PARA GUARDAR LOS ELEMENTOS A DESPHEGAR
	var elementosService = {};

	// ARREGLOS CON CUENTAS/EMPRESAS/GRUPOS

	var currentView = 'mosaico';

	var $currentMainView = null;

	var $mainmosaico = $('.js .group-list-block .mosaico-view');
	var $mainlista = $('.js .lista-view .listado-general');

	var $mainmosaicoP = null;
	var $mainlistaP = null;

	var dataEmpresas = null;
	var dataFiltered = null; //Todos los elementos que se pueden mostrar
	var dataPaginacion = null; //Todos los elementos que se muestran en la paginacion

	var paginacion = null;

	// MODALES
	var formElementsModales = {
		'nuevoAdmin' : {id : '.form-agregar-administrador #form-agregar-administrador', validator : null, sending: false },
		'nuevoAlias' : {id : '.form-agregar-alias #form-agregar-alias', validator : null, sending: false },
		'guardarAdmin' : {id : null, validator : null, sending: false },
		'editarAdmin' : {id : null, validator : null, sending: false },
		'asociarCuentas' : {id : null, validator : null, sending: false },
		'eliminarAlias' : {id : null, validator : null, sending: false },
		'consultarLineas' : {id: null, validator: null, sending: false }
	};

	var modalAgregarAlias = null;
	if($('#modal-agregar-alias').length>0)
		initModalAgregarAlias();

	var modalEliminarAlias = null;
	if($('#modal-eliminar-alias').length>0)
		initModalEliminarAlias();

	var modalAgregarAdmin = null;
	if($('#modal-agregar-administrador').length>0)
		initModalAgregarAdmin();

	var modalIrAdmin = null;
	if($('#modal-ir-a-admin').length>0)
		initModalIrAdmin();

	var modalEditarAdmin = null;
	if($('#modal-editar-administrador').length>0)
		initModalEditarAdmin();

	var modalEliminarAdmin = null;
	if($('#modal-eliminar-admin').length>0)
		initModalEliminarAdmin();

	function removeGeneralError(){
		$('.modal-mte .system-error-msg').remove();
		$('.modal-mte .has-system-error').removeClass('has-system-error');
	}

	function initActionErrorGeneral(){

		$('.modal-mte').on('click', '.system-error-msg #btn-resend-form', function(){
			var $resend = $(this),
			$reform = $('.has-system-error form');
			if($reform.length>0){
				removeGeneralError();
				$reform.submit();
			}
		});

	}

	function initModalEditarAdmin(){
		var $modal = $('#modal-editar-administrador');
		var $formContainer = null;
  		var index = null;
  		var $parent = null;

		modalEditarAdmin = new modalesTelcel($modal,{
			onInit : function(){
				validateFormEditarAdmin();
			},
			onReset : function(){
				removeGeneralError();
				resetFormModal($('.form-editar-administrador #form-editar-administrador'), 'editarAdmin');
			},
			onOpen : function(){
				setElementInfo();
			}
		});

		function setElementInfo(){
	  		var meta = currentModalData;

	  		$modal.find('input[name="email"]').val(meta.administrador.correo);
	  		$modal.find('input[name="nombre"]').val(meta.administrador.nombre);
	  		$modal.find('input[name="lada"]').val(meta.administrador.lada);
	  		$modal.find('input[name="telefono"]').val(meta.administrador.numero);
	  		$modal.find('input[name="extension"]').val(meta.administrador.extension);
	  		$modal.find('input[name="numero"]').val(meta.administrador.lada+meta.administrador.numero);
	  		$modal.find('.alias-txt').html(meta.texto);
		}


		function validateFormEditarAdmin(){

			var $form = $('.form-editar-administrador #form-editar-administrador');

			disableSumbitButton($form, true);
			checkTelefonoLength($form);

			formElementsModales['editarAdmin']['validator'] = $form.validate({
				ignore: "",
				onkeyup:  function(element) { $(element).valid(); },
				rules: {
					email: {
						required: true,
						email: true
					},
					nombre: {
						required: true,
						basicName: true,
						minlength: 3,
						maxlength: 40
					},
					numero : {
						digits: true,
						minlength: 10,
						maxlength: 10,
						required : {
							depends: function(element) {
								var $lada = $form.find('.lada').val(),
								$telefono = $form.find('.telefono').val(),
								$ext = $form.find('.extension').val();

			                	return $lada.length>0 || $telefono.length>0 || $ext.length;
			                }
						}
					},
					extension : {
						digits: true
					},
					checkboxAutorizacionEditar : {
						required: true
					}
				},
				messages: {
					email: {
						required: "Ingresa un correo electrónico.",
						email: "Ingresa un correo electrónico válido."
					},
					nombre: {
						required : "Ingresa el nombre del administrador.",
						basicName: "Este campo solo acepta letras, números, punto y espacios.",
						minlength: "El nombre debe contener al menos 3 caracteres.",
					   	maxlength : "El nombre no debe ser mayor a 40 caracteres."
					},
					numero: {
						required: "Ingresa un número de contacto.",
						digits: "Ingresa un número válido.",
						minlength: "Ingresa un número de 10 dígitos.",
						maxlength: "Ingresa un número de 10 dígitos."
					},
					extension : {
						digits: "Ingresa una extensión válida."
					},
					checkboxAutorizacionEditar: {
						required: "Acepta que se tiene la autorización para usar los datos."
					}
				},
				errorClass : "error-dd error",
				errorPlacement: function(error, $element) {
				   	var $parent = $element.parent();

				   	if($element.attr("name") == "numero"){
				   		$form.find('.lada').addClass('error-dd error');
				   		$form.find('.telefono').addClass('error-dd error');
				   		$parent.append( error );
				   	}
				   	else if( $.inArray( $element.attr("name"), ['checkboxAutorizacionEditar', 'lada', 'telefono']) < 0){
				   		$parent.append( error );
				   	}

				},
				unhighlight: function(element, errorClass, validClass) {

					var $element = $(element);
					if(!$element.hasClass('lada') && !$element.hasClass('telefono') && !$element.hasClass('extension'))
		        		$element.removeClass('error error-dd').addClass('valid');
		        	else{
		        		var $numero = $form.find('.numero');
		        		if($numero.valid()){
				  			$('#numero-error').remove();
				  			$('#lada-error').remove();
				  			$('#telefono-error').remove();
				    		$form.find('.lada').removeClass('error-dd error');
				    		$form.find('.telefono').removeClass('error-dd error');
				  		}
		        	}

		        },
		        highlight : function(element, errorClass){
		        	var $element = $(element);
		        	$element.removeClass('valid').addClass('error error-dd');

		        	if($element.hasClass('numero')){
		        		$form.find('.lada').addClass('error-dd error');
				   		$form.find('.telefono').addClass('error-dd error');
		        	}

		        },
				submitHandler: function(form) {
					if(!formElementsModales['editarAdmin']['sending']){

						formElementsModales['editarAdmin']['sending'] = true;

						$(form).find('button[type="submit"]').prop('disabled', true);

						var self = $(form).serialize();
						var selfArray = $(form).serializeArray();

						generalLoadingIcon(form, true);

						var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

						$.post( postURL , { data: self, related : currentModalData.administrador.id})
						  .done(function( json ) {

						  	var elementData = {
								aliasId : currentModalData.id,
								adminId : currentModalData.administrador.id,
								correo: selfArray[1].value,
								nombre : selfArray[0].value,
								lada : ( typeof selfArray[2].value != 'undefined' ?  selfArray[2].value : null),
								numero : ( typeof selfArray[3].value != 'undefined' ?  selfArray[3].value : null),
								extension : ( typeof selfArray[5].value != 'undefined' ?  selfArray[5].value : null)
							};

						  	Services.gestionEjecutivos.editarAdminSuccessCallback(json, form, elementData, updateEditDataDom );
						  	formElementsModales['editarAdmin']['sending'] = false;
						  	$(form).find('button[type="submit"]').prop('disabled', false);
						  	generalLoadingIcon(form, false);

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	Services.gestionEjecutivos.editarAdminFailCallback(error, form );
						  	formElementsModales['editarAdmin']['sending'] = false;
						  	generalLoadingIcon(form, false);

						});

					}

				}
			});

			checkGeneralValidForm($form);

		}

		function updateEditDataDom(newinfo, $parent){

			var meta = currentModalData;

			meta.administrador.correo = newinfo.correo;
			meta.administrador.lada = newinfo.lada;
			meta.administrador.numero = newinfo.numero;
			meta.administrador.extension = newinfo.extension;
			meta.administrador.nombre = newinfo.nombre;

			$parent.data('meta', meta);

	  		$parent.find('.admin-correo').html(meta.administrador.correo);
	  		$parent.find('.admin-txt').html(meta.administrador.nombre);

	  		if(meta.administrador.numero!='')
	  			$parent.find('.admin-num').html('- ('+meta.administrador.lada+') '+meta.administrador.numero+(meta.administrador.extension!='' ? ' ext. '+meta.administrador.extension : ''));
	  		else
	  			$parent.find('.admin-num').html('');
		}

	}

	function initModalEliminarAdmin(){

		modalEliminarAdmin = new modalesTelcel($('#modal-eliminar-admin'),{
			onInit : function(){
				setModalActions();
				$('#eliminar-admin-confirmacion').hide();
				$('#eliminar-admin-ya-eliminado').hide();
			},
			onReset : function(){
				removeGeneralError();
				$('#modal-eliminar-admin .in-cont-mod').show();
				$('#confirmar-eliminar-admin').show();
			  	$('#eliminar-admin-confirmacion').hide();
			  	$('#eliminar-admin-ya-eliminado').hide();
			},
			onOpen : function(){
				$('.admin-text').html(currentModalData.administrador.nombre)
				$('#eliminar-admin-confirmacion').hide();
				$('#eliminar-admin-ya-eliminado').hide();
			}
		});

		function setModalActions(){
			$('#btn-eliminar-admin').click(function(){
				postSaveDeleteAdmin();
			});

			$('#modal-eliminar-admin').on('click', '.system-error-msg #btn-resend-form', function(){
				var $resend = $(this);
				removeGeneralError();
				$('#btn-eliminar-admin').trigger('click');
			});
		}

		function postSaveDeleteAdmin(){
			var form = '#modal-eliminar-admin .in-cont-mod';

			if(!formElementsModales['editarAdmin']['sending']){

				formElementsModales['editarAdmin']['sending'] = true;
				generalLoadingIcon(form, true);

				var postURL = Services.apiURL.eliminarAdmin();

				$.post( postURL , { delete: currentModalData.administrador.id })
				  .done(function( json ) {
					Services.gestionEjecutivos.eliminarAdminSuccessCallback(json, form, currentModalData, updateDataDom);
				  	formElementsModales['editarAdmin']['sending'] = false;
				  	generalLoadingIcon(form, false);

				  })
				  .fail(function( jqxhr, textStatus, error ) {
				  	Services.gestionEjecutivos.eliminarAdminFailCallback(error, form);
				  	formElementsModales['editarAdmin']['sending'] = false;
				  	generalLoadingIcon(form, false);
				});
			}
		}

		function updateDataDom($parent){

			var meta = currentModalData;

			meta.administrador.correo = "";
			meta.administrador.numero = "";
			meta.administrador.nombre = "";

			$parent.data('meta', meta);

			$parent.find('.admin-info-block').html('<p class="dark-blue"> <span class="no-admin">Sin administrador</span> </p> <p><span class="no-admin-time txt-300">En 30 día(s) se eliminará el alias.</span></p>');

			$parent.find('.settings-ri .first-bloq-ri').prepend('<p class="msg-no-admin"><span class="text"><strong>Sin administrador.</strong> En 30 día(s) se eliminará el alias.</span></p>');

			var $btnEditar = $parent.find('.btn-editar-admin');
			var $btnEliminar = $parent.find('.btn-eliminar-admin');
			var $btnHome = $parent.find('.btn-ir-a-home');
			var $btnCuentas = $parent.find('.btn-asocia-desasocia');

			$('<button class="simple btn-agregar-admin" type="button"> <span class="icon io-AllClients"></span> <span class="in-text-fbr">Agregar administrador</span> </button>').insertAfter($btnEditar);

			$btnEditar.remove();
			$btnEliminar.remove();
			$btnHome.remove();
			$btnCuentas.remove();
		}

	}

	function initModalAgregarAdmin(){
		var $form = $('#modal-agregar-administrador #form-agregar-administrador');
		var $input = $form.find('input[name="email"]');

		$input.bind('input', function(e){
			var $errori = $form.find('.general-error-tooltip');
			if($errori.length>0){
				$input.removeClass('error').removeClass('error-dd');
				$errori.remove();
			}
		});

		modalAgregarAdmin = new modalesTelcel($('#modal-agregar-administrador'),{
			onInit : function(){
				validateFormAddAdmin();
				$('#modal-agregar-administrador .secondary-modal-header').hide();
			},
			onReset : function(){
				removeGeneralError();
				resetFormModal($('.form-agregar-administrador #form-agregar-administrador'), 'nuevoAdmin');
				$('#modal-agregar-administrador .main-modal-header').show();
				$('#modal-agregar-administrador .secondary-modal-header').hide();
			}
		});


		function validateFormAddAdmin(){
			var $form = $('.form-agregar-administrador #form-agregar-administrador');

			disableSumbitButton($form, true);
			checkTelefonoLength($form);

			formElementsModales['nuevoAdmin']['validator'] = $form.validate({
			ignore: "",
				onkeyup:  function(element) { $(element).valid(); },
				rules: {
					email: {
						required: true,
						email: true
					},
					nombre: {
						required: true,
						basicName: true,
						minlength: 3,
						maxlength: 40
					},
					numero : {
						digits: true,
						minlength: 10,
						maxlength: 10,
						required : {
							depends: function(element) {
								var $lada = $form.find('.lada').val(),
								$telefono = $form.find('.telefono').val(),
								$ext = $form.find('.extension').val();

			                	return $lada.length>0 || $telefono.length>0 || $ext.length;
			                }
						}
					},
					extension : {
						digits: true
					},
					checkboxAutorizacionAddAdmin : {
						required: true
					}
				},
				messages: {
					email: {
						required: "Ingresa un correo electrónico.",
						email: "Ingresa un correo electrónico válido."
					},
					nombre: {
						required : "Ingresa el nombre del administrador.",
						basicName: "Este campo solo acepta letras, números, punto y espacios.",
						minlength: "El nombre debe contener al menos 3 caracteres.",
					   	maxlength : "El nombre no debe ser mayor a 40 caracteres."
					},
					numero: {
						required: "Ingresa un número de contacto.",
						digits: "Ingresa un número válido.",
						minlength: "Ingresa un número de 10 dígitos.",
						maxlength: "Ingresa un número de 10 dígitos."
					},
					extension : {
						digits: "Ingresa una extensión válida."
					},
					checkboxAutorizacionAddAdmin: {
						required: "Acepta que se tiene la autorización para usar los datos."
					}
				},errorClass : "error-dd error",
				errorPlacement: function(error, $element) {
				   	var $parent = $element.parent();

				   	if($element.attr("name") == "numero"){
				   		$form.find('.lada').addClass('error-dd error');
				   		$form.find('.telefono').addClass('error-dd error');
				   		$parent.append( error );
				   	}
				   	else if( $.inArray( $element.attr("name"), ['checkboxAutorizacionAddAdmin', 'lada', 'telefono']) < 0){
				   		$parent.append( error );
				   	}

				},
				unhighlight: function(element, errorClass, validClass) {

					var $element = $(element);
					if(!$element.hasClass('lada') && !$element.hasClass('telefono') && !$element.hasClass('extension'))
		        		$element.removeClass('error error-dd').addClass('valid');
		        	else{
		        		var $numero = $form.find('.numero');
		        		if($numero.valid()){
				  			$('#numero-error').remove();
				  			$('#lada-error').remove();
				  			$('#telefono-error').remove();
				    		$form.find('.lada').removeClass('error-dd error');
				    		$form.find('.telefono').removeClass('error-dd error');
				  		}
		        	}

		        },
		        highlight : function(element, errorClass){
		        	var $element = $(element);
		        	$element.removeClass('valid').addClass('error error-dd');

		        	if($element.hasClass('numero')){
		        		$form.find('.lada').addClass('error-dd error');
				   		$form.find('.telefono').addClass('error-dd error');
		        	}

		        },
				submitHandler: function(form) {
					if(!formElementsModales['nuevoAdmin']['sending']){

						formElementsModales['nuevoAdmin']['sending'] = true;
						$(form).find('button[type="submit"]').prop('disabled', true);

						var self = $(form).serialize();
						var selfArray = $(form).serializeArray();

						generalLoadingIcon(form, true);

						var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

						$.post( urlPOST , { data: self, related : currentModalData.id})
						  .done(function( json ) {

							var elementData = {
								aliasId : currentModalData.id,
								correo: selfArray[1].value,
								nombre : selfArray[0].value,
								lada : ( typeof selfArray[2].value != 'undefined' ?  selfArray[2].value : null),
								numero : ( typeof selfArray[3].value != 'undefined' ?  selfArray[3].value : null),
								extension : ( typeof selfArray[5].value != 'undefined' ?  selfArray[5].value : null)
							};

							Services.gestionEjecutivos.agregarAdminSuccessCallback(json, form, elementData, updateAddDataDom );
							formElementsModales['nuevoAdmin']['sending'] = false;
							$(form).find('button[type="submit"]').prop('disabled', false);
						  	generalLoadingIcon(form, false);

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	Services.gestionEjecutivos.agregarAdminFailCallback(error, form );
						  	formElementsModales['nuevoAdmin']['sending'] = false;
						  	generalLoadingIcon(form, false);
						});
					}
				}
			});

			checkGeneralValidForm($form);
		}

		function updateAddDataDom(newinfo, $parent){

			var meta = currentModalData;

			meta.administrador.id = newinfo.id;
			meta.administrador.correo = newinfo.correo;
			meta.administrador.lada = newinfo.lada;
			meta.administrador.numero = newinfo.numero;
			meta.administrador.extension = newinfo.extension;
			meta.administrador.nombre = newinfo.nombre;

			$parent.data('meta', meta);

			$parent.find('.admin-info-block').html('<p class="dark-blue"> <span class="admin-txt txt-300">'+meta.administrador.nombre+'</span> <span class="admin-num txt-300">'+(meta.administrador.numero !='' ? '- ('+meta.administrador.lada+') '+meta.administrador.numero+(meta.administrador.extension!='' ? ' ext. '+meta.administrador.extension : '') : '')+'</span> </p> <p><span class="admin-correo">'+meta.administrador.correo+'</span></p>');

			$parent.find('.msg-admin').remove();

			var $btnAdd = $parent.find('.btn-agregar-admin');

			$('<button class="simple btn-editar-admin" type="button"> <span class="icon io-simple-avatar"></span> <span class="in-text-fbr">Editar administrador</span> </button><button class="simple btn-eliminar-admin" type="button"> <span class="icon  io-Less"></span> <span class="in-text-fbr">Eliminar administrador</span> </button><a class="simple btn-asocia-desasocia" href="consulta-cuentas-2.html"> <span class="icon io-chain"></span> <span class="in-text-fbr">Asociar o quitar cuentas</span> </a><a class="simple btn-ir-a-home" href="ingreso-administrador-2.html"> <span class="icon io-ingresar2"></span> <span class="in-text-fbr">Ingresar como administrador</span> </a>').insertAfter($btnAdd);


			$btnAdd.remove();

		}

	}

	function initModalAgregarAlias(){

		var $form = $('.form-agregar-alias #form-agregar-alias');
		var $input = $form.find('input[name="alias"]');

		$input.bind('input', function(e){
			var $errori = $form.find('.error-nombre-alias');
			if($errori.length>0){
				$input.removeClass('error').removeClass('error-dd');
				$errori.remove();
			}
		});

		modalAgregarAlias = new modalesTelcel($('#modal-agregar-alias'),{
			onInit : function(){
				validateFormAddAlias();
				actionAgregarAdmin();

			},
			onReset : function(){
				removeGeneralError();
			},
			onOpen : function(){
				var $errori = $form.find('.error-nombre-alias');
				$errori.remove();
				resetFormModal($('.form-agregar-alias #form-agregar-alias'), 'nuevoAlias');
			}
		});

		function actionAgregarAdmin(){

			$('.add-admin-mod').click(function(){

				var $agregarAdminSecundario = $('.agregar-administrador-secundario');

				if($agregarAdminSecundario.hasClass('active')){

					$agregarAdminSecundario.find("input[type=text], input[type=email], input[type=password], select").val("");

					$('#form-agregar-alias .required-optional').removeClass('required');

					if($('#form-agregar-alias input[name="alias"]').val().length>0){

						disableSumbitButton($('.form-agregar-alias #form-agregar-alias'), false);
					}

				}

				$agregarAdminSecundario.toggleClass('active');
			});
		}

		function validateFormAddAlias(){

			var $form = $('.form-agregar-alias #form-agregar-alias');

			disableSumbitButton($form, true);
			checkTelefonoLength($form);

			formElementsModales['nuevoAlias']['validator'] = $form.validate({
				ignore: "",
				onkeyup:  function(element) { $(element).valid(); },
				rules: {
					email: {
						required: true,
						email: true
					},
					alias: {
						required: true,
						sinEspacioInicioFin : true,
						minlength: 1,
						maxlength: 50
					},
					nombre: {
						required: true,
						basicName: true,
						minlength: 3,
						maxlength: 40
					},
					numero : {
						digits: true,
						minlength: 10,
						maxlength: 10,
						required : {
							depends: function(element) {
								var $lada = $form.find('.lada').val(),
								$telefono = $form.find('.telefono').val(),
								$ext = $form.find('.extension').val();

			                	return $lada.length>0 || $telefono.length>0 || $ext.length;
			                }
						}
					},
					extension : {
						digits: true
					},
					checkboxAutorizacion : {
						required: true
					}
				},
				messages: {
					email: {
						required: "Ingresa un correo electrónico.",
						email: "Ingresa un correo electrónico válido."
					},
					nombre: {
						required : "Ingresa el nombre del administrador.",
						basicName: "Este campo solo acepta letras, números, punto y espacios.",
						minlength: "El nombre debe contener al menos 3 caracteres.",
					   	maxlength : "El nombre no debe ser mayor a 40 caracteres."
					},
					numero: {
						required: "Ingresa un número de contacto.",
						digits: "Ingresa un número válido.",
						minlength: "Ingresa un número de 10 dígitos.",
						maxlength: "Ingresa un número de 10 dígitos."
					},
					extension : {
						digits: "Ingresa una extensión válida."
					},
					alias: {
						required: "Es necesario ingresar un nombre para el alias.",
					   minlength : "El nombre debe tener al menos 1 caracteres.",
					   sinEspacioInicioFin : "El nombre no debe tener espacio al inicio o final.",
					   maxlength : "El nombre debe tener un máximo de 50 caracteres."
					},
					checkboxAutorizacion: {
						required: "Acepta que se tiene la autorización para usar los datos."
					}
				},
				errorClass : "error-dd error",
				errorPlacement: function(error, $element) {
				   	var $parent = $element.parent();

				   	if($element.attr("name") == "numero"){
				   		$form.find('.lada').addClass('error-dd error');
				   		$form.find('.telefono').addClass('error-dd error');
				   		$parent.append( error );
				   	}
				   	else if( $.inArray( $element.attr("name"), ['checkboxAutorizacion', 'lada', 'telefono']) < 0){
				   		$parent.append( error );
				   	}

				},
				unhighlight: function(element, errorClass, validClass) {

					var $element = $(element);
					if(!$element.hasClass('lada') && !$element.hasClass('telefono') && !$element.hasClass('extension'))
		        		$element.removeClass('error error-dd').addClass('valid');
		        	else{
		        		var $numero = $form.find('.numero');
		        		if($numero.valid()){
				  			$('#numero-error').remove();
				  			$('#lada-error').remove();
				  			$('#telefono-error').remove();
				    		$form.find('.lada').removeClass('error-dd error');
				    		$form.find('.telefono').removeClass('error-dd error');
				  		}
		        	}

		        },
		        highlight : function(element, errorClass){
		        	var $element = $(element);
		        	$element.removeClass('valid').addClass('error error-dd');

		        	if($element.hasClass('numero')){
		        		$form.find('.lada').addClass('error-dd error');
				   		$form.find('.telefono').addClass('error-dd error');
		        	}

		        },
				submitHandler: function(form) {

					if(!formElementsModales['nuevoAlias']['sending']){

						formElementsModales['nuevoAlias']['sending'] = true;
						$(form).find('button[type="submit"]').prop('disabled', true);

						var self = $(form).serialize();
						var selfArray = $(form).serializeArray();

						generalLoadingIcon(form, true);

						var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

						$.post( urlPOST , { data: self})
						  .done(function( json ) {

						  	var elementData = {
						  		'input' : $input,
								'texto' : selfArray[0].value,
								'admin' :{
									'nombre' : selfArray[1].value,
									'correo' : selfArray[2].value,
									'lada' : ( typeof selfArray[3].value != 'undefined' ?  selfArray[3].value : null),
									'numero' : ( typeof selfArray[4].value != 'undefined' ?  selfArray[4].value : null),
									'extension' : (typeof selfArray[6].value != 'undefined' ? selfArray[6].value : null)
								}
							};

							Services.gestionEjecutivos.agregarAliasSuccessCallback(json, form, elementData, addCreatedElementToHTML );
						  	formElementsModales['nuevoAlias']['sending'] = false;
						  	generalLoadingIcon(form, false);

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	Services.gestionEjecutivos.agregarAliasFailCallback(error, form );
						  	formElementsModales['nuevoAlias']['sending'] = false;
						  	generalLoadingIcon(form, false);
						});

					}

				}
			});

			checkGeneralValidForm($form);
		}

		function addCreatedElementToHTML(id, meta){

			var html = '<div class="col-xs-6 col-sm-6 col-md-4 item-mv"><div class="group-block" id="alias-'+meta.id+'" data-item = "{&quot;id&quot;: &quot;'+meta.id+'&quot; ,&quot;texto&quot;: &quot;'+meta.texto+'&quot;, &quot;lineas&quot; : &quot;0&quot;, &quot;administrador&quot; : { &quot;id&quot; : &quot;'+meta.administrador.id+'&quot;, &quot;nombre&quot; : &quot;'+meta.administrador.nombre+'&quot;, &quot;correo&quot; : &quot;'+meta.administrador.correo+'&quot;, &quot;lada&quot; : &quot;'+meta.administrador.lada+'&quot;, &quot;numero&quot; : &quot;'+meta.administrador.numero+'&quot;, &quot;extension&quot; : &quot;'+meta.administrador.extension+'&quot;}}"> <div class="header-group flexbox clearfix"> <div class="ribbon flexbox"> <span class="icon io-City col-sm-2 left-icon-ri"></span> <div class="flexbox v-align-center col-sm-10 name-container"> <strong class="ribbon-content col-sm-10">'+meta.texto+'</strong> <input type="text" value="'+meta.texto+'" name="editar-alias" class="editar-alias" maxlength="50"/> <button class="simple edit-name-ri col-sm-2 btn-guardar-nombre" title="Guardar Nombre"><span class="icon io-save-doc"></span></button> <button class="simple edit-name-ri col-sm-2 btn-editar-nombre" title="Editar Nombre"><span class="icon io-Admin"></span></button> </div> </div> <div class="icon-container flexbox v-align-center"> <button class="btn-gear simple" title="Configuración"> <span class="icon io-Gear"></span> </button> </div> <div class="col-sm-12 settings-ri"> <div class="col-sm-12 cont-set-ri"> <p class="col-sm-12 title-ri"> <span class="in-text-ri">Configuración</span> <button class="simple icon-text-ri" title="Cerrar"> <span class="icon io-Close"></span> </button> </p> <div class="col-sm-12 title-mod"> <span class="icon io-City col-xs-2 left-icon-ri"></span> <p class="title-ribon-sri">'+meta.texto+'</p> </div> <div class="col-sm-12 submenu-ri"> <div class="first-bloq-ri"> <button class="simple btn-editar-nombre hide-mobile" type="button"> <span class="icon io-Admin"></span> <span class="in-text-fbr">Cambiar nombre</span> </button> <button class="simple btn-editar-admin" type="button"> <span class="icon io-simple-avatar"></span> <span class="in-text-fbr">Editar administrador</span> </button> <button class="simple btn-eliminar-admin" type="button"> <span class="icon  io-Less"></span> <span class="in-text-fbr">Eliminar administrador</span> </button> <a class="simple" href="consulta-cuentas-2.html"> <span class="icon io-chain"></span> <span class="in-text-fbr">Asociar o quitar cuentas</span> </a> <a class="simple btn-ir-a-home" href="ingreso-administrador-2.html"> <span class="icon io-ingresar2"></span> <span class="in-text-fbr">Ingresar como administrador</span> </a> <button class="simple btn-eliminar-alias" type="button"> <span class="icon io-Bin"></span> <span class="in-text-fbr">Eliminar alias</span> </button> </div> <div class="second-bloq-ri"> <a class="simple" href="estados-cuenta-1.html#alias-2"> <span class="icon io-Contract"></span> <span class="in-text-fbr">Estados de cuenta</span> </a> <a class="simple" href="reportes-1.html#alias-2"> <span class="icon io-TutsGuias"></span> <span class="in-text-fbr">Reportes</span> </a> <a class="simple" href="historial-1.html#alias-2"> <span class="icon io-bitacora"></span> <span class="in-text-fbr">Historial de movimientos</span> </a> <a class="simple" href="descargas-1.html"> <span class="icon io-download-mte"></span> <span class="in-text-fbr">Descargas</span> </a> </div> </div> </div> </div> </div> <div class="body-group"> <div class="group-total"> <div class="row desc-imv"> <div class="col-sm-12 details-desc-imv"> <p>0</p> <span>líneas</span> </div></div> </div> <div class="col-xs-12 extend-imv admin-info-block"> <p class="dark-blue"> <span class="admin-txt txt-300">'+meta.administrador.nombre+'</span> <span class="admin-num txt-300">'+(meta.administrador.numero != '' ? '- ('+meta.administrador.lada+') '+meta.administrador.numero+(meta.administrador.extension!='' ? ' ext. '+meta.administrador.extension : '') : ''  )+'</span> </p> <p><span class="admin-correo">'+meta.administrador.correo+'</span></p> </div> </div> </div></div>';

			$('#main-view-block .mosaico-view').append(html);

		}

	}

	function initModalEliminarAlias(){

		modalEliminarAlias = new modalesTelcel($('#modal-eliminar-alias'),{
			onInit : function(){
				setModalActions();
				$('#eliminar-alias-pre-confirmacion').hide();
				$('#eliminar-alias-confirmacion').hide();
				$('#eliminar-alias-ya-eliminado').hide();
			},
			onReset : function(){
				removeGeneralError();
				$('#modal-eliminar-alias .in-cont-mod').show();
				$('#confirmar-eliminar-alias').show();
				$('#eliminar-alias-pre-confirmacion').hide();
			  	$('#eliminar-alias-confirmacion').hide();
			  	$('#eliminar-alias-ya-eliminado').hide();
			},
			onOpen : function(){

			}
		});

		function setModalActions(){

			$('#btn-pre-eliminar-alias').click(function(){
				showPreConfirmDeleteAlias();
			});

			$('#btn-eliminar-alias').click(function(){
				postSaveDeleteAlias();
			});

			$('#modal-eliminar-alias').on('click', '.system-error-msg #btn-resend-form', function(){
				var $resend = $(this);
				removeGeneralError();
				$('#btn-eliminar-alias').trigger('click');
			});
		}

		function showPreConfirmDeleteAlias(){
			$('#confirmar-eliminar-alias').hide();
			$('#eliminar-alias-pre-confirmacion').show();

		}

		function postSaveDeleteAlias(){
			var form = '#modal-eliminar-alias .in-cont-mod';

			if(!formElementsModales['eliminarAlias']['sending']){

				formElementsModales['eliminarAlias']['sending'] = true;

				generalLoadingIcon('#modal-eliminar-alias .in-cont-mod', true);

				var postURL = Services.apiURL.eliminarAlias();

				$.post( postURL , { delete: currentModalData.id })
				  .done(function( json ) {
				  	Services.gestionEjecutivos.eliminarAliasSuccessCallback(json, form, currentModalData );
				  	formElementsModales['eliminarAlias']['sending'] = false;
				  	generalLoadingIcon('#modal-eliminar-alias .in-cont-mod', false);

				  })
				  .fail(function( jqxhr, textStatus, error ) {
				  	//Mensaje de error del sistema
				  	Services.gestionEjecutivos.eliminarAliasFailCallback(error, form);
				  	formElementsModales['eliminarAlias']['sending'] = false;
				  	generalLoadingIcon('#modal-eliminar-alias .in-cont-mod', false);
				});
			}
		}

	}

	function initModalIrAdmin(){
		var loadingContainer = $('#modal-ir-a-admin .form-ge-mod');

		modalIrAdmin = new modalesTelcel($('#modal-ir-a-admin'),{
			onInit : function(){
				setModalActions();
				$('#redirect-txt').hide();
			},
			onReset : function(){
				generalLoadingIcon(loadingContainer, false);
				$('#redirect-txt').hide();
			},
			onOpen : function(){
				$('#modal-ir-a-admin .alias-text').html(currentModalData.texto);
			},
			onClose : function(){

				//Cuando cierre el modal si quieren hacer refresh hay que descomentar esto
				// if(processCompleted)
				// 	location.reload();
			}
		});


		function setModalActions(){
			$('#btn-acceder-admin').click(function(){
				sendToVistaAdmin();
			});
		}

		function sendToVistaAdmin(){
			$('#redirect-txt').show();
			generalLoadingIcon(loadingContainer, true);
			window.location.href="ingreso-administrador-2.html";
		}

	}

	function resetFormModal($form, form){
		$form.find('.general-error-tooltip').remove();
		$form.find("input[type=text], input[type=number], input[type=email], input[type=password], select").val("");
		$form.find("input[type='checkbox']").prop('checked', false);
		$form.find("input[type=text], input[type=number], input[type=email], input[type=password], select, input[type=checkbox]").removeClass("error").removeClass("error-dd");
		$form.find('button[type="submit"]').prop('disabled', true);
		$form.removeClass('success').removeClass('error').show();

		if(formElementsModales[form]['validator']){
			formElementsModales[form]['validator'].resetForm();
		}
	}


	//Variable que guarda la Data de la Cuenta/Grupo/Alias/Línea a Editar
	var modalCurrentData = {};

	// FIN MODALES


	function init(){
		setView();

		if($('.general-group-options-container').length>0)
			setConfigInfo();

		setActions();
	}

	function setConfigInfo(){
		var itemData = $('.general-group-options-container').data('item');
		$('.main-group-text').html(itemData.texto);
	}

	function setActionsGenerales(){

		initActionErrorGeneral();
		/**
			Mostrar/Ocultar tablas
		**/
		$('.collapse-table-block').on('click', '.hide-show-table', function(e){
			var table = ( typeof $(this).data('table') != 'undefined' ? $(this).data('table') : null );

			if(table!=null){
				var text = $(this).text();
				var newtext = (text == "Mostrar detalle" ? "Ocultar detalle" : "Mostrar detalle");

				if($(this).hasClass('filtros'))
					newtext = (text == "Mostrar filtros" ? "Ocultar filtros" : "Mostrar filtros");

    			$(this).text( newtext );

				$(table).slideToggle( 500 )
			}
		});

		// MOSTRAR OPCIONES DE CONFIGURACIÓN
		$('.group-list-block').on('click', '.btn-gear', function(e){
			e.stopPropagation();
			cancelEditName();
			var $element = $(this).closest('.group-block');
			$('.group-block').removeClass('active');
			$('.general-group-options-container').removeClass('active');

			$('body').addClass('settings-open');
			$element.addClass('active');
		});

		// ESCONDER OPCIONES DE CONFIGURACIÓN
		$('.group-list-block').on('click', '.icon-text-ri', function(e){
			e.stopPropagation();
			var $element = $(this).closest('.group-block');
			$element.removeClass('active');
		});

		// ESCONDER OPCIONES DE CONFIGURACIÓN GENERAL
		$('.general-group-options-container').on('click', '.icon-text-ri', function(e){
			e.stopPropagation();
			cancelEditName();
			var $element = $('.general-group-options-container');
			$element.removeClass('active');
		});

		$('.general-group-options-container').on('click', '.btn-open-general-config', function(e){
			e.stopPropagation();
			cancelEditName();
			var $element = $('.general-group-options-container');
			$('.group-block').removeClass('active');
			$('.row-ls').removeClass('active-settings');

			$('body').addClass('settings-open');
			$element.addClass('active');

			if(is_mobile())
				$('body').addClass('fixed-body');
		});

		$('body').on('click', '.settings-ri', function(e){
			if(is_mobile()){
				e.stopPropagation();
				$('.general-group-options-container').removeClass('active');
				$('.group-block').removeClass('active');
				$('.row-ls').removeClass('active-settings');
				$('.settings-ri').removeClass('active');
				//$('body').removeClass('fixed-body');
				$('body').removeClass('settings-open');
			}
		});

		// FUNCIONAMIENTOS LISTADO DE RESULTADOS
		$('.lista-results .settings-ico-ls, .group-list-settings .settings-ico-ls').on('click', 'button', function(e){
			e.stopPropagation();
			var $element = $(this).closest('.row-ls');
			$('.general-group-options-container').removeClass('active');
			$('.row-ls, .group-list-settings .settings-ico-ls').removeClass('active-settings');

			$('body').addClass('settings-open');
			$element.addClass('active-settings');
		});

		$('.lista-results, .group-list-settings').on('click', '.icon-text-ri', function(){
			var $element = $(this).closest('.row-ls');
			$element.removeClass('active-settings');
		});

		$('.lista-results .arrow-ico-ls, .group-list-settings .arrow-ico-ls').on('click', 'button', function(){
			var $element = $(this).closest('.row-ls');

			if($element.hasClass('active-ls')){
				$element.removeClass('active-ls');
				$(this).find('span').removeClass('i-angle-up');
			}
			else{
				if(is_mobile())
				{
					$('.lista-results .row-ls, .group-list-settings .row-ls').removeClass('active-ls');
					$('.lista-results .arrow-ico-ls span, .group-list-settings .arrow-ico-ls span').removeClass('i-angle-up');
				}
				$element.addClass('active-ls');
				$(this).find('span').addClass('i-angle-up');
			}


		});

		$('.manage-particular-options').on('click', '.btn-show-mpo', function(){
			var $element = $(this).closest('.manage-particular-options');
			$element.toggleClass('active');
			$(this).find('.icon').toggleClass('i-angle-up');
		});


		//FIN FUNCIONAMIENTOS LISTADO DE RESULTADOS

		// CAMBIAR A VISTA MOSAICO
		$('body').on('click', '#vista-mosaico', function(){
			currentView = 'mosaico';
			cancelEditName();
			$('#vista-mosaico').removeClass('active');
			$('#vista-lista').addClass('active');
			$('#main-view-block').removeClass('group-row-block').addClass('group-list-block');
		});

		// CAMBIAR A VISTA LISTA
		$('body').on('click', '#vista-lista', function(){
			currentView = 'lista';
			cancelEditName();
			$('#vista-lista').removeClass('active');
			$('#vista-mosaico').addClass('active');
			$('#main-view-block').removeClass('group-list-block').addClass('group-row-block');
		});

		//ABRIR MODAL AGREGAR ALIAS
		$('body').on('click', '.btn-add-alias', function(){
			cancelEditName();
			modalAgregarAlias.openModal();
		});

		// ABRIR MODAL EDITAR ADMIN
		$('body').on('click', '.btn-editar-admin', function(){
			var $element = $(this).closest('.group-block');
			setBasicInfoModal($element.data('item'));
			modalEditarAdmin.openModal();
		});

		/**Abrir modal Eliminar Admin**/
		$('body').on('click', '.btn-eliminar-admin', function(e){
			var $element = $(this).closest('.group-block');
			setBasicInfoModal($element.data('item'));
			modalEliminarAdmin.openModal();
		});


		// ABRIR MODAL agregar admin
		$('body').on('click', '.btn-agregar-admin', function(){
			var $element = $(this).closest('.group-block');
			setBasicInfoModal($element.data('item'));
			modalAgregarAdmin.openModal();
		});

	}

	function setBasicInfoModal(item){
		currentModalData = item;
		$('.modal-mte .alias-text, .modal-mte .txt-grupo').html(item.texto);
	}

	function setBasicInfoParent(item){
		var itemData = item;
		$('.parent-text').html(itemData.texto);
	}

	function getElementId($element, selector){
		var id = $element.data('eid');
		var el = document.querySelector(selector);
		el.setAttribute('data-modaleid', id);
		return id;
	}


	function setActionsConfiguracion(){

		$('.settings-ri .submenu-ri').on('click', 'button', function(){
			$('.group-block').removeClass('active');
		});

		// ABRIR EL CUENTAS ASOCIADAS
		$('body').on('click', '.btn-cuentas-asociadas', function(){

			var $element = ($(this).closest('.group-block').length>0 ? $(this).closest('.group-block') : ($(this).closest('.row-ls').length>0 ? $(this).closest('.row-ls') : $(this).closest('.general-group-options-container')));
			setBasicInfoModal($element.data('item'));
			modalCuentasAsociadas.openModal();

		});

		// ABRIR ELIMINAR ALIAS
		$('body').on('click', '.btn-eliminar-alias', function(){
			var $element = ($(this).closest('.group-block').length>0 ? $(this).closest('.group-block') : ($(this).closest('.row-ls').length>0 ? $(this).closest('.row-ls') : $(this).closest('.general-group-options-container')));
			setBasicInfoModal($element.data('item'));
			modalEliminarAlias.openModal();
		});

		// ABRIR EL ELIMINAR GRUPO
		$('body').on('click', '.btn-ir-a-home', function(e){
			e.preventDefault();
			var $element = ($(this).closest('.group-block').length>0 ? $(this).closest('.group-block') : ($(this).closest('.row-ls').length>0 ? $(this).closest('.row-ls') : $(this).closest('.general-group-options-container')));
			setBasicInfoModal($element.data('item'));

			var parentData = $element.data('parent');

			if(typeof parentData =='undefined'){
				$parent = $('#group-data-info');
				parentData = $element.data('item');
			}

			setBasicInfoParent(parentData);
			modalIrAdmin.openModal();
		});

	}

	var editandoNombre = false,
	$closestGuardarElement = null,
	$closestEditarBtn = null,
	editandoNombreValor = null;


	function checkActiveElementEditName($element){
		return (
			$element.hasClass('name-container') && $element.hasClass('name-container')
			|| $($element).parents('.ribbon').length
			|| ($element.hasClass('error-tooltip')
				|| $element.parent().hasClass('error-tooltip'))
		);
	}

	function cancelEditName(){
		editandoNombre = false;
		var $elementos_activos = $('.group-block .name-container.active-edit');
		returnEditaNamePreviousValue($elementos_activos);

		$('.group-block').find('.name-container').removeClass('active-edit');
	}

	function returnEditaNamePreviousValue($elementos_activos){
		if($elementos_activos.length>0){
			//alert('Editando');

			for (var i = 0; i < $elementos_activos.length; i++) {
				var nombre_anterior = $($elementos_activos[i]).find('strong.ribbon-content').html();
				$($elementos_activos[i]).find('.editar-alias').val(nombre_anterior)
					//Remover errores - revisar la mejor forma de hacerlo con el Valid de jquery
					.removeClass('error');
				$($elementos_activos[i]).parent().parent().parent().find('.triangle-tooltip').hide();
			}

		}
	}

	function checkElementToEdit(){
		editandoNombre = false;
		if($closestEditarBtn!=null){
			$closestEditarBtn.find('.name-container').addClass('active-edit');
			editandoNombre = true;
			editandoNombreValor = $closestEditarBtn.find('input.editar-alias').val();
			$closestGuardarElement = $closestEditarBtn.closest('.group-block').find('.btn-guardar-nombre');
			$closestEditarBtn = null;
		}
	}

	function setActionsEditName(){

		// EDITAR NOMBRE EN MOSAICO
		$('.group-list-block').on('click', '.btn-editar-nombre', function(e){
			e.stopPropagation();
			var $element = $(this).closest('.group-block');

			if(!editandoNombre){
				$element.find('.name-container').addClass('active-edit');
				editandoNombre = true;
				$closestGuardarElement = $element.closest('.group-block').find('.btn-guardar-nombre');
				$closestEditarBtn = null;
				editandoNombreValor = $element.find('input.editar-alias').val();
			}
			else{
				$closestGuardarElement.prop('disabled', false);
				$closestGuardarElement.trigger('click');
				$closestEditarBtn = $element;
			}

		});

		// GUARDAR NOMBRE EN MOSAICO
		$('.group-list-block').on('click', '.btn-guardar-nombre', function(e){
			e.stopPropagation();
			var $element = $(this).closest('.group-block');
			verifyName($element);
		});

		$('.group-list-block').on('keydown','.editar-alias', function (e) {
		    var $input = $(this);
		    var $errori = $('.error-tooltip.nombre-error');

			if($errori.length>0){
				$input.removeClass('error').removeClass('error-dd');
				$errori.remove();
			}

		    if (e.keyCode === 13) { //Si es enter
		        var $element = $(this).closest('.group-block');
				verifyName($element);
		    }
		});

		$('.group-list-block .editar-alias').bind('keyup', function (e) {
			var $input = $(this);
			validateNameOnInput($input);
		});


	}


	function setActions(){
		setActionsGenerales();
		setActionsEditName();
		setActionsFilter();
		setActionsConfiguracion();

	}

	function setActionsFilter(){

		$('#orderby-gestiongrupos').click(function(){
			cancelEditName();
		});

		$('#orderby-gestiongrupos').change(function(){
			cancelEditName();
			var opciones = $(this).find(":selected").data('value');
			var $main = $(".mosaico-view");
			var $children = $main.children(".item-mv");
			orderItemsE(opciones, $main, $children, '.group-block');
		});

	}

	function orderItemsE(opc, $main, $children, element){
		$children.detach().sort(function(a, b) {

			if(typeof element!= 'undefined'){
			   var aData = $(a).find(element).data('item');
			   var bData = $(b).find(element).data('item');
			}
			else{
				var aData = $(a).data('item');
				var bData = $(b).data('item');
			}

		   if(opc.key != 'texto' && opc.key != 'responsable' && opc.key != 'asignado' && opc.key != 'titular')
		  		return Number(aData[opc.key]) > Number(bData[opc.key]) ? 1 : -1;
		  	else
		  		return aData[opc.key] > bData[opc.key] ? 1 : -1;

		});

		if(opc.orderby == 'desc')
			$main.append($children.get().reverse());
		else
			$main.append($children);

		// opc.key
		// opc.orderby
	}

	function orderItemsModal(opc, elementos){
		var dataOrdered = elementos;

		if(opc.type == 'string')
			dataOrdered = sortByAZ(dataOrdered, opc.key);
		else if(opc.type == 'int')
			dataOrdered = sortByNumber(dataOrdered, opc.key);
		else
			dataOrdered = sortByAZ(dataOrdered, opc.key, true);

		if(opc.orderby == 'desc')
			dataOrdered.reverse();

		return dataOrdered;
	}

	function setView(){
		if($('#edit-cuentas-table').length>0)
			initConfigurarCuentas();

	}

	function initConfigurarCuentas(){
		var $listaCuentas = $('#edit-cuentas-table .table-main-block');

		var dataListadoCuentasAsociadas = [];
		var allChecked = false;
		initAliasName();
		setActions();

		generarListadoConfirmacionInicial();

		function initAliasName(){
			var $aliasData = $('#alias-data-info');
			var aliasData = $aliasData.data('item');

			if(typeof aliasData != 'undefined'){
				$('.alias-text').html(aliasData.texto);
			}

		}

		function setActions(){
			/**
				Ordenar elementos de listado de líneas
			**/
			$('.has-filters .order-by-query-btn').on('click', 'button', function(e){

				var opciones = ( typeof $(this).data('opc') != 'undefined' ? $(this).data('opc') : null );

				if(opciones!=null){
					orderItemsQuery(opciones);
				}


			});

			$('#search-by-cuentas-block').on('click', '#btn-search-cuentas', function(){

				var index = $('#search-by-cuentas-block').data('searchi');
				var $select = $('#search-by-cuentas-block').find('select[name="searchby"]');
				var opc = $select.find(':selected').data('value');

				var query = '?'+opc.key+'='+currentSearch[index];
				searchItemsQuery(query);
			});

			/**Botón Abrir modal desasociar**/
			$('#listado-check-all-container').on('click', '#btn-desasociar-cuentas', function(e){
				if(modalDesasociarConfirmar!=null)
					modalDesasociarConfirmar.openModal();
			});


			/**Botón abrir modal para asociar cuentas**/
			$('#gestion-ejecutivos-view').on('click', '.btn-add-cuentas', function(e){
				if(modalAsociarCuentas!=null)
					modalAsociarCuentas.openModal();
			});



			/**Acciones Checkbox**/
			if($('#edit-cuentas-table').length>0){
				generalCheckBoxAll.inicializar();
			}

		}

		function generarListadoConfirmacionInicial(){

			var $elements = $listaCuentas.find('.linea-batch');
			var total = $elements.length;

			$elements.each(function (index, value) {
			  var meta = ( typeof $(this).data('meta') != 'undefined' ? $(this).data('meta') : null );
			  var $element = $(this);

				if(meta != null){
					var elemento = generarHTMLCuentasAsociadas(meta, index);
					$element.html(elemento);
					dataListadoCuentasAsociadas.push(meta);

					// bindElementActions();

				}
			});
		}

		function generarListadoConfirmacion(){

			$listaCuentas.html('');

			$.each(dataListadoCuentasAsociadas, function (index, data) {
				if(!data.eliminado)

					var elemento = '';

						$.when (elemento = ($mainReactivacion.length>0 ? generarHTMLReactivacion(data, index) : ($mainCambio.length>0 ? generarHTMLCambio(data, index) : ($mainFacturacion.length>0 ? ( $mainFacturacion.hasClass('reporte-lineas') ?
						generarHTMLFacturacionLineas(data, index) : ($mainFacturacion.hasClass('reporte-facturas') ? generarHTMLFacturacionFacturas(data, index) :generarHTMLFacturacion(data, index) ) ) : generarHTMLSuspension(data, index))) )).done(function(){

							$listaconfirmar.append('<div class="col-sm-12 center-block flexbox h-align-center linea-batch '+elemento.additionalClass+'">'+elemento.html+'</div>');

							bindElementActions();
						});
			});


		}

		function generarHTMLCuentasAsociadas(meta, index){

			var html = '';

			html = '<div class="col-sm-12 col-xs-12 content-item-block"><div class="col-sm-1 col-xs-2 checkbox-container flexbox h-align-center"> <input type="checkbox" id="i-'+meta.id+'" name="i-'+meta.id+'" value="'+meta.id+'" data-index="0"> <label for="i-'+meta.id+'"><span class="check-sq"></span></label> </div><div class="col-sm-11 col-xs-10 cuentas-asociadas-info"><div class="col-sm-2 col-xs-12"><label class="hidden-sm hidden-md hidden-lg">Región:</label><p title="'+meta.region+'">'+meta.region+'</p></div><div class="col-sm-3 col-xs-12 flexbox cuenta-container"><p class="flexbox v-align-center"><span class="icon '+(meta.tipo == 1 ? 'io-City' : 'io-simple-avatar')+'" title="'+(meta.tipo == 1 ? 'Cuenta padre' : 'Cuenta hija')+'"></span><span title="'+meta.cuenta+'">'+meta.cuenta+'</span></p></div><div class="col-sm-3 col-xs-12"><p title="'+meta.rfc+'">'+meta.rfc+'</p></div><div class="col-sm-3 col-xs-12"><p title="'+meta.razonsocial+'">'+meta.razonsocial+'</p></div></div></div>';

			return html;

		}

		var modalDesasociarConfirmar = null;
		if($('#modal-desasociar-cuentas').length>0)
			initModalDesasociarConfirmar();

		function initModalDesasociarConfirmar(){

			modalDesasociarConfirmar = new modalesTelcel($('#modal-desasociar-cuentas'),{
				onInit : function(){
					setModalActions();
					$('#desasociar-cuentas-confirmacion').hide();
					$('#confirmar-desasociar-cuentas').show();

				},
				onReset : function(){
					$('#desasociar-cuentas-confirmacion').hide();
					$('#confirmar-desasociar-cuentas').show();
				},
				onOpen : function(){
					var elementos = generalCheckBoxAll.getCheckedElements();
					var total = elementos.total;
					$('#confirmar-desasociar-cuentas .total-cuentas').html(total);
				}
			});

			function setModalActions(){
				$('#btn-desasociar').click(function(){
					postDesasociar();
				});
			}

			function postDesasociar(){
				var form  = '#modal-desasociar-cuentas .in-cont-mod';
				var data = { success: false, data: [] };

				if(!formElementsModales['asociarCuentas']['sending']){

					formElementsModales['asociarCuentas']['sending'] = true;

					generalLoadingIcon(form, true);

					var desasociar = generalCheckBoxAll.getCheckedElements();

					var postURL = Services.apiURL.quitarCuentas();

					$.post( postURL , { data: desasociar })
					  .done(function( json ) {

					  	Services.gestionEjecutivos.quitarCuentasSuccessCallback(json, form, desasociar.all, resetBlock);
					  	formElementsModales['asociarCuentas']['sending'] = false;
					  	generalLoadingIcon(form, false);

					  })
					  .fail(function( jqxhr, textStatus, error ) {
					  	Services.gestionEjecutivos.quitarCuentasFailCallback(error, form);
					  	formElementsModales['asociarCuentas']['sending'] = false;
					  	generalLoadingIcon(form, false);
					});
				}
			}

			function resetBlock(){
				//INIT RESET
		  		$('.listado-select-all-block').removeClass('active');
		  		allChecked = false;
		  		// $('#checkbox-all').prop('checked', false);
		  		// $('#btn-desasociar-cuentas').prop('disabled', true);
		  		checkErrorMessage();
				// FIN RESET
			}


			function checkErrorMessage(){
				if($('#listado-cuentas .linea-batch').length == 0){
					$('#sin-cuentas-asociadas').removeClass('hidden');
					$('.ct-pagination').addClass('hidden');
				}
			}

		}

		var _modalCuentasAuxiliar = {};
		var modalCuentasAuxiliar = null;
		initModalCuentasAuxiliar();

		function initModalCuentasAuxiliar(){

			modalCuentasAuxiliar = new modalesTelcel($('#modal-cuentas-auxiliar'),{
				onInit : function(){
					initActionsModalAuxiliar();
				},
				onReset : function(){
					//resetModalAsociarCuentas();
				},
				onOpen : function(){
					updateModalData();
				}
			});

			function initActionsModalAuxiliar(){
				$('.modal-mte').on('click', '.show-md-aux-info', function(){
					_modalCuentasAuxiliar = $(this).data('info');
					modalCuentasAuxiliar.openModal();
				});

				$('body').on('click', '#modal-cuentas-auxiliar.active-up-black', function(e){
					e.preventDefault();
					$(this).removeClass('active-up-black').removeClass('active');
				});
			}

			function updateModalData(){

				$('#modal-cuentas-auxiliar .rfc-txt').html(_modalCuentasAuxiliar.rfc);

				$('#modal-cuentas-auxiliar .razonsocial-txt').html(_modalCuentasAuxiliar.razonsocial);

				$('#modal-cuentas-auxiliar .cuenta-txt').html(_modalCuentasAuxiliar.cuenta);

				$('#modal-cuentas-auxiliar').addClass('active-up-black');
			}

		}

		var _modalAsociarCuentas = {};
		var modalAsociarCuentas = null;
		if($('#modal-asociar-cuentas').length>0)
			initModalAsociarCuentas();

		function initModalAsociarCuentas(){
			var $modal = $('#modal-asociar-cuentas');
			var cuentasAsociadas = [];
			var allCheckedModal = false;

			_modalAsociarCuentas = {
				container: '#modal-asociar-cuentas',
				paginacion : null,
				modal : null,
				data : [],
				dataPaginacion : [],
				postData : [],
				postDataTemporal : []
			};

			modalAsociarCuentas = new modalesTelcel($('#modal-asociar-cuentas'),{
				onInit : function(){
					initActionsModalAsociarCuentas();
				},
				onReset : function(){
					resetModalAsociarCuentas();
				},
				onOpen : function(){
					resetModalAsociarCuentas();
					setBuscador();
					//updateModalAsociarData('');
				}
			});

			_modalAsociarCuentas['paginacion'] = new PaginacionTelcel(_modalAsociarCuentas['data'], {
				itemsPerPage : 10,
				paginationControlsContainer: '#modal-asociar-cuentas .pagination-block',
				onPageClick : function(data){
					setOnActionsModalAC(data);
				},
				onInit : function(data){
					setOnActionsModalAC(data);
				},
				onReset : function(data){
					setOnActionsModalAC(data);
				}
			});

			function confirmarAsociarCuentas(){
				$('#modal-asociar-cuentas #paso-1').hide();

				var asociadas = []
				var html = '';

				$.each(_modalAsociarCuentas['postData'] , function( index, elemento ) {
					if(_modalAsociarCuentas['postDataAsociada']['c-'+elemento])
						asociadas.push(elemento);
				});

				if(asociadas.length>0){
					$('#modal-asociar-cuentas #paso-2').show();
					$.each(asociadas , function( index, elemento ) {
						html+= '<strong>'+elemento+'</strong>';

						if(index==asociadas.length-2)
							html+= ' y ';
						else
							html+=', ';

					});

					$('#modal-asociar-cuentas #paso-2 #cuentas-ya-asociadas').html(html);
					$('#modal-asociar-cuentas #notif-robo').removeClass('hidden');
				}
				else{
					$('#modal-asociar-cuentas #paso-3').show();
					$('#modal-asociar-cuentas #notif-robo').addClass('hidden');
				}

			}

			function initActionsModalAsociarCuentas(){

				onCheckboxModalAsociar();
				setActionsSearch();
				// SEARCH
				$('#modal-asociar-cuentas').on('click', '#btn-search-cuentas-aso', function(){
					var $select = $(this).parent().parent('.search-by-container').find('select[name="searchby"]');
					var opc = $select.find(':selected').data('value');
					getModalAsociarData(currentSearch, opc.key);
				});


				$('#modal-asociar-cuentas').on('click', '#btn-show-confirmacion', function(){
					confirmarAsociarCuentas();
				});

				$('#modal-asociar-cuentas').on('click', '#btn-submit-cuentas', function(){
					postDataAsociarCuentas();
				});

				$('#modal-asociar-cuentas').on('click', '#btn-regresar', function(){
					$('#paso-2').hide();
					$('#paso-1').show();
				});

				$('#modal-asociar-cuentas .order-by-modal').on('click', 'button', function(){
					var opciones = $(this).data('opc');

					_modalAsociarCuentas['data'] = orderItemsModal(opciones, _modalAsociarCuentas['data']);

					_modalAsociarCuentas['paginacion'].updateItems(_modalAsociarCuentas['data']);

					_modalAsociarCuentas['dataPaginacion'] =_modalAsociarCuentas['paginacion'].showPage(1);

					generarListadoAsociarCuentas(_modalAsociarCuentas['dataPaginacion']);
				});

				$('#modal-asociar-cuentas').on('click', '.btn-limpiar-filtro-asoc', function(){
					resetModalAsociarCuentas();
				});

			}

			function setOnActionsModalAC(data){
				_modalAsociarCuentas['dataPaginacion'] = data;
				generarListadoAsociarCuentas(_modalAsociarCuentas['dataPaginacion']);
			}

			function updateModalPostData(flag){
				_modalAsociarCuentas['postData'] = []
				_modalAsociarCuentas['postDataAsociada'] = [];

				if(flag){
					$.each(_modalAsociarCuentas['data'] , function( index, elemento ) {
						_modalAsociarCuentas['postData'].push(elemento.id);
						_modalAsociarCuentas['postDataAsociada']['c-'+elemento.id] = elemento.asociada;
					});
				}

				console.log(_modalAsociarCuentas['postDataAsociada']);

			}


			var limitM = (typeof $('#checkall-modal-cuentas').data('limit') != 'undefined' ? $('#checkall-modal-cuentas').data('limit') : 0),
				isLimitedM = (limitM>0 ? true : false);

			function onCheckboxModalAsociar(){

				function checkButtonsActive(){

					if(_modalAsociarCuentas['postData'].length>0)
						$('#btn-show-confirmacion').prop('disabled', false);
					else
						$('#btn-show-confirmacion').prop('disabled', true);
				}

				// SELECT ALL TODAS LAS PÁGINAS
				$("#check-all-cuentas-modal").click(function(e) {
					e.preventDefault();

					var $checkboxAll = $(this);
					var flag = $checkboxAll.data('value');
					allCheckedModal = flag;

					$('#checkbox-all-modal').prop('checked', flag);

					//Seleccionar los elementos de la página que están visibles
					$('#listado-result-asoc .content-r-asoc input[type="checkbox"]').each(function( index ) {

						var $singleCheckbox = $(this);
						$singleCheckbox.prop( "checked", flag );

						var $parent = $(this).closest('.content-r-asoc');

						if(flag)
							$parent.addClass('checked-element');
						else
							$parent.removeClass('checked-element');

					});

					updateModalPostData(flag);

					$checkboxAll.data('value', !flag);

					if(flag){
						setMessageCheckbox(flag);
					}

					else{
						$('#modal-asociar-cuentas .listado-select-all-block').removeClass('active');
						$('#total-cuentas-checkbox-modal').html('esta cuenta.');
					}


					checkButtonsActive();
				});

				// SELECT ALL POR PÁGINA
				$("#listado-result-asoc .head-r-asoc .checkbox-container input").change(function() {

					var $checkboxAll = $(this);

					//SE ACTUALIZA CADA UNO DE LOS ELEMENTOS DE LA PÁGINA
					$('#listado-result-asoc .content-r-asoc input[type="checkbox"]').each(function( index ) {

						var $singleCheckbox = $(this);

						var $parent = $singleCheckbox.closest('.content-r-asoc');
						var cuentaId = $singleCheckbox.val();

						var index = _modalAsociarCuentas['postData'].indexOf(cuentaId);

						if($checkboxAll.is(":checked")){

							if (index <= -1) {
								_modalAsociarCuentas['postData'].push(cuentaId);
								_modalAsociarCuentas['postDataAsociada']['c-'+cuentaId] = $singleCheckbox.data('asociada');
							}

							$singleCheckbox.prop( "checked", true );
							$parent.addClass('checked-element');
						}
						else {

							if (index > -1) {
							    _modalAsociarCuentas['postData'].splice(index, 1);
							    delete  _modalAsociarCuentas['postDataAsociada']['c-'+cuentaId];
							}

							$singleCheckbox.prop( "checked", false );
							$parent.removeClass('checked-element');

						}

					});

					// MOSTRAR EL MENSAJE PARA PODER SELECCIONAR TODOS
					if($checkboxAll.is(":checked")) {
						setMessageCheckbox(false);
					}
					else{
						$('#modal-asociar-cuentas .listado-select-all-block').removeClass('active');
					}

					allCheckedModal = false;

					checkButtonsActive();

				});

				//CHECKBOX INDIVIDUAL
				$('#modal-asociar-cuentas').on('change', '.content-r-asoc .checkbox-container input', function(){

					var $singleCheckbox = $(this);
					var $parent = $singleCheckbox.closest('.content-r-asoc');
					var cuentaId = $singleCheckbox.val();

					if($singleCheckbox.is(":checked")){
						_modalAsociarCuentas['postData'].push(cuentaId);
						_modalAsociarCuentas['postDataAsociada']['c-'+cuentaId] = $singleCheckbox.data('asociada');
					}

					else{
						var index = _modalAsociarCuentas['postData'].indexOf(cuentaId);

						if (index > -1) {
						    _modalAsociarCuentas['postData'].splice(index, 1);
						    delete  _modalAsociarCuentas['postDataAsociada']['c-'+cuentaId];
						}
					}


					//Actualizar checkboxALL activado o desactivado
					var checkboxAllFlag = false;


					if($('#listado-result-asoc .content-r-asoc .checkbox-container input[type="checkbox"]').length == $('#listado-result-asoc .content-r-asoc .checkbox-container input[type="checkbox"]:checked').length){
						checkboxAllFlag = true;
						setMessageCheckbox(false);
						$('#modal-asociar-cuentas .listado-select-all-block').addClass('active');
					}
					else
						$('#modal-asociar-cuentas .listado-select-all-block').removeClass('active');

					$('#listado-result-asoc .head-r-asoc .checkbox-container input').prop('checked', checkboxAllFlag);

					if(_modalAsociarCuentas['postData'].length == _modalAsociarCuentas['data'].length )
						allCheckedModal = true;
					else
						allCheckedModal = false;

					var disabled = _modalAsociarCuentas['postData'].length>0 ? false : true;

					$('#modal-asociar-cuentas #btn-show-confirmacion').prop( "disabled", disabled );

				});
			}

			function setMessageCheckbox(selectAll){

				var totalcheckbox = _modalAsociarCuentas['data'].length;
				var totalpagecheckbox = $('#listado-result-asoc .content-r-asoc input[type="checkbox"]').length;

				$('.total-all-pagina-checkbox').html(totalcheckbox);
				if(isLimitedM && totalcheckbox>limitM)
					$('#check-all-cuentas-modal').addClass('hidden');

				if(totalpagecheckbox == 0){
					$('#checkall-modal-cuentas input').prop("checked", false);
					$('#modal-cuentas-asociadas .listado-select-all-block').removeClass('active');
				}
				else if(selectAll){
					$('#check-all-cuentas-modal').html('Anular la selección');
					$('#total-cuentas-checkbox-modal').html('todo el listado.');
					$('#total-checkbox-cuentas-modal').html(totalcheckbox);

				}
				else{

					$('#check-all-cuentas-modal').html('Seleccionar las <strong>'+totalcheckbox+'</strong> cuentas del listado');
					$('#total-cuentas-checkbox-modal').html('esta página (puede elegir máximo 50). ');
					$('#total-checkbox-cuentas-modal').html(totalpagecheckbox);
				}

				if(isLimitedM && totalpagecheckbox == 0)
					$('#modal-asociar-cuentas .listado-select-all-block').removeClass('active');
				else
					$('#modal-asociar-cuentas .listado-select-all-block').addClass('active');

			}

			function generarListadoAsociarCuentas(data){

				var checkBoxAllBatch = true;

				var $main = $('#modal-asociar-cuentas .results-asoc');

				$( "#modal-asociar-cuentas .results-asoc .content-r-asoc" ).remove();

				$.each(data , function( index, elemento ) {
					var htmlLista = '<div class="col-xs-12 col-sm-12 content-r-asoc '+(elemento.asociada ? 'set-asoc' : '')+'"> <div class="col-sm-1 col-xs-2 content-item-block checkb-r-asoc"> <div class="data-write checkbox-container"> <input type="checkbox" id="asociar-cuenta-'+elemento.id+'" name="cc" value="'+elemento.id+'" '+(_modalAsociarCuentas['postData'].indexOf((elemento.id).toString()) > -1 ? 'checked' : '' )+' data-asociada = "'+elemento.asociada+'"> <label for="asociar-cuenta-'+elemento.id+'"><span class="check-sq"></span></label> </div> </div> <div class="col-sm-11 col-xs-10 content-item-block"> <div class="col-sm-10 col-xs-7 flexbox v-align-center"><div class="col-sm-2 region-container"> <label class="hidden-sm hidden-md hidden-lg">Región:</label><p title="'+elemento.region+'">'+elemento.region+'</p> </div><div class="col-sm-2 flexbox h-align-center"> <span class="icon '+(elemento.tipo == 1 ? 'io-City' : 'io-simple-avatar')+'" title="'+(elemento.tipo == 1 ? 'Cuenta padre' : 'Cuenta hija')+'"></span> <p class="account-hra" title="'+elemento.cuenta+'">'+elemento.cuenta+'</p> </div> <div class="col-sm-4"> <p title="'+elemento.rfc+'">'+elemento.rfc+'</p> </div> <div class="col-sm-4"> <p title="'+elemento.razonsocial+'">'+elemento.razonsocial+'</p> </div> </div><div class="col-sm-2 col-xs-5"> <p title="'+(elemento.asociada ? 'Asociada' : 'Sin asociar')+'">'+(elemento.asociada ? 'Asociada' : 'Sin asociar')+'</p> </div> </div> </div>';

					var i = _modalAsociarCuentas['postData'].indexOf(elemento.id);

					if (i == -1)
						checkBoxAllBatch = false;

				  	$main.append(htmlLista);

				});

				$('#checkall-modal-cuentas input').prop("checked", checkBoxAllBatch);



				if(!checkBoxAllBatch){
					$('#modal-asociar-cuentas .listado-select-all-block').removeClass('active');
				}
				else{
					setMessageCheckbox(allCheckedModal);
				}


			}

			function resetModalAsociarCuentas(){
				$('#modal-asociar-cuentas #btn-show-confirmacion').prop( "disabled", true );
				$('#modal-asociar-cuentas .form-ge-mod').removeClass('success').show();
				$('#modal-asociar-cuentas .listado-select-all-block').removeClass('active');
				$('#modal-asociar-cuentas #listado-result-asoc, #modal-asociar-cuentas .pagination-block, #modal-asociar-cuentas .button-field-mod, #sin-resultados').addClass('hidden');

				$('#modal-asociar-cuentas #paso-1').show();
				$('#modal-asociar-cuentas #paso-2').hide();
				$('#modal-asociar-cuentas #paso-3').hide();

				$('#modal-asociar-cuentas input[type="text"]').val('');
				$('#modal-asociar-cuentas #btn-search-cuentas-aso').prop('disabled', true);

			}

			function getModalAsociarData(search, key){

				_modalAsociarCuentas['postData'] = [];
				_modalAsociarCuentas['postDataAsociada'] = [];

				function hardcodearData(search, key){
					var resultados = [];
					if(typeof search != 'undefined' && typeof key != 'undefined'){
						search = search.toLowerCase();

						for(var i=0; i<cuentasAsociadas.length; i++) {
						  if((cuentasAsociadas[i][key].toLowerCase()).indexOf(search)!=-1) {
						      resultados.push(cuentasAsociadas[i]);
						    }
						}
					}

					return resultados;
				}

				function getCuentasAsociadas(){

					generalLoadingIcon('#modal-asociar-cuentas .in-cont-mod', true);

					// Aquí va el llamado al SERVICIO y a la API json
					var apiCuentas = (typeof $modal.data('api') != 'undefined' ? $modal.data('api') : postURL);

					$.getJSON( apiCuentas, {id: modalCurrentData.id, search : search, key: key})
					  .done(function( json ) {

					  	Services.gestionGrupos.cuentasAsociadasSuccessCallback(_modalAsociarCuentas, json, cuentasAsociadas);

					  	generalLoadingIcon('#modal-asociar-cuentas .in-cont-mod', false);
					  	cuentasAsociadas = cuentasAsociadas.value;

					  })
					  .fail(function( jqxhr, textStatus, error ) {

					  	Services.gestionGrupos.cuentasAsociadasFailCallback(_modalAsociarCuentas, json);
					  	generalLoadingIcon('#modal-asociar-cuentas .in-cont-mod', false);
					});

					// _modalAsociarCuentas['data'] = cuentasAsociadas;
				}

				getCuentasAsociadas();

			}

			var validNotEmpty = true;
			var searchby = null;
			var currentSearch = '';

			function setActionsSearch(){
				function addActionSearch($parent){

					$parent.find('button[type="submit"]').click(function(){
						var search = $parent.find('.search-input-block .search-input-'+searchby.key).val();
						var query = '?search-by='+searchby.key+'&search='+search;
						window.location.href = (location.hostname!='localhost' ? '/cliente/2016/mi-telcel-empresas' : '' )+'/sections/gestion-grupos/'+searchby.view+query;
					});
				}

				function getUrlNoQuery(){

					var url = window.location.href.split('?')[0];
					return url;
				}

				var $container = $('#modal-asociar-cuentas .search-by-container');
				validNotEmpty = true;
				searchby = null;
				currentSearch = '';

				resetSearchInput($container);

				$container.find('.search-input-block input').each(function (i) {
				  	var $element = $(this);
				  	validateNotEmptySearch($element, $container);
				});

				if($container.hasClass('gestion-cuentas-search')){
					addActionSearch($container);
				}

				$container.find('.searchby').change(function(){
					searchby = $(this).find(":selected").data('value');
					resetSearchInput($container);
					if(typeof searchby != 'undefined')
						$container.find('.search-input-block .search-input-'+searchby.key).show();

				});
			}

			function setBuscador(){
				var $container = $('#modal-asociar-cuentas .search-by-container');
				var $firstSelected = $container.find(":selected");

				resetSearchInput($container);

				if($firstSelected.val()==''){
					//Seleccionar la primera
					$container.find('option:nth-child(2)').prop("selected", true);
					$firstSelected = $container.find(":selected");
					//Fix safari
					if($firstSelected.length>1)
						$firstSelected = $container.find(":selected:nth-child(2)");
					//Fin fix safari
				}

				searchby = $firstSelected.data('value');


				$container.find('.search-input-block .search-input-'+searchby.key).show();

				//Seleccionar primera opcion
			}

			function resetSearchInput($parent){
				validNotEmpty = true;
				$parent.find('.search-input-block input[type="text"]').val('');
				$parent.find('.search-input-block input[type="text"]').hide();
				$parent.find('.search-input-block button[type="submit"]').prop('disabled', true);
				$parent.find('#btn-search-cuentas-aso').prop('disabled', true);
			}

			function validateNotEmptySearch($element, $container){

				$element.bind('input', function() {

					if(searchby && $container.find('.search-input-'+searchby.key) ){
						var ivalue = $container.find('.search-input-'+searchby.key).val();

						currentSearch = ivalue;

						if (ivalue.length>=searchby.min)
							validNotEmpty = false;
						else
							validNotEmpty = true;
					}


					disableSumbitButton($container.closest('.search-by-container'), validNotEmpty);

				});

			}

		}

		function postDataAsociarCuentas(){

			var data = { success: false, data: [] };

			var post = _modalAsociarCuentas['postData'];
			var container = '#modal-confirmacion-cuentas .in-cont-mod';

			if(!formElementsModales['asociarCuentas']['sending']){

				formElementsModales['asociarCuentas']['sending'] = true;
				generalLoadingIcon(container, true);

				var urlPOST = Services.apiURL.asociarCuentas();

				$.post( urlPOST , { data: JSON.stringify(post) })
				  .done(function( json ) {

				  	Services.gestionEjecutivos.asociarCuentasSuccessCallback(json, container);
				  	formElementsModales['asociarCuentas']['sending'] = false;
				  	generalLoadingIcon(container, false);

				  })
				  .fail(function( jqxhr, textStatus, error ) {
				  	Services.gestionEjecutivos.asociarCuentasFailCallback(json, container);
				  	formElementsModales['asociarCuentas']['sending'] = false;
				  	generalLoadingIcon(container, false);
				});
			}
		}


	}

	/** Validar nombre de alias al editar **/
	function validName(value){
		var validation = {
			empty : { test : value.length>0 , message: 'Es necesario ingresar un nombre para el alias.' },
			name : 	{ test : value.length == value.toString().trim().length, message: 'El nombre no debe tener espacio al inicio o final.' }
		};

		console.log(validation.empty.test);
		return validation.name.test && validation.empty.test;
	}

	function validNameMsg(value){
		var validation = {
			empty : { test : value.length>0 , message: 'Es necesario ingresar un nombre para el alias.' },
			name : 	{ test : value.length == value.toString().trim().length, message: 'El nombre no debe tener espacio al inicio o final.' }
		};

		return ( !validation.empty.test ? validation.empty.message : validation.name.message );
	}

	function validateNameOnInput($input){
		var value = $input.val();
		var $element = $input.closest('.group-block');
		var $button = $input.next('.btn-guardar-nombre');

		if(validName(value)){
			$element.find('.triangle-tooltip').remove();
			$input.removeClass('error');
			$button.prop('disabled', false);
		}
		else{
			$button.prop('disabled', true);
			appendError($element, $input, validNameMsg(value));
		}
	}

	function appendError($e, $i, message){
		if($e.find('.triangle-tooltip').length == 0){
			var errorhtml = '<div class="triangle-tooltip error-tooltip triangle-bottom nombre-error"><p>'+message+'</p></div>';
			$e.append(errorhtml);
			$i.addClass('error');
		}
	}

	function verifyName($element){
		var $input = $element.find('.editar-alias');
		var value = $input.val();
		var id = $element.data('item').id;
		if(validName(value)){

			$element.find('.triangle-tooltip').remove();
			$input.removeClass('error');

			var urlPOST = Services.apiURL.editarNombreAlias();

			$.post( urlPOST , { edit: value, id: id })
			  .done(function( json ) {
			  	Services.gestionEjecutivos.editarNombreAliasSuccessCallback( json, value, appendError, {input : $input, element : $element });
			 	//Checar si hay algún elemento que se quiere editar
			  	$input.blur();
				$input.focusout();
				checkElementToEdit();
			  })
			  .fail(function( jqxhr, textStatus, error ) {
			  	Services.gestionEjecutivos.editarNombreAliasFailCallback( error );
			});
		}
		else if(editandoNombre && editandoNombreValor!=null){
			$input.val(editandoNombreValor);
			$closestGuardarElement.trigger('click');
			editandoNombreValor = null;
		}
	}

	/** fin validar nombre de alias al editar **/

	function orderItems(opc){
		if(opc.key == 'nombre')
			dataFiltered = sortByAZ(dataFiltered, opc.key);
		else
			dataFiltered = sortByNumber(dataFiltered, opc.key);

		if(opc.orderby == 'desc')
			dataFiltered.reverse();

		paginacion.updateItems(dataFiltered);
		paginacion.reset();

	}

	return{
		inicializar : init
	}

})();
var historialMovimientos = (function(){

	var formElementsModales = {
		'descargarFacturas': {id: null, validator: null, sending: false }
	};

	var modalDescargarFacturas = null;

	if($('.historial-movimientos-block #modal-descargar').length>0)
		initModalDescargarFacturas();

	var _modalDescargarFacturas = {
		data : [],
		allChecked : false
	};

	function init(){

		setActionsGenerales();
		initConfigurarMovimientos();

		if($('#form-alias-movimientos').length>0)
			initFormMovimientos();


	}


	function initModalDescargarFacturas(){
		var $titleP = $('#modal-descargar .heading-mod .title-mod p'),
		titleBefore = ( typeof $titleP.data('before') != 'undefined' ? $titleP.data('before') : null ),
		titleAfter = ( typeof $titleP.data('after') != 'undefined' ? $titleP.data('after') : null ),
		emailDefault = '',
		$input = $('#modal-descargar').find('input[name="email"]');

		validateForm();

		modalDescargarFacturas = new modalesTelcel($('#modal-descargar'),{
			onInit : function(){
				$('#descargar-facturas-confirmacion').hide();
				emailDefault = $input.val();
			},
			onReset : function(){
				removeGeneralError();
				$('#form-confirmar-descargar-facturas').show();
			  	$('#descargar-facturas-confirmacion').hide();
			  	resetMainForm();
			},
			onOpen : function(){
				if(titleBefore!=null)
					$titleP.html(titleBefore);
				$('#descargar-facturas-confirmacion').hide();

				var $form = $('#form-confirmar-descargar-facturas');
				disableSumbitButton($form, false);

			}
		});

		function validateForm(){
			var $form = $('#form-confirmar-descargar-facturas');

			disableSumbitButton($form, true);

			formElementsModales['descargarFacturas']['validator'] = $form.validate({
				  rules: {
					email: {
					  required: false,
					  email: true
					}
				  },
			  	messages: {
					 email: {
					   required: "Ingresa un correo electrónico.",
					   email: "Ingresa un correo electrónico válido."
					 }
			   },
			   errorClass : "error-dd error",
				submitHandler: function(form) {

					// handleErrorTooltip(false);
					if(!formElementsModales['descargarFacturas']['sending']){

						formElementsModales['descargarFacturas']['sending'] = true;

						$(form).find('button[type="submit"]').prop('disabled', true);

						var self = $(form).serialize();

						generalLoadingIcon(form, true);

						var data = { success: true, data: [] };


						$.post( postURL , { data: self, data: _modalDescargarFacturas })
						  .done(function( json ) {
						  	Services.historial.descargarFacturasSuccessCallback(json, form, { element : $titleP, text : titleAfter } );
						  	formElementsModales['descargarFacturas']['sending'] = false;
						  	generalLoadingIcon(form, false);

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	Services.historial.descargarFacturasFailCallback(form, error);
						  	formElementsModales['descargarFacturas']['sending'] = false;
						  	generalLoadingIcon(form, false);
						});

					}

				}
			});

			checkGeneralValidForm($form);

		}

		function removeGeneralError(){
			$('#modal-descargar .system-error-msg').remove();
			$('#modal-descargar .has-system-error').removeClass('has-system-error');
		}

		$('#modal-descargar').on('click', '#btn-r-descargar-facturas', function(){
			removeGeneralError();
			$('#form-confirmar-descargar-facturas').submit();
		});

		function resetMainForm(){
			$input.removeClass('error error-dd');
			$input.val(emailDefault);

			if(formElementsModales['descargarFacturas']['validator']){
				formElementsModales['descargarFacturas']['validator'].resetForm();
			}
		}
	}
	function initFormMovimientos(){
		console.log('form movimientos');
		var $generalForm = $('#form-alias-movimientos');
		initActions();
		setPreselectedData();

		function setPreselectedData(){
			//Preselect Alias
			var hash = window.location.hash;
			if(typeof hash != 'undefined'){
				hash = hash.replace('#','');
				if($("#alias option[value='"+hash+"']").length > 0){
					$('#alias').val(hash);
					//$('#btn-bitacora, #btn-cuentas, #btn-descargas').prop('disabled', false);
				}
			}
		}



		function initActions(){
			/**
				Cambiar Select
			**/
			$generalForm.on('change', '#alias', function(){
				var $select = $(this);
				if($select.val()!= "")
					$('#btn-bitacora, #btn-cuentas, #btn-descargas').prop('disabled', false);
				else
					$('#btn-bitacora, #btn-cuentas, #btn-descargas').prop('disabled', true);

			});

			validateForm();
		}

		function validateForm(){
			$generalForm.validate({
			  rules: {
				alias: {
					required: true
				}

			  },
			  messages: {
				 alias: {
					required: "Selecciona un alias."
				}

			   },
			   errorClass : "error-dd error",
			   errorPlacement: function(error, $element) {
				   	var $parent = $element.parent('.general-number-container');
				   	$parent.append(error);
				}
			});
		}
	}


	function initConfigurarMovimientos(){

		var $listaMovimientos = $('#movimientos-table .table-main-block'),
		$buscadorBasico = $('#search-basico'),
		$buscadorAvanzado = $('#search-avanzado'),
		$buscadorContainer = $('#search-movimientos-container'),
		$filtrado = $('.filter-movimientos-container'),
		listaSinResponsable = $listaMovimientos.hasClass('sin-responsable'),
		buscadorBasicoValid = false,
		buscadorAvanzadoValid = false,
		filtradoValid = false,
		dataListadoMovimientos = [],
		dataSearchBasico = {'fechaInicial' : '', 'fechaFinal' : '', 'estado' : ''},
		dataSearchAvanzado = {'fechaInicial' : '', 'fechaFinal' : '', 'asignado' : '', 'operacion' : '', 'movimiento' : '', 'estado' : ''},
		dataFiltrado = {'numero' : '', 'nombre' : '', 'estado' : ''};


		setActions();
		simularCasos();
		generarListadoConfirmacionInicial();

		function simularCasos(){
			// SIMULAR ERROR
			var hash = window.location.hash;

			if(hash=='#sin-resultados'){
				$('#sin-resultados').removeClass('hidden');
				var $headerMsg = $('.header-info-movimientos #msg-movimientos');
				$headerMsg.html('No se encontraron movimientos en el rango de fechas seleccionado.');

				var searchData = {
					init : new Date(2015,12,14),
					fin : new Date(2015,12,27),
					estatus : ''
				};

				preSelectDataBuscadorBasico(searchData);

				$('#sin-resultados .inner-nb p').html('No existen movimientos realizados en el rango de fechas seleccionado.');
				$('#gestion-ejecutivos-view').addClass('hidden');
			}

			if(hash=='#sin-resultados-periodo'){
				$('#sin-resultados').removeClass('hidden');
				var $headerMsg = $('.header-info-movimientos #msg-movimientos');
				$headerMsg.html('No se encontraron movimientos en el rango de fechas seleccionado.');

				var searchData = {
					init : new Date(2015,12,14),
					fin : new Date(2015,12,27),
					estatus : ''
				};

				preSelectDataBuscadorBasico(searchData);

				$('#btn-limpiar-busqueda').removeClass('hidden');
				$('#sin-resultados .inner-nb p').html('No se encontraron movimientos para el criterio de búsqueda seleccionado. Modifica tus cristeros de búsqueda.');
				$('#gestion-ejecutivos-view').addClass('hidden');
			}

			if(hash=='#sin-resultados-busqueda'){
				$('#sin-resultados').removeClass('hidden');
				var $headerMsg = $('.header-info-movimientos #msg-movimientos');
				$headerMsg.html('No se encontraron movimientos en el rango de fechas seleccionado.');

				var searchData = {
					init : new Date(2015,12,14),
					fin : new Date(2015,12,27),
					estatus : ''
				};

				preSelectDataBuscadorBasico(searchData);

				$('#btn-periodo-anterior').removeClass('hidden');
				$('#sin-resultados .inner-nb p').html('No se encontraron movimientos para el criterio de búsqueda seleccionado, te sugerimos consultar el periodo anterior o incluir un criterio más general.');
				$('#gestion-ejecutivos-view').addClass('hidden');


			}

			if(hash=='#error-busqueda'){
				$('#error-busqueda').removeClass('hidden');
				var $headerMsg = $('.header-info-movimientos #msg-movimientos');
				$('#gestion-ejecutivos-view').addClass('hidden');

				var searchData = {
					init : new Date(2015,12,14),
					fin : new Date(2015,12,27),
					estatus : ''
				};

				preSelectDataBuscadorBasico(searchData);

				$headerMsg.html('No se encontraron movimientos en el rango de fechas seleccionado.');
			}

			if(hash=='#con-busqueda-avanzada'){
				var $headerMsg = $('.header-info-movimientos #msg-movimientos'),
				$limpiar = $('.btn-limpiar-busqueda');

				var searchData = {
					init : new Date(2015,12,14),
					fin : new Date(2015,12,27),
					asignado : '',
					operacion : '01293810923',
					estatus : ['completado', 'rechazado', 'en-proceso'],
					movimiento : ['crear-grupo', 'actualizar-grupo', 'eliminar-grupo']
				};

				$headerMsg.html('Movimientos realizados en el periodo del <strong>20-02-2017</strong> al <strong>28-02-2017</strong>, con estatus <strong>completado, rechazado y en proceso</strong> del tipo de movimiento <strong>crear grupo, actualizar grupo y eliminar grupo</strong>.');

				preSelectDataBuscadorAvanzado(searchData);
			}

			if(hash=='#con-busqueda-basica'){
				var $headerMsg = $('.header-info-movimientos #msg-movimientos'),
				$limpiar = $('.btn-limpiar-busqueda');

				var searchData = {
					init : new Date(2015,12,14),
					fin : new Date(2015,12,27),
					estatus : 'todos'
				};

				$headerMsg.html('Movimientos realizados en el periodo del <strong>20-02-2017</strong> al <strong>28-02-2017</strong>, con estatus <strong>completado, rechazado y en proceso</strong>.');

				preSelectDataBuscadorBasico(searchData);
			}

			if(hash == '#filtrado'){
				$('.filter-movimientos-container').addClass('filtrado');
			}

		}

		function preSelectDataBuscadorAvanzado(data){

			$buscadorContainer.addClass('busqueda-avanzada');
			$buscadorContainer.find('#btn-limpiar-busqueda-avanzada').prop('disabled', false);
			$buscadorAvanzado.find('#btn-search-movimientos-avanzado').prop('disabled', false);

			$buscadorAvanzado.find('.date-picker.fin').removeClass('disabled');

			$buscadorAvanzado.find('.fecha-init').html(data.init.getFullYear() + '-' +( (data.init.getMonth() + 1) <10 ? '0'+ (data.init.getMonth() + 1) : (data.init.getMonth() + 1)) + '-' + ( data.init.getDate() <10 ? '0'+ data.init.getDate() : data.init.getDate()));

			$buscadorAvanzado.find('.fecha-fin').html(data.fin.getFullYear() + '-' +( (data.fin.getMonth() + 1) <10 ? '0'+ (data.fin.getMonth() + 1) : (data.fin.getMonth() + 1)) + '-' + ( data.fin.getDate() <10 ? '0'+ data.fin.getDate() : data.fin.getDate()));

			$buscadorAvanzado.find('.calendar.init').datepicker("setDate", data.init );
			$buscadorAvanzado.find('.calendar.fin').datepicker("setDate", data.fin );

			if(typeof data.estatus!= 'undefined'){
				$.each(data.estatus, function (index, data) {
					$('#'+data).prop('checked', true);
				});

				var all = $buscadorContainer.find('input.estatus').length == $buscadorContainer.find('input.estatus:checked').length;
				if(all)
					checkAllElementsSelected($buscadorContainer.find('#todos-estatus'));
			}

			if(typeof data.movimiento!= 'undefined'){
				$.each(data.movimiento, function (index, data) {
					$('#'+data).prop('checked', true);
				});

				var all = $buscadorContainer.find('input.movimiento').length == $buscadorContainer.find('input.movimiento:checked').length;
				if(all)
					checkAllElementsSelected($buscadorContainer.find('#todos-movimiento'));
			}

			$buscadorAvanzado.find('.operacion').val( data.operacion );

		}

		function preSelectDataBuscadorBasico(data){

			$buscadorContainer.find('.btn-limpiar-busqueda').prop('disabled', false);
			$buscadorBasico.find('#btn-search-movimientos').prop('disabled', false);

			$buscadorBasico.find('.date-picker.fin').removeClass('disabled');

			$buscadorBasico.find('.fecha-init').html(data.init.getFullYear() + '-' +( (data.init.getMonth() + 1) <10 ? '0'+ (data.init.getMonth() + 1) : (data.init.getMonth() + 1)) + '-' + ( data.init.getDate() <10 ? '0'+ data.init.getDate() : data.init.getDate()));

			$buscadorBasico.find('.fecha-fin').html(data.fin.getFullYear() + '-' +( (data.fin.getMonth() + 1) <10 ? '0'+ (data.fin.getMonth() + 1) : (data.fin.getMonth() + 1)) + '-' + ( data.fin.getDate() <10 ? '0'+ data.fin.getDate() : data.fin.getDate()));

			$buscadorBasico.find('.calendar.init').datepicker("setDate", data.init );
			$buscadorBasico.find('.calendar.fin').datepicker("setDate", data.fin );

			$buscadorBasico.find('.estatus').val(data.estatus);

		}

		function updateBuscadorBasico(){
			buscadorBasicoValid = true;

			var	$fechainit = $buscadorBasico.find('.fecha-init'),
				$fechafin = $buscadorBasico.find('.fecha-fin'),
				$estatus = $buscadorBasico.find('.estatus').find(':selected');

			dataSearchBasico = {'fechaInicial' : $fechainit.html(), 'fechaFinal' : $fechafin.html() , 'estado' : $estatus.val()};

			if(dataSearchBasico.fechaInicial == '')
				buscadorBasicoValid = false;

			if(dataSearchBasico.fechaFinal == '')
				buscadorBasicoValid = false;

			$('#btn-search-movimientos').prop('disabled', !buscadorBasicoValid);
		}

		function updateBuscadorAvanzado(){

			buscadorAvanzadoValid = true;

			var	$fechainit = $buscadorAvanzado.find('.fecha-init'),
				$fechafin = $buscadorAvanzado.find('.fecha-fin'),
				$estatus = $buscadorAvanzado.find('.estatus:checked'),
				$movimiento = $buscadorAvanzado.find('.movimiento:checked'),
				$asignado = $buscadorAvanzado.find('.asignado'),
				$operacion = $buscadorAvanzado.find('.operacion');


			var estatusValues = $estatus.map(function() {
			    return this.value;
			}).get();

			var movimientoValues = $movimiento.map(function() {
			    return this.value;
			}).get();

			dataSearchAvanzado = {'fechaInicial' : $fechainit.html(), 'fechaFinal' : $fechafin.html() , 'asignado' : $asignado.val() , 'operacion' : $operacion.val(), 'movimiento' : (movimientoValues.length>0 ? movimientoValues.join(',') : ''), 'estado' : (estatusValues.length>0 ? estatusValues.join(',') : '')};


			if(dataSearchAvanzado.fechaInicial == '')
				buscadorAvanzadoValid = false;

			if(dataSearchAvanzado.fechaFinal == '')
				buscadorAvanzadoValid = false;

			$('#btn-search-movimientos-avanzado').prop('disabled', !buscadorAvanzadoValid);
			$('#btn-limpiar-busqueda-avanzada').prop('disabled', !buscadorAvanzadoValid);
		}


		function updateFiltrado(){
			filtradoValid = false;

			var	$numero = $filtrado.find('.numero'),
				$nombre = $filtrado.find('.nombre'),
				$estatus = $filtrado.find('.estatus').find(':selected');

			dataFiltrado = {'numero' : $numero.val(), 'nombre' : $nombre.val() , 'estado' : $estatus.val()};

			if(dataFiltrado.numero != '' || dataFiltrado.nombre != '' || dataFiltrado.estado != ''){
				$('.filter-movimientos-container').addClass('filtrado');
				filtradoValid = true;
			}
			else
				$('.filter-movimientos-container').removeClass('filtrado');



			$('#btn-filtrar-movimientos').prop('disabled', !filtradoValid);
		}

		function resetBuscadorBasico(){
			buscadorBasicoValid = false;

			var	$fechainit = $buscadorBasico.find('.fecha-init'),
				$fechafin = $buscadorBasico.find('.fecha-fin'),
				$estatus = $buscadorBasico.find('.estatus');

			dataSearchBasico = {'fechaInicial' : '', 'fechaFinal' :'' , 'estado' : ''};

			$fechainit.html('');
			$fechafin.html('');
			$estatus.val('');

			$('#btn-search-movimientos').prop('disabled', !buscadorBasicoValid);
		}

		function resetBuscadorAvanzado(){

			buscadorAvanzadoValid = false;

			var	$fechainit = $buscadorAvanzado.find('.fecha-init'),
				$fechafin = $buscadorAvanzado.find('.fecha-fin'),
				$estatus = $buscadorAvanzado.find('.estatus'),
				$movimiento = $buscadorAvanzado.find('.movimiento'),
				$asignado = $buscadorAvanzado.find('.asignado'),
				$operacion = $buscadorAvanzado.find('.operacion');

			dataSearchAvanzado = {'fechaInicial' : '', 'fechaFinal' : '' , 'asignado' : '' , 'operacion' : '', 'movimiento' : '', 'estado' : ''};


			$fechainit.html('');
			$fechafin.html('');
			$estatus.prop('checked', false);
			$movimiento.prop('checked', false);
			$operacion.val('');
			$asignado.val('');

			$('#btn-search-movimientos-avanzado').prop('disabled', !buscadorAvanzadoValid);
		}

		function checkAllElementsSelected($checkbox){
			var elemento = ($checkbox.hasClass('movimiento') ? 'movimiento' : 'estatus'),
			$select = $('#todos-'+elemento),
			value = false;

			if($select.length>0){
				value = ( $('input[type="checkbox"].'+elemento).length == $('input[type="checkbox"].'+elemento+':checked').length ? true : false );

				$select.data('value', !value);
				$select.html((value==true ? '(Deseleccionar todos)' : '(Seleccionar todos)'));
			}

		}

		function setActions(){

			/**
				Ordenar elementos de listado de líneas
			**/
			// $('.has-filters .order-by-query').on('click', 'button', function(e){
			// 	var opciones = ( typeof $(this).data('opc') != 'undefined' ? $(this).data('opc') : null );
			// 	var parent_id = $(this).closest('.has-filters').attr('id');

			// 	if(opciones!=null){
			// 		orderItemsQuery(opciones, parent_id);
			// 	}
			// });


			/**Mostrar más información**/
			$('#movimientos-table .linea-batch').on('click', '.btn-ver-mas', function(){
				var $button = $(this);
				var $container = $button.parent().closest('.linea-batch');
				var $span = $button.find('.icon');

				if(is_mobile() && !$span.hasClass('i-angle-up')){
					var $abiertos = $('#listado-movimientos .linea-batch.show-info');
					$abiertos.find('.i-angle-up').removeClass('i-angle-up');
					$abiertos.removeClass('show-info');
				}

				$container.toggleClass('show-info');
				$span.toggleClass('i-angle-up');
			});

			$("#search-movimientos-container").on('click', '.vista-busqueda', function(e){
				// //resetBuscadorBasico();
				// //resetBuscadorAvanzado();
				// range = { 'init' : null, 'fin' : null };
				// $( '.calendar.fin' ).parents('.date-picker').addClass('disabled');

				$buscadorContainer.toggleClass('busqueda-avanzada');

			});

			/**Buscador básico select estado**/
			$buscadorAvanzado.on('change', '.movimiento', function(){
				var $checkbox = $(this);
				checkAllElementsSelected($checkbox);
			});

			$buscadorAvanzado.on('change', '.estatus', function(e){

				var $checkbox = $(this);
				var $checkboxesChecked = $buscadorAvanzado.find('.estatus:checked');

				checkAllElementsSelected($checkbox);

				if(typeof e.originalEvent != 'undefined'){
					var $select = $buscadorBasico.find('.estatus-basico');

					var checked = ($checkboxesChecked.length==3 ? 'todos' : $checkboxesChecked.val());

					if(($checkboxesChecked.length==1 || $checkboxesChecked.length==3)){
						if($select.find('option[value='+checked+']').length > 0)
							$select.val(checked);
					}
					else{
						$select.find('option:selected').prop('selected', false);
					}
				}
			});

			$buscadorAvanzado.on('click', '#todos-estatus', function(){
				var $select = $(this),
				value = ( typeof $(this).data('value') != 'undefined' ? $(this).data('value') : false );

				$select.data('value', !value);
				$select.html((value==true ? '(Deseleccionar todos)' : '(Seleccionar todos)'));

				$buscadorAvanzado.find('.estatus').prop('checked', value);

				$buscadorAvanzado.find('.estatus').trigger('change');
			});

			$buscadorAvanzado.on('click', '#todos-movimiento', function(){
				var $select = $(this),
				value = ( typeof $(this).data('value') != 'undefined' ? $(this).data('value') : false );

				$select.data('value', !value);
				$select.html((value==true ? '(Deseleccionar todos)' : '(Seleccionar todos)'));

				$buscadorAvanzado.find('.movimiento').prop('checked', value);

				$buscadorAvanzado.find('.movimiento').trigger('change');
			});

			$buscadorBasico.on('change', '.estatus-basico',function(){
				var selected = $(this).val();

				var $checkbox = $('#todos-estatus');

				if(selected === 'todos'){
					$checkbox.data('value', true);
					$checkbox.trigger('click');
				}
				else{
					$checkbox.data('value', false);
					$checkbox.trigger('click');
					$buscadorAvanzado.find('.estatus#'+selected).prop('checked', true);
				}

			});

		}

		function generarListadoConfirmacionInicial(){

			var $elements = $listaMovimientos.find('.linea-batch');
			var total = $elements.length;

			$elements.each(function (index, value) {
			  var meta = ( typeof $(this).data('meta') != 'undefined' ? $(this).data('meta') : null );
			  var $element = $(this);

				if(meta != null){
					var elemento = generarHTMLMovimientos(meta, index);
					$element.html(elemento);
					meta.eliminado = false;
					meta.error = {};
					meta.edit = false;
					dataListadoMovimientos.push(meta);

					// bindElementActions();

				}
			});
		}

		function generarListadoConfirmacion(){

			$listaMovimientos.html('');

			$.each(dataListadoMovimientos, function (index, data) {
				if(!data.eliminado)

					var elemento = '';

					$.when(elemento = ($mainReactivacion.length>0 ? generarHTMLReactivacion(data, index) : ($mainCambio.length>0 ? generarHTMLCambio(data, index) : ($mainFacturacion.length>0 ? ( $mainFacturacion.hasClass('reporte-lineas') ?
						generarHTMLFacturacionLineas(data, index) : ($mainFacturacion.hasClass('reporte-facturas') ? generarHTMLFacturacionFacturas(data, index) :generarHTMLFacturacion(data, index) ) ) : generarHTMLSuspension(data, index))) )).done(function(){
								$listaconfirmar.append('<div class="col-sm-12 center-block flexbox h-align-center linea-batch '+elemento.additionalClass+'">'+elemento.html+'</div>');

								bindElementActions();
					});

			});


		}

		function generarHTMLMovimientos(meta, index){
			var html = '';
			var hasRealizacion = (typeof meta.realizacion != 'undefined' ? true : false);

			html = '<div class="col-sm-pr-100 col-xs-12 content-item-block" data-index="'+index+'"> <div class="col-xs-5 '+((hasRealizacion || !listaSinResponsable) ? 'col-sm-pr-15' : 'col-sm-pr-20')+' hidden-xs"> <p title="'+meta.operacion+'">'+meta.operacion+'</p></div>';


			html+='<div class="col-xs-4 '+((hasRealizacion || !listaSinResponsable) ? 'col-sm-pr-20' : 'col-sm-pr-20')+'"> <p class="movimiento-p"><span class="p-value" title="'+meta.movimiento+'">'+meta.movimiento+'</span></p></div><div class="col-xs-3 '+((hasRealizacion || !listaSinResponsable) ? 'col-sm-pr-15' : 'col-sm-pr-20')+'"> <p class="movimiento-p"><span class="p-value" title="'+meta.lineas+'">'+meta.lineas+'</span></p></div><div class="col-xs-3 '+( (hasRealizacion || !listaSinResponsable) ? 'col-sm-pr-10' : 'col-sm-pr-15')+' flexbox estatus-container"><p class="estatus-p" title="'+meta.estatus+'">'+meta.estatus+'</p></div><div class="col-xs-12 '+( (hasRealizacion || !listaSinResponsable) ? 'col-sm-pr-15' : 'col-sm-pr-15')+' hidden-xs"><p title="'+meta.solicitud+'">'+meta.solicitud+'</p></div>' +(hasRealizacion ? '<div class="col-xs-12 '+(listaSinResponsable ? 'col-sm-pr-15' : 'col-sm-2')+' hidden-xs"><p title="'+meta.realizacion+'">'+meta.realizacion+'</p></div>' : '')+(!listaSinResponsable ? '<div class="col-xs-12 col-sm-pr-15 hidden-xs"><p title="'+meta.responsable+'">'+meta.responsable+'</p></div>' : '')+'<div class="col-xs-2 col-sm-pr-10">'+( meta.url != undefined ? '<a class="simple" href="'+meta.url+'" title="Ver detalle"> <span class="icon i-angle-right"></span> </a>' : '' )+'</div> </div><div class="col-sm-12 col-xs-12 content-item-block more-info"> <div class="col-xs-12 flexbox v-align-center h-align-center hidden-sm hidden-md hidden-lg"> <p class="label">No. de operación:</p> <p class="p-value" title="'+meta.operacion+'">'+meta.operacion+'</p></div></div>';

			return html;

		}

	}

	function setActionsGenerales(){

		$('body').on('click', '.btn-general-solicitud-descarga', function(){
			//Aquí hay que tener en la variable el post de las facturas que se quieren
			_modalDescargarFacturas = {data: []};
			if(modalDescargarFacturas!=null)
				modalDescargarFacturas.openModal();
		});

		/**
			Mostrar/Ocultar tablas
		**/
		$('.collapse-table-block').on('click', '.hide-show-table', function(e){
			var table = ( typeof $(this).data('table') != 'undefined' ? $(this).data('table') : null );

			checkGeneralFSOpen();

			if(table!=null){
				var text = $(this).text();
				var newtext = (text == "Mostrar detalle" ? "Ocultar detalle" : "Mostrar detalle");

				if($(this).hasClass('filtros'))
					newtext = (text == "Mostrar filtros" ? "Ocultar filtros" : "Mostrar filtros");

    			$(this).text( newtext );

				$(table).slideToggle( 500 )
			}
		});

		$('.historial-movimientos-block').on('click', '.btn-periodo-anterior', function(){
			//Simular periodo Anterior
			var $button = $(this),
			periodo = (typeof $button.data('periodo') != 'undefined' ? $button.data('periodo') : null);

			if(periodo!=null){
				//Aquí iría el funcionamiento para pintar el nuevo periodo.
				var urlHref = (typeof $button.data('href') != 'undefined' ? $button.data('href') : null);
				if(urlHref!=null)
					window.location.href = urlHref;
			}
		});

	}

	function checkGeneralFSOpen(){
		var $containerFS = $('.general-fs-container.visible');
		var $container = $containerFS.closest('section');
		var $btn = $container.find('.hide-show-filter');

		if($containerFS.length>0)
			$btn.trigger('click');
	}

	return{
		inicializar: init
	}

})();
// SERVICIOS ANADIDOS //
var serviciosTelcel = (function(){

	var $mainTableContent = $('#modal-servicios .general-table .table-main-block');
	var sendingData = false;
	var $mainTableAct = $('#modal-servicios .general-table #servicios-activados');
	var $mainTableDes = $('#modal-servicios .general-table #servicios-desactivados');

	var dataServicios = [],
		dataServiciosLineas = [];
	var $listaServicios = $('.servicios-li .servicio-item');
	var $mainServicios = $('.autogestion-servicios-block');
	var _modalServicios = {};
	var modalServicios = null;
	//Estas variables posteriormente manejarlas como variables que asignen el valor de una API POST  no de una clase //
	var accion = $('.servicios-block-container').hasClass('activar') ? 'Activar' : 'Desactivar';
	var sinCosto = !$('.servicios-block-container').hasClass('activar');

	initmodalServicios();

	var isMasivo = false;
	var showDesactivado = false;

	var hash = window.location.hash;

	if(hash=='#infoSinServicios'){
		isMasivo = false;
		$('#header-con-servicios').addClass('hidden');
		$('#header-sin-servicios').removeClass('hidden');
		showDesactivado = true;
	}
	else if($mainServicios.hasClass('bloquear-acciones-masivas')){
		isMasivo = true;

		// Arreglo de los servicios
		dataServiciosLineas = [
			{
				id : 1,
				numero : '5512345678',
				servicios : [1, 5, 6]
			},
			{
				id : 2,
				numero : '5523456781',
				servicios : [2]
			},
			{
				id : 3,
				numero : '5534567812',
				servicios : [1, 3, 4]
			},
			{
				id : 4,
				numero : '5545678123',
				servicios : [1,4]
			},
			{
				id : 5,
				numero : '55567891234',
				servicios : [1, 2, 3, 5, 6]
			},
			{
				id : 6,
				numero : '55678912345',
				servicios : []
			},
			{
				id : 7,
				numero : '5578123456',
				servicios : [5]
			},
			{
				id : 8,
				numero : '5581234567',
				servicios : [1,6]
			}
		];
	}

	function checkFixedHeader(){
		var $lista = $('#servicios-listado-block .servicios-block-container');
		var $starte = $lista;
		var start = $starte.offset();


		$(window).scroll(function(){
			$starte = $lista;

			start = $starte.offset();
			var end = $starte.height()-50;
			var beg = -1;

		    if ($(this).scrollTop() > beg && $(this).scrollTop() < end )
		        $('.to-fixed-block').addClass('fixed');
		    else
		        $('.to-fixed-block').removeClass('fixed');
		});
	}

	function getTotalLineasServicio(id){

		var total = 0;

		$.each(dataServiciosLineas, function( index, linea ) {

			if($.inArray(Number(id), linea.servicios)<0)
			{
				total+=1;
			}

		});

		return total;
	}

	function initmodalServicios(){

		var $total = $('#total-carrito');
		var total = 0;

		modalServicios = new modalesTelcel($('#modal-servicios'),{
			onInit : function(){
				initActionsModalAuxiliar();

			},
			onOpen : function(){
				total = 0;

				var $terminosContainer = $('#terminos-container');
				$terminosContainer.hide();
				setTimeout(function(){
					$('#modal-servicios .window-modal').addClass('visible');
				}, 1);

				updateModalData();
			},
			onReset : function(){
				$('#modal-servicios .window-modal').removeClass('visible');
			}
		});


		function updateModalData(){
			$mainTableAct.html('');
			$mainTableDes.html('');

			$.each(dataServicios, function( index, servicio ) {
				if(servicio.activoInicial != servicio.activoFinal || showDesactivado){
					if(servicio.activoFinal)
						updateTableAdd(servicio);
					else
						updateTableRemove(servicio);

				}
				else if(isMasivo){
					updateTableRemove(servicio);
				}

			});

			if($mainTableDes.find('>div').length>0)
				$('#servicios-desactivados-head').removeClass('hidden');
			else
				$('#servicios-desactivados-head').addClass('hidden');

			updateTotalCarrito();
		}

		function updateTotalCarrito(){
			$total.html((!sinCosto ? parseFloat(total).toFixed(2) : '0.00'));
		}

		function updateTableAdd(servicio){
			var totalLineas = 0,
				totalCosto = 0;

			servicio.costo = (typeof servicio.costo != 'undefined') ? servicio.costo : '0.00'

			if(isMasivo){
				totalLineas = getTotalLineasServicio(servicio.id);
				totalCosto = parseFloat(Number(servicio.costo)*totalLineas).toFixed(2);
			}

			var html = '';
			if(isMasivo && sinCosto)
				html = '<div class="col-sm-12 col-xs-12 center-block flexbox" id="c-servicio-'+servicio.id+'"> <div class="col-sm-6 col-xs-6 flexbox"> <p title="'+servicio.nombre+'">'+servicio.nombre+' <a href="" class="btn-terminos-servicios" data-name="'+servicio.nombre+'" data-tyc="'+servicio.tyc+'">Términos y condiciones</a> </p> </div> <div class="col-sm-6 col-xs-6 h-align-center flexbox"><p class="p-align-center"><small class="txt-100 description">'+totalLineas+'</small></p></div></div>';
			else
				html = '<div class="col-sm-12 col-xs-12 center-block flexbox" id="c-servicio-'+servicio.id+'"> <div class="'+(isMasivo ? 'col-sm-4 col-xs-3' : 'col-xs-7 col-sm-7')+' flexbox"> <p title="'+servicio.nombre+'">'+servicio.nombre+' <a href="" class="btn-terminos-servicios" data-name="'+servicio.nombre+'" data-tyc="'+servicio.tyc+'">Términos y condiciones</a> </p></div> '+(isMasivo ? '<div class="col-sm-2 col-xs-3 h-align-center flexbox"><p class="p-align-center"><small class="txt-100 description">'+totalLineas+'</small></p></div><div class="col-sm-3 col-xs-3 h-align-center flexbox"><p class="p-align-center"><strong>'+ ( servicio.costo>0 && !sinCosto ? '$'+Number(servicio.costo).toFixed(2) : 'Sin costo' )+'</strong></p></div>' : '')+'<div class="'+(isMasivo ? 'col-sm-3 col-xs-3' : 'col-sm-5 col-xs-5')+' flexbox h-align-center"> <p class="p-align-center"><strong> '+( isMasivo ? ( totalCosto >0 && !sinCosto ? '$'+totalCosto : 'Sin costo') : (servicio.costo>0 && !sinCosto ? Number(servicio.costo).toFixed(2) : 'Sin costo'))+'</strong></p> </div> </div>';

			$mainTableAct.append(html);

			if(isMasivo)
				total+=totalCosto;
			else
				total+=Number(servicio.costo);
		}

		function updateTableRemove(servicio){

			var totalLineas = 0;
			var html = '';

			if(isMasivo){
				totalLineas = dataServicios.length-getTotalLineasServicio(servicio.id);
			}

			if(isMasivo && totalLineas<1)
				html = '';
			else
				html = '<div class="col-sm-12 col-xs-12 center-block flexbox  v-align-center" id="c-servicio-'+servicio.id+'"> <div class="'+(isMasivo ? 'col-sm-4 col-xs-3' : 'col-xs-7 col-sm-7')+' flexbox"> <p title="'+servicio.nombre+'">'+servicio.nombre+'</p> </div> '+(isMasivo ? '<div class="col-sm-2 col-xs-3 h-align-center flexbox"><p><small class="txt-100 description">'+totalLineas+'</small></p></div><div class="col-sm-3 col-xs-3 h-align-center flexbox"><p><strong> - </strong></p></div>' : '')+'<div class="'+(isMasivo ? 'col-sm-3 col-xs-3' : 'col-sm-5 col-xs-5')+' flexbox h-align-center"> <p><strong> - </strong></p> </div> </div>';

			$mainTableDes.append(html);

		}
		function initActionsModalAuxiliar(){

			// $('#modal-confirmar-autogestion').on('click', '#btn-confirmar-autogestion', function(){

			// 	$(_modalServicios.element+' #listado-confirmacion-autogestion').submit();

			// });

		}

	}

	function updateSelectData($switch){
		var $parent = $switch.closest('.servicio-item');
		var index = ( typeof $switch.data('index') != 'undefined' ? $switch.data('index') : null );

		var $select = $parent.find('.extra-select');

		if($select.length>0)
			if($switch.is(":checked")){
				var $container = $parent.find('.servicios-dropdown-select');
				$container.removeClass('hidden');
				$select.addClass('required');
				var preselected = ( typeof $select.data('preselected') != 'undefined' ? $select.data('preselected') : null );
				if(preselected!=null){
					$select.val(preselected);
					$select.trigger('change');
				}
			}
			else{
				var $parent2 = $switch.closest('.servicios-li-content');
				var $priceUpdate = $parent2.find('.info-servicio .txt-container small strong');
				$priceUpdate.html('$0.00');
				var $container = $parent.find('.servicios-dropdown-select');
				$container.addClass('hidden');
				$select.removeClass('required');
				$select.val('');
			}

	}

	function setActions(){
		$(".cmn-toggle.switch-input").change(function() {
			var $element = $(this);
			changeSwitch($element);
			updateSelectData($element);
		});

		$(".servicios-tooltip-container").on('click', '.btn-resumen', function(e){
			e.preventDefault();
			checkModalToOpen();
		});

		$(".button-container").on('click', '.mostrar-servicios-btn', function(e){
			e.preventDefault();
			checkModalToOpen();
		});

		$(".servicios-li").on('change', '.extra-select', function(){

			var $select = $(this);
			var index = ( typeof $select.data('index') != 'undefined' ? $select.data('index') : null );

			cleanExtraErrors();

			$('.extra-select').val($select.val());

			var $parent = $select.closest('.servicios-li-content');
			var $priceUpdate = $parent.find('.info-servicio .txt-container small strong');

			if(index!=null){

				var $element = $('#cmn-toggle-'+dataServicios[index].id);
				var $selected = $select.find(':selected');
				var costo = (typeof $selected.data('costo') ? $selected.data('costo') : '');
				var name = (typeof $selected.data('name') ? 'Más Megas '+$selected.data('name') : 'Internet');
				var single = (typeof $selected.data('single') ? $selected.data('single') : '');

				if(costo != ''){
					$element.prop('checked', true);
					dataServicios[index].costo = costo;
					$priceUpdate.html('$'+Number(costo).toFixed(2));
				}
				else{
					$element.prop('checked', false);
					$priceUpdate.html('$0.00');
					costo = '0.00';
				}

				dataServicios[index].nombre = name;

				/**Actualizar el dropdown**/
				var $dropdowncontainer = $parent.find('.dropdown-selected-option');
				$dropdowncontainer.find('.main .valor').html(single);
				$dropdowncontainer.find('.value .valor').html('$'+costo);
				/**Fin actualizar el dropdown**/

				changeSwitch($element);

			}

		});

		$('#checkbox-autogestion-terminos').change(function() {
			$('#btn-contratar-servicios').prop('disabled', !validateFormData());
		});

		$('#btn-contratar-servicios').click(function(){
			if(!sendingData){
				var urlPost = ( typeof $(this).data('post') != 'undefined' ? $(this).data('post') : null );
				sendData('.servicios-block', urlPost);
			}
		});
		/**
			Ordenar elementos de listado de líneas
		**/
		$('.has-filters .order-by-html').on('click', 'button', function(e){
			var opciones = ( typeof $(this).data('opc') != 'undefined' ? $(this).data('opc') : null );

			var main = ( typeof $(this).closest('.has-filters').data('order') != 'undefined' ? $(this).closest('.has-filters').data('order') : null );

			if(opciones!=null && main!=null){
				var $main= $(main);
				var $children = $main.children('.linea-batch');
				sorted = orderItemsHTML(opciones, $main, $children);
			}


		});

		/**
			Mostrar/Ocultar tablas
		**/
		$('.collapse-table-block').on('click', '.hide-show-table', function(e){
			var table = ( typeof $(this).data('table') != 'undefined' ? $(this).data('table') : null );
			if(table!=null){
				var text = $(this).text();
    			$(this).text(
        		text == "Mostrar detalle" ? "Ocultar detalle" : "Mostrar detalle");
				$(table).slideToggle( 500 )
			}
		});

		$('#modal-servicios').on('click', '.btn-terminos-servicios', function(e){

			e.preventDefault();

			var $button = $(this),
			$container = $('.terminos-container-modal'),
			$terminosContainer = $container.find('#terminos-container, .terminos-container'),
			speed = 300;

			$terminosContainer.toggleClass('visible');

			if($terminosContainer.hasClass('visible')){

				var tyc = ( typeof $button.data('tyc')!='undefined' ? $button.data('tyc') : ''),
				nombre = ( typeof $button.data('name')!='undefined' ? $button.data('name') : '');

				$('#tyc-servicio').html(tyc);
				$('#tyc-name').html(nombre);

				if(!is_mobile())
					$terminosContainer.fadeIn(300);
				else
					$terminosContainer.show();
			}
			else{
				if(!is_mobile())
					$terminosContainer.fadeOut(300);
				else
					$terminosContainer.hide();
			}
		});

		$('.terminos-container-modal #terminos-container .close-container .icon').click(function(e){
			e.preventDefault();

			var $button = $(this),
				$container = $('.terminos-container-modal'),
				$terminosContainer = $container.find('#terminos-container, .terminos-container');

			if(!is_mobile())
				$terminosContainer.fadeOut(300);
			else
				$terminosContainer.hide();

			$terminosContainer.removeClass('visible');

		});
	}

	function sendData(form, urlPOST){
		sendingData = true;
		$(form).find('button[type="submit"]').prop('disabled', true);

		var self = $(form).serialize();
		var redirect = urlPOST;
		//loadingIcon(form, true);

		urlPOST = checkDevelopmentPostHTML(urlPOST);

		$.post(  urlPOST , self )
		.done(function( data ) {

		  	//loadingIcon(form, false);
		  	Services.servicios.contratarServiciosSuccessCallback(data, form, redirect);
			sendingData = false;

		 })
		.fail(function( jqxhr, textStatus, error ) {
			//loadingIcon(form, false);
		  	Services.servicios.contratarServiciosFailCallback(error, form);
		  	sendingData = false;
		});
	}

	function cleanExtraErrors(){
		var $select = $('.extra-select');
		$select.removeClass('error').removeClass('error-dd');
		$('.extra-select-block').removeClass('error').removeClass('error-dd');
		$('.label-error').remove();
	}

	function validateFormData(){
		var $select = $('#servicios-listado-block .extra-select.required');

		var selectValid = true;

		if($select.length>0)
			selectValid= validateSelect($select);

		if($('#checkbox-autogestion-terminos').is(":checked") && selectValid)
			return true;

		return false;

	}


	function extraSelectDesktop(){
		$('.dropdown-select .ds-selected').on('click', function(e) {
			e.stopPropagation();
			var $select = $(this).parent('.dropdown-select');
		  	$select.find('.dd').slideToggle('fast');
		});

		$('.dropdown-select .dd ul li').on('click', function() {
			var $selected = $(this);
			var $drowpdown = $selected.closest('.dropdown-select');
		  	$drowpdown.find('.dd').hide();

		  	updateSelectedDropdown($selected, $drowpdown);
		});

		function getSelectedValue(id) {
		  return $("#" + id).find(".ds-selected a span.value").html();
		}

		$(document).bind('click', function(e) {
		  var $clicked = $(e.target);
		  if (!$clicked.parents().hasClass("dropdown")) $(".dropdown-select .dd").hide();
		});

	}

	function updateSelectedDropdown($selected, $dropdown){
		var value = $selected.data('value'),
		single = $selected.data('single'),
		costo = $selected.data('costo');

		var $parent = $dropdown.closest('.servicios-li-content');
		var $select = $parent.find('div.extra-select-block select');
		var $dropdowncontainer = $dropdown.find('.dropdown-selected-option');

		$dropdowncontainer.find('.main .valor').html(single);
		$dropdowncontainer.find('.value .valor').html('$'+costo);

		$select.val(value);
		$select.trigger('change');

	}

	function checkModalToOpen(){

		var $select = $('#servicios-listado-block .extra-select.required');
		var valid = true;

		if($select.length>0)
			valid = validateSelect($select);

		if(valid == true)
			modalServicios.openModal();


	}

	function validateSelect($selects){
		var valid = true;
		var $first = null;

		$selects.each(function (index, select) {
			var $select = $(this);

			if($select.val() === ''){
				if($first == null)
					$first = $select;

				valid = false;

				var $parent = $select.parent('');

				$select.addClass('error').addClass('error-dd');
				$('.extra-select-block').addClass('error').addClass('error-dd');

				if($parent.parent().find('.label-error').length==0)
					$( '<label class="error error-dd label-error">Elige una opción para continuar.</label>' ).insertAfter( $parent );

				return;
			}
		});

		if($first!=null)
			scrollToElement($first);

		return valid;
	}




	function changeSwitch($switch){

		var $parent = $switch.closest('.servicio-item');
		var index = ( typeof $switch.data('index') != 'undefined' ? $switch.data('index') : null );

		var $select = $parent.find('.extra-select');

		if($switch.is(":checked")){
			if(index!=null)
				agregarCarrito(index, $parent);
		}
		else{
			if(index!=null)
				eliminarCarrito(index, $parent);
		}

		updateTooltipVisibility();

	}

	function updateTooltipVisibility(){

		var tMod = getTotalModificados();

		$('.total-servicios').html(tMod);

		if(tMod>0){
			$('.servicios-tooltip-container').addClass('active');
			$('.mostrar-servicios-btn').prop('disabled', false);
		}
		else{
			$('.servicios-tooltip-container').removeClass('active');
			$('.mostrar-servicios-btn').prop('disabled', true);
		}

	}

	function getTotalModificados(){

		var totalModificados = 0;

		$.each(dataServicios, function( index, servicio ) {

			if(servicio.activoInicial != servicio.activoFinal){
				totalModificados+=1;
			}

		});

		return totalModificados;
	}

	function agregarCarrito(index, $parent){


		$parent.find('.status').html(accion);
		$parent.addClass('checked');

		dataServicios[index].activoFinal = true;

	}

	function eliminarCarrito(index, $parent){
		$parent.find('.status').html('');
		$parent.removeClass('checked');

		dataServicios[index].activoFinal = false;

	}

	function initServicios(){

		$listaServicios.each(function (index, value) {

			var $element = $(this);
			var meta = ( typeof $element.data('item') != 'undefined' ? $element.data('item') : null );


			if(meta != null){
				meta.activoInicial = (typeof meta.activoInicial != "undefined" && meta.activoInicial=="true" ? true : false);

				var elemento = generarHTMLServicios(meta, index);
				$element.html(elemento);

				if(meta.activoInicial && !isMasivo)
					$element.addClass('checked');

				meta.activoFinal = meta.activoInicial;

				dataServicios.push(meta);
			}
		});

		extraSelectDesktop();
	}

	function addOpcionesSelect(opciones, preselected, id, i){
		var html = {
			dropdown: '',
			select : ''
		};

		html.select = '<div class="servicios-dropdown-select hidden"><div class="data-write slt extra-select-block hidden-sm hidden-md hidden-lg"><select name="costo-extra-'+id+'" class="extra-select" data-index="'+i+'" data-preselected ="'+preselected+'">';
		html.select += '<option value="">Elige una opción</option>';

		html.dropdown ='<div class="servicios-dropdown-select hidden"><p class="dropdown-txt"><strong>Elige una opción:</strong></p><div class="inner-servicios-dropdown flexbox v-align-center"><div class="dropdown-select hidden-xs" id="costo-extra-'+id+'"> <div class="ds-selected"> <div class="dropdown-selected-option option flexbox"> <div class="ds-element main"> <span class="valor robusta">800</span> <span class="nombre">MB</span> </div> <div class="ds-element value"> <span class="valor robusta">$99</span> <span class="nombre">Costo</span> </div> <div class="col-sm-2 arrow"> <span class="icon i-angle-down"></span> </div> </div> </div> <div class="dd"> <div class="dropdown-select-options"> <ul>';

		$.each(opciones, function( index, opcion ) {
			html.select +='<option value="'+opcion.id+'" data-name="'+opcion.texto+'" data-costo="'+opcion.costo+'" data-single="'+opcion.single+'">'+opcion.single+'MB - $'+opcion.costo+' mensual</option>';

			html.dropdown += '<li data-name="'+opcion.texto+'" data-single="'+opcion.single+'" data-costo="'+opcion.costo+'" data-value="'+opcion.id+'"> <div class="option flexbox"> <div class="ds-element"> <span class="valor robusta">'+opcion.single+'</span> <span class="nombre">MB</span> </div> <div class="ds-element"> <span class="valor robusta">$'+opcion.costo+'</span> <span class="nombre">Costo</span> </div> </div> </li>';
		});

		html.select += '</select></div></div>';

		html.dropdown += '</ul> </div> </div> </div> <div class="vigencia-container hidden-xs"> <span class="valor robusta">Mensual</span> <span class="nombre">Vigencia</span> </div></div> </div>';

		return html;

	}

	function generarHTMLServicios(meta, index){

		var opciones = ( typeof meta.opciones != 'undefined' ? meta.opciones : null );
		var preselected = ( typeof meta.preselected != 'undefined' ? meta.preselected : null );

		var htmlOpciones = {
			dropdown: '',
			select : ''
		};

		if(opciones!=null && !sinCosto)
			htmlOpciones = addOpcionesSelect(opciones, preselected, meta.id, index);

		var html = '<div class="servicios-li-content has-inner-tc col-sm-12 col-xs-12"> <div class="col-sm-12 col-xs-12"><div class="col-sm-8 col-xs-8 flexbox"> <span class="icon '+( meta.icono ? meta.icono : 'io-Phone' )+'"></span> <div class="info-servicio col-sm-10 col-xs-12"> <label class="txt-container"> <strong class="txt-underline">'+meta.nombre+'</strong> ';
			html += (typeof meta.costo != 'undefined' && !sinCosto) ?'<small>Cargo mensual por servicio <strong>$'+meta.costo+'</strong></small>' : '<small><strong></strong></small>';
			html += ' </label> <p>'+meta.descripcion+'</p>'+htmlOpciones.dropdown+' <a href="" class="btn-terminos-general hidden-xs">Ver Términos y condiciones</a></div> </div> <div class="col-sm-4 col-xs-4 flexbox"> <div class="switch-container"> <div class="switch"> <input id="cmn-toggle-'+meta.id+'" class="cmn-toggle switch-input" type="checkbox" '+(meta.activoInicial ? 'checked' : '')+' value="'+meta.id+'" data-index="'+index+'"> <label for="cmn-toggle-'+meta.id+'"></label> </div> <p class="status">'+(meta.activoInicial ? accion : '')+'</p> </div> </div></div><div class="mobile-description"><p>'+meta.descripcion+'</p>'+htmlOpciones.select+'</div><a href="" class="btn-terminos-general mobile-btn hidden-sm hidden-md hidden-lg">Ver Términos y condiciones</a><div class="terminos-container-general-block"><div class="triangle-tooltip fadein terminos-container col-sm-12 col-xs-12"> <div class="head-content col-sm-12"> <div class="close-container col-sm-12 col-xs-12"><span class="icon io-CloseSession" data-hide=".terminos-container"></span></div> </div> <div class="terminos-y-condiciones-block"> <div class="head-content col-sm-12"> <p class="col-sm-10 col-xs-10"><strong>Términos y condiciones</strong></p> </div> <p>'+meta.tyc+'</p> </div> </div></div> </div>';



		return html;
	}



	return{
		inicializar: function(){
			initServicios();
			setActions();
			checkFixedHeader();
		}
	}
})();
var autogestionTelcel = (function(){

	var months = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];

	var elementsForm = {
		id : null,
		validator : null,
		sending: false
	};

	var autogestionSection = null,
	getListadoConfirmacionSection = null;

	//Simular error de que es invalido el archivo
	function showInvalidErrorArchivo(){
		var msg = 'Este archivo está dañado o es ilegible, intenta con un nuevo archivo.';

		$('#archivo-invalido').remove();
		$('.lineas-archivo .extra-info').hide();
		$('.lineas-archivo .add-lines-ge-mod' ).append('<div class="error-dd error" id="archivo-invalido">'+msg+'</div>');
		$('#archivo').parent().addClass('error');

		$('#autogestion-form').find('button[type="submit"]').prop('disabled', true);
	}

	/** confirmación de líneas **/
	function initConfirmacionListado(){
		var $sinsuspender = $('#listado-sin-autogestion-container');

		initActions();

		function initActions(){
			/**
				Mostrar/Ocultar listado de líneas sin suspender
			**/
			$sinsuspender.on('click', '.btn-like-a', function(e){
				e.preventDefault();
				$sinsuspender.toggleClass('active');
				$sinsuspender.find('.listado-container').slideToggle( 800 );
			});

			/**
				Mostrar información extra del folio contenedor.
			**/
			$('.linea-batch .folio-container').on('click', 'button', function(){

				var $element = $(this).closest('.linea-batch');

				if($element.hasClass('active')){
					$element.removeClass('active');
					$(this).find('span').removeClass('i-angle-up');
				}
				else{

					if(is_mobile())
					{
						$('.linea-batch .folio-container').removeClass('active');
						$('.linea-batch .folio-container span').removeClass('i-angle-up');
					}

					$element.addClass('active');
					$(this).find('span').addClass('i-angle-up');
				}


			});

			$('.linea-batch').on('click', '.show-details', function(){
				var $element = $(this).parent().parent().find('.extra-info');
				$element.toggleClass('active');

				$(this).toggleClass('active');

			});

		}
	}
	/** fin confirmación de líneas **/

	/**suspension single**/
	function initFormularioSuspensionSingle(){
		var $mainForm = $('#autogestion-form-single');

		validateMainForm();

		function validateMainForm(){

			disableSumbitButton($mainForm, true);

			elementsForm['validator'] =
				$mainForm.validate({
				  rules: {
					checkboxAutogestion : {
						required : true
					}
				  },
				  messages: {
					checkboxAutogestion : {
						required : "Acepta los términos y condiciones para continuar"
					}
				   },
					errorPlacement: function(error, $element) {
					   	/** no mostramos errores **/
					},
			        submitHandler: function(form) {
						if(!elementsForm['sending']){
							sendFormData(form);
				  		}
					}
			});

			checkGeneralValidForm($mainForm);

			function sendFormData(form){
				elementsForm['sending'] = true;
				$(form).find('button[type="submit"]').prop('disabled', true);

				var self = $(form).serialize();

				var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

				/**Quitar una vez en producción**/
				var sendTo = urlPOST;

				urlPOST = checkDevelopmentPostHTML(urlPOST);

				$.post(  urlPOST , self )
				.done(function( data ) {
				  	Services.autogestion.singleSuspensionCallSuccess(data, form, sendTo );
					elementsForm['sending'] = false;

				 })
				.fail(function( jqxhr, textStatus, error ) {
				  	//Mensaje de error del sistema
				  	Services.autogestion.singleSuspensionCallFail(error, form);
				  	elementsForm['sending'] = false;
				});
			}
		}
	}
	/**fin suspension single**/

	function updateFormPostURL(value){
		var $single = $('#autogestion-form-single');
		var $masivo = $('#autogestion-form');

		var singlePosts = {
			'mismo-chip-equipo' : 'reactivacion-3.html',
			'nuevo-chip-equipo' : 'reactivacion-2.html',
			'cambio-chip': 'cambio-2-c.html',
			'cambio-equipo': 'cambio-2-b.html',
			'cambio-equipo-y-chip': 'cambio-2-a.html',
			'activar-servicios' : 'servicios-2.html',
			'desactivar-servicios' : 'servicios-2-desactivar.html',
			'facturacion-electronica-si' : 'facturacion-electronica-2.html',
			'facturacion-electronica-no' : 'facturacion-electronica-2.html',
			'aviso-visita-cac' : 'citas-2-a.html',
			'agendar-cita-cac' : 'citas-2-b.html',
			'cobro-prepago' : 'cobro-de-datos-3-una-linea.html',
			'cobro-postpago' : 'cobro-de-datos-3-una-linea.html'
		};

		var masivoPosts = {
			'mismo-chip-equipo' : 'reactivacion-masivo-2-a.html',
			'nuevo-chip-equipo' : 'reactivacion-masivo-2-b.html',
			'cambio-chip': 'cambio-masivo-2-c.html',
			'cambio-equipo': 'cambio-masivo-2-b.html',
			'cambio-equipo-y-chip': 'cambio-masivo-2-a.html',
			'activar-servicios' : 'servicios-masivo-2.html',
			'desactivar-servicios' : 'servicios-masivo-2-desactivar.html',
			'facturacion-electronica-si' : 'facturacion-electronica-masivo-2.html',
			'facturacion-electronica-no' : 'facturacion-electronica-masivo-2.html',
			'aviso-visita-cac' : 'citas-masivo-2-a.html',
			'agendar-cita-cac' : 'citas-masivo-2-b.html',
			'cobro-prepago' : 'cobro-de-datos-2.html',
			'cobro-postpago' : 'cobro-de-datos-2.html'
		};

		//Single
		if($single.length>0)
			$single.prop('action', singlePosts[value]);
		//Masivo
		else{
			$masivo.prop('action', masivoPosts[value]);
			$masivo.data('actionmobile', singlePosts[value]);
		}

	}

	/**autogestion single**/
	function initFormularioGeneralSingle(){
		var $mainForm = $('#autogestion-form-single');
		initActions();
		validateMainForm();
		function initActions(){
			/**
				Setea la info del Motivo
			**/
			$('.motivo-autogestion').change(function() {
				var $checkbox = $(this);

				var buttontext =  (typeof $checkbox.data('btexto')!='undefined' ? $checkbox.data('btexto') : null );

				if(buttontext != null)
					$('#autogestion-btn').html(buttontext);

				updateFormPostURL($checkbox.val());
			});

		}


		function validateMainForm(){

			disableSumbitButton($mainForm, true);

			elementsForm['validator'] =
				$mainForm.validate({
				  rules: {
				  	motivoAutogestion : {
				  		required : true
				  	},
					checkboxAutogestion : {
						required : true
					}
				  },
				  messages: {
					 checkboxAutogestion : {
						required : "Acepta los términos y condiciones para continuar"
					}
				   },
					errorPlacement: function(error, $element) {
					   /**No agregamos los mensajes**/
					},
			        submitHandler: function(form) {
						if(!elementsForm['sending']){
							sendFormData(form);
				  		}
					}
			});

			checkGeneralValidForm($mainForm);

			function sendFormData(form){
				elementsForm['sending'] = true;
				$(form).find('button[type="submit"]').prop('disabled', true);

				var self = $(form).serialize();

				var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

				/**Quitar una vez en producción**/
				var sendTo = urlPOST;

				urlPOST = checkDevelopmentPostHTML(urlPOST);

				$.post(  urlPOST , self )
				.done(function( data ) {
				  	Services.autogestion.singleAutogestionGeneralCallSuccess(data, form, sendTo );
					elementsForm['sending'] = false;

				 })
				.fail(function( jqxhr, textStatus, error ) {
				  	//Mensaje de error del sistema
				  	Services.autogestion.singleAutogestionGeneralCallFail(error, form);
				  	elementsForm['sending'] = false;
				});
			}
		}

	}
	/**fin autogestion single**/

	/**fomulario suspensión masivo**/
	function initFormularioSuspensionMasivo(){
		var $mainForm = $('#autogestion-form');

		var tipoIngreso = null;
		var solicitarCHIP = false;

		initActions();
		validateMainForm();

		function validateMainForm(){

			disableSumbitButton($mainForm, true);

			elementsForm['validator'] =
				$mainForm.validate({
					  rules: {
						archivo: {
							extension: "xls",
							filesize: 10000000
						},
						motivoAutogestion: {
							required: true
						},
						checkboxAutogestion: {
							required: true
						}
					  },
					  messages: {
						 archivo: {
						   required: "Ingresa un archivo de 10 MB máximo.",
						   extension: "Ingresa un archivo con extensión: .xls",
						   filesize: "Ingresa un archivo de 10 MB máximo."
						 },
						 motivoAutogestion: {
						   required: "Selecciona un motivo.",
						 },
						 checkboxAutogestion: {
						   required: "Acepta términos y condiciones.",
						 }
					   },
					   errorClass : "error-dd error",
						errorElement : 'div',
						errorPlacement: function(error, element) {

							var elementInput = element[0];

							if(elementInput['id']==='archivo' && $(elementInput).val() != ''){
								$('.lineas-archivo .extra-info').hide();
								error.appendTo( $('.lineas-archivo .add-lines-ge-mod' ));
								element.parent().addClass('error');
							}
						},
				   		onclick: false,
						success: function ($error) {
							if($error.length>0 && $('#autogestion-form #archivo').val() != ''){
								$('.lineas-archivo .extra-info').hide();
								$('.lineas-archivo .file.error' ).removeClass('error');
				   				$error.remove();
							}

				        },
				        submitHandler: function(form) {
							if(!elementsForm['sending']){
								sendFormData(form);
					  		}
						}

				});

				function sendFormData(form){
					elementsForm['sending'] = true;
					$(form).find('button[type="submit"]').prop('disabled', true);

					var self = $(form).serialize();

					var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

					/**Quitar una vez en producción y aqui solo checamos si es una línea en development para mandar a otra liga**/
					var sendTo = ( (ingresarLineasComponentTotal ==1 && is_mobile() && typeof $(form).data('actionmobile') != 'undefined') ? $(form).data('actionmobile') : urlPOST);

					urlPOST = checkDevelopmentPostHTML(urlPOST);

					$.post(  urlPOST , self )
					.done(function( data ) {
					  	Services.autogestion.masivoSuspensionCallSuccess(data, form, sendTo, showInvalidErrorArchivo );
						elementsForm['sending'] = false;
					 })
					.fail(function( jqxhr, textStatus, error ) {
					  	//Mensaje de error del sistema
					  	Services.autogestion.masivoSuspensionCallFail(error, form);
					  	elementsForm['sending'] = false;
					});
				}
		}

		function validateFormData(){

			var dataLineas = [];
			var lineasValid = false;
			//var dataArchivo = ingresarLineasComponent.getDataArchivo();

			var dataType = ingresarLineasComponent.getType();

			if(dataType === '.componente-lineas-block .lineas-autocomplete')
				dataLineas = ingresarLineasComponent.getDataAutocomplete();
			else if(dataType === '.componente-lineas-block .lineas-arbol')
				dataLineas = ingresarLineasComponent.getDataArbol();
			else
				dataLineas.push(null);

			if(is_admin_mode() && !is_mobile()){
				if(dataLineas.length>1 && $mainForm.valid())
					lineasValid = true;
			}
			else{
				if(dataLineas.length>0 && $mainForm.valid())
					lineasValid = true;
			}

	    	$('#lineas-hidden-input').val(JSON.stringify(dataLineas));

			if($('#checkbox-autogestion-terminos').is(":checked") && $('.motivo-autogestion').is(":checked") && lineasValid && (!solicitarCHIP || (solicitarCHIP && $('#nombre-cac').val().length>0)))
				return true;

			return false;
		}




		function resetMainForm(){

			$mainForm.find("input[type=text], input[type=email], input[type=password], select").val("");
			$mainForm.find("input[type=checkbox], input[type=radio]").prop("checked", false);
			$mainForm.find('button[type="submit"]').prop('disabled', true);
			$mainForm.find('#chip-cac-container').removeClass('active');

			if(elementsForm['validator']){
				elementsForm['validator'].resetForm();
			}
		}


		function initActions(){

			/**
				Cuando se esconda el step 2
			**/
			var fullReset = false;

			$('#componente-ingresar-lineas .btn-al').on('click', function(event) {
				fullReset = true;
			});

			$('#autogestion-paso-2').on('hide', function(event) {
				var target = $(event.target).attr('id');
				if(target==='autogestion-paso-2' && fullReset)
			      resetMainForm();

			  	fullReset = false;
			});

			/**
				Setea la info del Motivo
			**/
			$('.motivo-autogestion').change(function() {
				$('#suspender-btn').prop('disabled', !validateFormData());
			});

			/**
				Checar cuando cambia el checkbox
			**/

			$('#checkbox-autogestion-terminos').change(function() {

				$('#suspender-btn').prop('disabled', !validateFormData());
			});

			// $('body').bind('resetManualForm', '#autogestion-form', function(){
			// 	 resetMainForm();
			// 	 $('#autogestion-paso-2').hide();
			// });
		}

	}
	/**FIN fomulario suspensión masivo**/

	//FORMULARIO AUTOGESTION MASIVO
	function initFormularioGeneralMasivo(){

		var $mainForm = $('#autogestion-form');

		var tipoIngreso = null;

		initActions();
		validateMainForm();

		function validateMainForm(){

			disableSumbitButton($mainForm, true);

			elementsForm['validator'] =
				$mainForm.validate({
					  rules: {
						archivo: {
							extension: "xls",
							filesize: 10000000
						},
						motivoAutogestion: {
							required: true
						},
						checkboxAutogestion: {
							required: true
						}
					  },
					  messages: {
						 archivo: {
						   required: "Ingresa un archivo de 10 MB máximo.",
						   extension: "Ingresa un archivo con extensión: .xls",
						   filesize: "Ingresa un archivo de 10 MB máximo."
						 },
						 motivoAutogestion: {
						   required: "Selecciona un motivo.",
						 },
						 checkboxAutogestion: {
						   required: "Acepta términos y condiciones.",
						 }
					   },
						errorClass : "error-dd error",
						errorElement : 'div',
						errorPlacement: function(error, element) {
							var elementInput = element[0];
							if(element[0]['id']==='archivo' && $(elementInput).val() != ''){
								$('.lineas-archivo .extra-info').hide();
								error.appendTo( $('.lineas-archivo .add-lines-ge-mod' ));
								element.parent().addClass('error');

							}
						},
						success: function ($error) {
							if($error.length>0 && $('#archivo').val() != ''){
								$('.lineas-archivo .extra-info').hide();
								$('.lineas-archivo .file.error' ).removeClass('error');
				   				$error.remove();
							}

				        },
				        submitHandler: function(form) {
							if(!elementsForm['sending']){
								sendFormData(form);
					  		}
						}
				});

				function sendFormData(form){
					elementsForm['sending'] = true;
					$(form).find('button[type="submit"]').prop('disabled', true);

					var self = $(form).serialize();

					var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

					/**Quitar una vez en producción y aqui solo checamos si es una línea en development para mandar a otra liga**/
					var sendTo = ( (ingresarLineasComponentTotal ==1 && is_mobile() && typeof $(form).data('actionmobile') != 'undefined') ? $(form).data('actionmobile') : urlPOST);

					urlPOST = checkDevelopmentPostHTML(urlPOST);

					$.post(  urlPOST , self )
					.done(function( data ) {
					  	Services.autogestion.masivoAutogestionGeneralCallSuccess(data, form, sendTo, showInvalidErrorArchivo );
						elementsForm['sending'] = false;
					 })
					.fail(function( jqxhr, textStatus, error ) {
					  	//Mensaje de error del sistema
					  	Services.autogestion.masivoAutogestionGeneralCallFail(error, form);
					  	elementsForm['sending'] = false;
					});
				}
		}


		function validateFormData(){


			var dataLineas = [];
			var lineasValid = false;
			//var dataArchivo = ingresarLineasComponent.getDataArchivo();

			var dataType = ingresarLineasComponent.getType();

			if(dataType === '.componente-lineas-block .lineas-autocomplete')
				dataLineas = ingresarLineasComponent.getDataAutocomplete();
			else if(dataType === '.componente-lineas-block .lineas-arbol')
				dataLineas = ingresarLineasComponent.getDataArbol();
			else
				dataLineas.push(null);

			var $motivo = $('input[name="motivoAutogestion"]:checked').val(),
	  		inAdmin = (typeof  $motivo!= 'undefined' && $motivo == 'nuevo-chip-equipo' ? false : true);

			if(is_admin_mode() && inAdmin && !is_mobile()){
				if(dataLineas.length>1 && $mainForm.valid())
					lineasValid = true;
			}
			else{
				if(dataLineas.length>0 && $mainForm.valid())
					lineasValid = true;
			}

	    	$('#lineas-hidden-input').val(JSON.stringify(dataLineas));


	    	// var data = $('#autogestion-form').serialize();

			if($('#checkbox-autogestion-terminos').is(":checked") && $('.motivo-autogestion').is(":checked") && lineasValid)
				return true;

			return false;
		}


		function initActions(){

			/**
				Cuando se esconda el step 2
			**/

			var fullReset = false;

			$('#componente-ingresar-lineas .btn-al').on('click', function(event) {
				fullReset = true;
			});

			$('#autogestion-paso-2').on('hide', function(event) {
				var target = $(event.target).attr('id');
				if(target==='autogestion-paso-2' && fullReset)
			      resetMainForm();

			  	fullReset = false;
			});
			/**
				Setea la info del Motivo
			**/
			$('.motivo-autogestion').change(function() {
				var $checkbox = $(this);
				var buttontext =  (typeof $checkbox.data('btexto')!='undefined' ? $checkbox.data('btexto') : null );

				if(buttontext != null)
					$('#autogestion-btn').html(buttontext);

				$('#autogestion-btn').prop('disabled', !validateFormData());

				/**Quitar una vez en producción solo es para propositos de development y simular**/
				updateFormPostURL($checkbox.val());
			});

			/**
				Checar cuando cambia el checkbox
			**/

			$('#checkbox-autogestion-terminos').change(function() {

				$('#autogestion-btn').prop('disabled', !validateFormData());
			});
		}

		function resetMainForm(){
			$mainForm.find("input[type=text], input[type=email], input[type=password], select").val("");
			$mainForm.find("input[type=checkbox], input[type=radio]").prop("checked", false);
			$mainForm.find('button[type="submit"]').prop('disabled', true);

			if(elementsForm['validator']){
				elementsForm['validator'].resetForm();
			}
		}

	}
	//FIN FORMULARIO AUTOGESTION MASIVO

	//FORMULARIO Citas
	function initFormularioCitas(){

		var $mainForm = ($('#autogestion-form-single').length>0 ? $('#autogestion-form-single') : $('#autogestion-form') ),
		isSingle = $('#autogestion-form-single').length>0 ? true : false;
		initActions();
		validateMainForm();

		function validateMainForm(){

			disableSumbitButton($mainForm, true);

			elementsForm['validator'] =
				$mainForm.validate({
					  rules: {
						motivoAutogestion: {
							required: true
						}
					  },
					  messages: {
						 motivoAutogestion: {
						   required: "Selecciona un motivo.",
						 }
					   },
						errorClass : "error-dd error",
						errorElement : 'div',
						errorPlacement: function(error, element) {

						},
						success: function ($error) {

				        },
				        submitHandler: function(form) {
							if(!elementsForm['sending']){
								sendFormData(form);
					  		}
						}
				});

				function sendFormData(form){
					elementsForm['sending'] = true;
					$(form).find('button[type="submit"]').prop('disabled', true);

					var self = $(form).serialize();

					var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

					/**Quitar una vez en producción y aqui solo checamos si es una línea en development para mandar a otra liga**/
					var sendTo = ( (ingresarLineasComponentTotal ==1 && is_mobile() && typeof $(form).data('actionmobile') != 'undefined') ? $(form).data('actionmobile') : urlPOST);

					urlPOST = checkDevelopmentPostHTML(urlPOST);

					$.post(  urlPOST , self )
					.done(function( data ) {
					  	Services.autogestion.masivoAutogestionGeneralCallSuccess(data, form, sendTo, showInvalidErrorArchivo );
						elementsForm['sending'] = false;
					 })
					.fail(function( jqxhr, textStatus, error ) {
					  	//Mensaje de error del sistema
					  	Services.autogestion.masivoAutogestionGeneralCallFail(error, form);
					  	elementsForm['sending'] = false;
					});
				}
		}


		function validateFormData(){
			var lineasValid = false;
			var validTerminos = false;

			if(isSingle){
				lineasValid = true;
				validTerminos = $('#checkbox-autogestion-terminos').is(":checked")
			}
			else{
				var dataLineas = getDataAutocomplete();
				if(dataLineas.length>0 && $mainForm.valid())
					lineasValid = true;
		    	$('#lineas-hidden-input').val(JSON.stringify(dataLineas));
		    	validTerminos = true;
			}

			if(validTerminos && $('.motivo-autogestion').is(":checked") && lineasValid)
				return true;

			return false;
		}


		function getDataAutocomplete(){
			var tokens = $('#tokenfield-agregar-lineas').tokenfield('getTokens');

			return formatDataAutocomplete(tokens);
		}

		function formatDataAutocomplete(data){

			var dataT = null,
			elementsPost = [];

			$.each(data, function( index, item ) {
			 	dataT = {
			 		id : ( typeof item.id != 'undefined' ? item.id : null ),
			 		tipo : item.tipo,
			 		selected : (item.tipo == 'group' ? 'all' : 'single')
			 	};

			 	if(item.tipo=='general')
			 		dataT.value = item.value;

			 	elementsPost.push(dataT);
			});

			return elementsPost;
		}


		function initActions(){

			/**
				Cuando se esconda el step 2
			**/

			var fullReset = false;

			$('#autogestion-paso-2').on('hide', function(event) {
				var target = $(event.target).attr('id');
				if(target==='autogestion-paso-2' && fullReset)
			      resetMainForm();

			  	fullReset = false;
			});
			/**
				Setea la info del Motivo
			**/
			$('.motivo-autogestion').change(function() {
				var $checkbox = $(this);
				var buttontext =  (typeof $checkbox.data('btexto')!='undefined' ? $checkbox.data('btexto') : null );

				if(buttontext != null)
					$('#autogestion-btn').html(buttontext);

				$('#autogestion-btn').prop('disabled', !validateFormData());

				/**Quitar una vez en producción solo es para propositos de development y simular**/
				updateFormPostURL($checkbox.val());
			});

			$('#checkbox-autogestion-terminos').change(function() {
				$('#autogestion-btn').prop('disabled', !validateFormData());
			});
		}

		function resetMainForm(){

			$mainForm.find("input[type=text], input[type=email], input[type=password], select").val("");
			$mainForm.find("input[type=checkbox], input[type=radio]").prop("checked", false);
			$mainForm.find('button[type="submit"]').prop('disabled', true);

			$mainForm.find('#autogestion-paso-2').hide();

			if(elementsForm['validator']){
				elementsForm['validator'].resetForm();
			}
		}

	}
	//FIN FORMULARIO Citas

	//FORMULARIO RED PRIVADA
	function initFormularioRedPrivada(){
		var $mainForm = $('#autogestion-form');
		initActions();

		function validateFormData(){
			var lineasValid = false,
			dataLineas = [];

			var dataType = ingresarLineasComponent.getType();

			if(dataType === '.componente-lineas-block .lineas-autocomplete')
				dataLineas = ingresarLineasComponent.getDataAutocomplete();
			else if(dataType === '.componente-lineas-block .lineas-arbol')
				dataLineas = ingresarLineasComponent.getDataArbol();
			else
				dataLineas.push(null);

			if(dataLineas.length>0 && $mainForm.valid())
				lineasValid = true;

	    	if($('.motivos-autogestion-container').length>0)
	    		if($('.motivos-autogestion-container .motivo-autogestion:checked').length>0)
	    			lineasValid = true;
	    		else
	    			lineasValid = false;


	    	$('#lineas-hidden-input').val(JSON.stringify(dataLineas));

			if(lineasValid)
				return true;

			return false;
		}


		function getDataAutocomplete(){
			var tokens = $('#tokenfield-agregar-lineas').tokenfield('getTokens');

			return formatDataAutocomplete(tokens);
		}

		function formatDataAutocomplete(data){

			var dataT = null,
			elementsPost = [];

			$.each(data, function( index, item ) {
			 	dataT = {
			 		id : ( typeof item.id != 'undefined' ? item.id : null ),
			 		tipo : item.tipo,
			 		selected : (item.tipo == 'group' ? 'all' : 'single')
			 	};

			 	if(item.tipo=='general')
			 		dataT.value = item.value;

			 	elementsPost.push(dataT);
			});

			return elementsPost;
		}


		function initActions(){

			/**
				Cuando se esconda el step 2
			**/

			var fullReset = false;

			$('#componente-ingresar-lineas .btn-al').on('click', function(event) {
				fullReset = true;
			});

			$('#autogestion-paso-2').on('hide', function(event) {
				var target = $(event.target).attr('id');
				if(target==='autogestion-paso-2' && fullReset)
					resetMainForm();

			 	fullReset = false;
			});

			$('#autogestion-paso-2').on('show', function(event) {
				var target = $(event.target).attr('id');
				if(target==='autogestion-paso-2')
					$('#autogestion-btn').prop('disabled', !validateFormData());
			});

			/**
				Setea la info del Motivo
			**/
			$('.motivo-autogestion').change(function() {
				var $checkbox = $(this);
				var buttontext =  (typeof $checkbox.data('btexto')!='undefined' ? $checkbox.data('btexto') : null );

				if(buttontext != null)
					$('#autogestion-btn').html(buttontext);

				$('#autogestion-btn').prop('disabled', !validateFormData());

				/**Quitar una vez en producción solo es para propositos de development y simular**/
				updateFormPostURL($checkbox.val());
			});

			$('#autogestion-form').submit(function(e){
				e.preventDefault();
				if(!elementsForm['sending']){
					sendFormData();
		  		}
			});

			function sendFormData(){
				var form = '#autogestion-form';
				elementsForm['sending'] = true;
				$(form).find('button[type="submit"]').prop('disabled', true);

				var self = $(form).serialize();

				var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

				/**Quitar una vez en producción**/
				var sendTo = urlPOST;

				/**Quitar una vez en producción y aqui solo checamos si es una línea en development para mandar a otra liga**/
				var sendTo = ( (ingresarLineasComponentTotal == 1 && is_mobile() && typeof $(form).data('actionmobile') != 'undefined') ? $(form).data('actionmobile') : urlPOST);

				urlPOST = checkDevelopmentPostHTML(urlPOST);

				$.post(  urlPOST , self )
				.done(function( data ) {
				  	Services.autogestion.redPrivadaCallSuccess(data, form, sendTo );
					elementsForm['sending'] = false;

				 })
				.fail(function( jqxhr, textStatus, error ) {
				  	//Mensaje de error del sistema
				  	Services.autogestion.redPrivadaCallFail(error, form);
				  	elementsForm['sending'] = false;
				});
			}

		}

		function resetMainForm(){

			$mainForm.find("input[type=text], input[type=email], input[type=password], select").val("");
			$mainForm.find("input[type=checkbox], input[type=radio]").prop("checked", false);
			$mainForm.find('button[type="submit"]').prop('disabled', true);

			if(elementsForm['validator']){
				elementsForm['validator'].resetForm();
			}
		}

	}
	//FIN FORMULARIO RED PRIVADA

	//FORMULARIO ABONO DE SALDO
	function initFormularioAbonoDeSaldo(){
		var $mainForm = $('#autogestion-form-abono');
		initActions();

		function validateFormData(){
			var dataLineas = [];
			var lineasValid = false;

			var dataType = ingresarLineasComponent.getType();

			if(dataType === '.componente-lineas-block .lineas-autocomplete')
				dataLineas = ingresarLineasComponent.getDataAutocomplete();
			else if(dataType === '.componente-lineas-block .lineas-arbol')
				dataLineas = ingresarLineasComponent.getDataArbol();
			else
				dataLineas.push(null);

			if(dataLineas.length>0 && $('#monto').val()!='')
				lineasValid = true;


	    	$('#lineas-hidden-input').val(JSON.stringify(dataLineas));

			if(lineasValid)
				return true;

			return false;
		}


		function getDataAutocomplete(){
			var tokens = $('#tokenfield-agregar-lineas').tokenfield('getTokens');

			return formatDataAutocomplete(tokens);
		}

		function formatDataAutocomplete(data){

			var dataT = null,
			elementsPost = [];

			$.each(data, function( index, item ) {
			 	dataT = {
			 		id : ( typeof item.id != 'undefined' ? item.id : null ),
			 		tipo : item.tipo,
			 		selected : (item.tipo == 'group' ? 'all' : 'single')
			 	};

			 	if(item.tipo=='general')
			 		dataT.value = item.value;

			 	elementsPost.push(dataT);
			});

			return elementsPost;
		}


		function initActions(){

			/**
				Cuando se esconda el step 2
			**/

			var fullReset = false;

			$('#componente-ingresar-lineas .btn-al').on('click', function(event) {
				fullReset = true;
			});

			$('#autogestion-paso-2').on('show', function(event) {
				var target = $(event.target).attr('id');
				if(target==='autogestion-paso-2')
					$('#autogestion-btn').prop('disabled', !validateFormData());
			});

			/**
				Setea la info del Motivo
			**/
			$('#monto').change(function() {
				var $monto = $(this);

				if($monto.val()!='')
					$('#autogestion-paso-1').removeClass('hidden');
				else{
					$('#autogestion-paso-1').addClass('hidden');
					$('#autogestion-paso-2').hide();

					if(typeof ingresarLineasComponent != 'undefined')
						ingresarLineasComponent.reset();
				}

				$('#autogestion-btn').prop('disabled', !validateFormData());
			});

			$('#autogestion-form-abono').submit(function(e){
				e.preventDefault();
				if(!elementsForm['sending']){
					sendFormData();
		  		}
			});

			function sendFormData(){
				var form = '#autogestion-form-abono';
				elementsForm['sending'] = true;
				$(form).find('button[type="submit"]').prop('disabled', true);

				var self = $(form).serialize();

				var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

				/**Quitar una vez en producción**/
				var sendTo = urlPOST;

				/**Quitar una vez en producción y aqui solo checamos si es una línea en development para mandar a otra liga**/
				var sendTo = ( (ingresarLineasComponentTotal == 1 && is_mobile() && typeof $(form).data('actionmobile') != 'undefined') ? $(form).data('actionmobile') : urlPOST);

				urlPOST = checkDevelopmentPostHTML(urlPOST);

				$.post(  urlPOST , self )
				.done(function( data ) {
				  	Services.autogestion.abonoDeSaldoCallSuccess(data, form, sendTo );
					elementsForm['sending'] = false;

				 })
				.fail(function( jqxhr, textStatus, error ) {
				  	//Mensaje de error del sistema
				  	Services.autogestion.abonoDeSaldoCallFail(error, form);
				  	elementsForm['sending'] = false;
				});
			}

		}

		function resetMainForm(){

			$mainForm.find("input[type=text], input[type=email], input[type=password], select").val("");
			$mainForm.find("input[type=checkbox], input[type=radio]").prop("checked", false);
			$mainForm.find('button[type="submit"]').prop('disabled', true);

			$mainForm.find('#autogestion-paso-2').hide();

			if(elementsForm['validator']){
				elementsForm['validator'].resetForm();
			}
		}

	}
	//FIN FORMULARIO ABONO DE SALDO

	//Página de confirmación para autogestion
	function initConfirmacionAutogestion(){

		var $main = $('#listado-autogestion-container');

		var $listaconfirmar = $('#listado-confirmacion-autogestion');

		var $mainForm = $('#listado-confirmacion-autogestion');

		var $mainReactivacion = $('#autogestion-confirmacion.autogestion-reactivacion-block');

		var $mainCambio = $('#autogestion-confirmacion.autogestion-cambio-block');

		var $mainFacturacion = $('#autogestion-confirmacion.autogestion-facturacion-block');

		var $mainSertec = $('#autogestion-confirmacion.autogestion-sertec-block');

		var $mainControlCostos = $('#autogestion-confirmacion.autogestion-control-costos-block');

		var datosValidos = false,
		datosValidosInit = false;

		var validando = true;
		var doneValidando = false;
		var firstClick = true;
		var onlyRead = false;

		if($mainForm.hasClass('validated-data'))
			onlyRead = true;

		var lastdeleted = [];

		var dataListadoConfirmacion = [];

		var eliminarIndividual = false;

		var allChecked = false;

		var validarFormConfirmacion = (function(){
		var initComponent = false;

		function getAutogestionSection(){
			return ($mainReactivacion.length>0 ? 'reactivacion' : ($mainCambio.length>0 ? 'cambio' : ($mainFacturacion.length>0 ? ($mainFacturacion.hasClass('reporte-lineas') ? 'facturacion_lineas' : ($mainFacturacion.hasClass('reporte-facturas') ? 'facturacion_facturas' :'facturacion' ) ) : ( $mainSertec.length>0 ? 'sertec' : ( $mainControlCostos.length>0 ? 'controlcostos' : ( $('.autogestion-red-privada-block').length>0 || $('.autogestion-roaming-block').length>0 ? 'general_asignado' : 'general')) )) ));
		}

		autogestionSection = getAutogestionSection();

		var generarHTMLConfirmacion = {
			general : generarHTMLGeneral,
			general_asignado : generarHTMLGeneralAsignado,
			reactivacion : generarHTMLReactivacion,
			facturacion : generarHTMLFacturacion,
			facturacion_lineas : generarHTMLFacturacionLineas,
			facturacion_facturas : generarHTMLFacturacionFacturas,
			cambio : generarHTMLCambio,
			sertec : generarHTMLSertec,
			controlcostos : generarHTMLControlCostos
		};

		getListadoConfirmacionSection = typeof generarHTMLConfirmacion[autogestionSection] != 'undefined' ? generarHTMLConfirmacion[autogestionSection] : null ;


		function init(){
				elementsForm['validator'] =
					$mainForm.validate({
					ignore:":disabled",
					rules: {
						chip: {
						  	minlength: 19,
							exactlength: 19,
							required : true,
							digits : true
						},
						imei: {
						  	minlength: 15,
							exactlength: 15,
							required : true,
							digits : true
						}
				  	},
					messages: {
						chip:{
							exactlength: "Ingresa los 19 dígitos del chip.",
							minlength: "Ingresa los 19 dígitos del chip.",
							required : "Ingresa los 19 dígitos del chip.",
							digits: "Ingresa los 19 dígitos del chip."
						},
						imei :{
							exactlength: "Ingresa los 15 dígitos del IMEI.",
							minlength: "Ingresa los 15 dígitos del IMEI.",
							required : "Ingresa los 15 dígitos del IMEI.",
							digits: "Ingresa los 15 dígitos del IMEI."
						}
					},
					unhighlight: function(element, errorClass, validClass) {

						var $element = $(element);

						var index = ( typeof $element.data('index') != 'undefined' ? $element.data('index') : null );

						$element.parent().closest('label.show-error').remove();

						var $parent = $element.parent('.input-container');

					 	$parent.find('.icon-validation').addClass('i-check');

					 	$element.addClass('valid-element').removeClass('error not-valid-element');

					 	var $container = $parent.closest('.value-container');

			   			actualizarElementoListado(index, 'validated', true);

						var $parentContainer = $parent.closest('.linea-batch');

			        },
			        highlight : function(element, errorClass){
			        	var $element = $(element);
			        	$element.parent().closest('label.show-error').remove();

			        	var $parent = $element.parent('.input-container');

			        	$parent.find('.icon-validation').removeClass('i-check');

			        	var $container = $parent.closest('.value-container');

			        	$element.addClass('error not-valid-element').removeClass('valid-element');

			        },
			        errorPlacement: function(error, element) {
			        	var $element = element;
			        	var index = ( typeof $element.data('index') != 'undefined' ? $element.data('index') : null );

			        	var $parent = $element.parent('.input-container');
						error.insertAfter( $parent );
			        	actualizarElementoListado(index, 'validated', true);

					}
				});

				initComponent = true;
				addRules();
			}

			function addRules(init){

				$("[name^=chip]").each(function () {

				    $(this).rules("add", {
				        minlength: 19,
						exactlength: 19,
						required : true,
						digits : true,
						messages : {
					        exactlength: "Ingresa los 19 dígitos del chip.",
							minlength: "Ingresa los 19 dígitos del chip.",
							required : "Ingresa los 19 dígitos del chip.",
							digits: "Ingresa los 19 dígitos del chip."
				    	}

				    });

				});

				$("[name^=imei]").each(function () {

				    $(this).rules("add", {
				        minlength: 15,
						exactlength: 15,
						required : true,
						digits : true,
						messages : {
					        exactlength: "Ingresa los 15 dígitos del IMEI.",
							minlength: "Ingresa los 15 dígitos del IMEI.",
							required : "Ingresa los 15 dígitos del IMEI.",
							digits: "Ingresa los 15 dígitos del IMEI."
				    	}
				    });

				});

				checkThisValidForm();

				//Unicamente cuando se inicializa desde afuera
				if(typeof init != 'undefined')
				{
					var $button = $('.btn-autogestion-submit');

					if(datosValidosInit)
						$button.prop('disabled', false);
					else
						$button.prop('disabled', true);
				}
			}

			function checkThisValidForm(){
				$mainForm.find('input').on('keyup change input keydown', function (e) {
			        validateForm();
			    });
			}


		    function validateForm($input){

		    	var $button = $('.btn-autogestion-submit');
		    	datosValidos = $mainForm.validate().checkForm();

		    	if (datosValidos) {
		            $button.prop('disabled', false);
		        } else {
		           $button.prop('disabled', true);
		        }

		        if(typeof $input != 'undefined' && $input.is(':checkbox')){
		    		var $container = $input.closest('.linea-batch');
		    		var $elementIMEI = $container.find('.imei');
		    		var $elementCHIP = $container.find('.chip');

		    		if($elementIMEI.length>0 && $elementIMEI.val().length>0){
		    			$elementIMEI.valid();
		    		}

		    		if($elementCHIP.length>0 && $elementCHIP.val().length>0){
		    			$elementCHIP.valid();
		    		}
		    	}
		    }

			return{
				inicializar : init,
				checkButtonsActive: validateForm,
				addNewValidationRules : addRules,
				checkInit : function(){
					return initComponent;
				},
				validateFormErrors : validateForm
			}

		})();

		if($('.autogestion-confirmacion-block #listado-confirmacion-autogestion').length>0)
			validarFormConfirmacion.inicializar();

		initActions();
		onSubmitConfirmacionAutogestion();
		generarListadoConfirmacionInicial();
		preSelectAll();

		if(validarFormConfirmacion.checkInit())
			validarFormConfirmacion.addNewValidationRules(true);

		function preSelectAll(){
			$("#listado-autogestion-container .listado-header-autogestion .checkbox-container input").trigger('click');
		}

		var _modalConfirmarEliminar = {};
		var modalConfirmarEliminar = null;
		initmodalConfirmarEliminar();

		function initmodalConfirmarEliminar(){

			var lastLine = false;

			modalConfirmarEliminar = new modalesTelcel($('#modal-confirmar-eliminar'),{
				onInit : function(){
					initActionsModalAuxiliar();
				},
				onReset : function(){
					if($('#listado-confirmacion-autogestion .linea-batch input[type="checkbox"]:checked').length>0)
						$('.listado-header-autogestion button, .btn-autogestion-simular').prop('disabled', false);
					else
						$('.listado-header-autogestion button, .btn-autogestion-simular').prop('disabled', true);

					$('#modal-confirmar-eliminar .added-lines .div-nal').html('');
				},
				onOpen : function(){
					checkOneElement();
					updateTableData();
				}
			});


			function checkOneElement(){

				var allSelected = $('#listado-confirmacion-autogestion input[type="checkbox"]:checked').length == $('#listado-confirmacion-autogestion input[type="checkbox"]').length;

				var oneLeft = $('#listado-confirmacion-autogestion .linea-batch').length == 1;

				if( allSelected || oneLeft ){

					lastLine = true;

					$('#modal-confirmar-eliminar .last-line-confirmation').removeClass('hidden');
				}else{
					lastLine = false;
					$('#modal-confirmar-eliminar .last-line-confirmation').addClass('hidden');
				}
			}

			function updateTableData(){
				var $elements = null;

				if(!eliminarIndividual)
					$elements = $('#listado-confirmacion-autogestion .linea-batch input[type="checkbox"]:checked');
				else
					$elements = $('#listado-confirmacion-autogestion .linea-batch .delete-container .btn-delete');

				var totalchecked = $elements.length;

				$elements.each(function( index ) {
					var value = $(this).data('index');
					var identifier = ($mainFacturacion.length>0 ? dataListadoConfirmacion[value].cuenta : dataListadoConfirmacion[value].numero);
					lastdeleted.push(value);
				  	$('#modal-confirmar-eliminar .added-lines .div-nal').append('<div class="col-xs-12 '+(totalchecked>1 ? 'col-sm-6' : 'col-sm-12') +'"><p>'+identifier+'</p></div>');
				});

			}
			function initActionsModalAuxiliar(){

				$('#modal-confirmar-eliminar').on('click', '#btn-confirmar-eliminar', function(e){
					e.preventDefault();
					eliminarElementosListado();
					$('.listado-header-autogestion button, .btn-autogestion-simular').prop('disabled', true);
					modalConfirmarEliminar.closeModal();

					if(lastLine){
						var url = ( typeof $(this).data('redirect') != 'undefined' ? $(this).data('redirect') : homeURL );
						lastLine = false;
						window.location.href= url;
					}
				});

			}

		}

		var _modalConfirmarAutogestion = {};
		var modalConfirmarAutogestion = null;
		initmodalConfirmarAutogestion();

		function initmodalConfirmarAutogestion(){

			modalConfirmarAutogestion = new modalesTelcel($('#modal-confirmar-autogestion'),{
				onInit : function(){
					initActionsModalAuxiliar();
				},
				onOpen : function(){
					updateModalData();
				},
				onReset : function(){

				}
			});


			function updateModalData(){
				var selected = $('#listado-confirmacion-autogestion input[type="checkbox"]:checked').length;

				var total = $('#listado-confirmacion-autogestion input[type="checkbox"]').length;

				$('#modal-confirmar-autogestion .c-lines').html(selected);
				$('#modal-confirmar-autogestion .t-lines').html(total);
			}

			function initActionsModalAuxiliar(){

				$('#modal-confirmar-autogestion').on('click', '#btn-confirmar-autogestion', function(){

					$(_modalConfirmarAutogestion.element+' #listado-confirmacion-autogestion').submit();

				});

			}

		}

		function checkAllSelected(element){
			_modalConfirmarAutogestion.element = element;

			if(!allChecked)
				modalConfirmarAutogestion.openModal();
			else
				$(element+' #listado-confirmacion-autogestion').submit();
		}

		function onSubmitConfirmacionAutogestion(){
			$mainForm.submit(function( e ) {
				var form = '#listado-confirmacion-autogestion';
				e.preventDefault();

				sendFormData(form);
			});

			function sendFormData(form){
				elementsForm['sending'] = true;
				$(form).find('button[type="submit"]').prop('disabled', true);

				/*Id's*/
				var self = $(form).serialize();

				var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

				/**Quitar una vez en producción**/
				var sendTo = urlPOST;

				urlPOST = checkDevelopmentPostHTML(urlPOST);

				$.post(  urlPOST , self )
				.done(function( data ) {
				  	Services.autogestion.masivoAutogestionConfirmacionGeneralCallSuccess(data, form, sendTo, showInvalidErrorArchivo);
					elementsForm['sending'] = false;
				 })
				.fail(function( jqxhr, textStatus, error ) {
				  	//Mensaje de error del sistema
				  	Services.autogestion.masivoAutogestionConfirmacionGeneralCallFail(error, form);
				  	elementsForm['sending'] = false;
				});
			}
		}

		function submitForm(){
			$('#cambiar-lineas-btn').click(function(e){
				checkAllSelected('.autogestion-facturacion-block');
	    	});

			$('#autogestion-s-lineas-btn').click(function(e){
				checkAllSelected('.autogestion-suspension-block');
	    	});

			$('#autogestion-general-lineas-btn').click(function(e){
				checkAllSelected('.autogestion-general-block');
	    	});


			$('#modificar-lineas-btn').click(function(e){
				var $button = $(this);
				if(datosValidos){
					checkAllSelected('.autogestion-confirmacion-block');
				}
	    	});

	    	$('#validar-lineas-btn').click(function(e){
	    		var $button = $(this);
	    		checkButtonsAction($button);
	    	});


		}


		function checkButtonsAction($button){

   			if($('#listado-confirmacion-autogestion.autogestion-single').length>0)
				$('.autogestion-confirmacion-block #listado-confirmacion-autogestion').submit();
			else
				checkAllSelected('.autogestion-confirmacion-block');

		}

		function bindElementActions(){

			$("[name^=chip]").bind('input', function() {
				var $input = $(this);
				bindAction($input, 'chip');

			});

			$("[name^=imei]").bind('input', function() {
				var $input = $(this);
				bindAction($input, 'imei');
			});

			checkOnlyNumberElements();

			function bindAction($input, name){

				var value = $input.val();
				var index = ( typeof $input.data('index') != 'undefined' ? $input.data('index') : null );

				actualizarElementoListado(index, name, value);

				if(!firstClick){
					validElement($input);
				}

				// if(doneValidando){
				// 	resetValidaciones(false ,true, false,'Validar datos');
				// 	// if(elementsForm['validator']){
				// 	// 	elementsForm['validator'].resetForm();
				// 	// }
				// }
			}
		}

		function validElement($input){

			var valid = $input.valid();

			if(!valid){
				var $parent = $input.parent('.input-container');

		        $parent.find('.icon-validation').removeClass('i-check');

		        $input.addClass('not-valid-element').removeClass('valid-element');
			}

		}

		//Fin validación
		function actualizarElementoListado(i, key, value, error){

			if(i!=null && typeof dataListadoConfirmacion[i][key] != 'undefined')
			{
				if(typeof error != 'undefined')
					dataListadoConfirmacion[i]['error'][key] = value;
				else
					dataListadoConfirmacion[i][key] = value;
			}

		}

		function validarDatosReactivacion(){

			var postData = [];

			$('#listado-confirmacion-autogestion .linea-batch input[type="checkbox"]:checked').each(function( index ) {
				var $linea = $(this).parent().closest('.linea-batch');
				var id = $(this).val();
				var $chip = $linea.find('input.chip');
				var chip = $chip.val();

				var $imei = $linea.find('input.imei');
				var imei = $imei.val();

				postData.push({'id': id, 'chip': chip, 'imei': imei});

			});

			return postData;
		}


		function initActions(){

			/**
				Ordenar elementos de listado de líneas a confirmar
			**/
			$main.on('click', '.order-by-modal button', function(e){

				var opciones = ( typeof $(this).data('opc') != 'undefined' ? $(this).data('opc') : null );
				var sorted = [];

				if(opciones!=null)
					sorted = sortByAZ(dataListadoConfirmacion, opciones.key);

				if(opciones.orderby == 'desc')
					sorted.reverse();

				dataListadoConfirmacion = sorted;

				generarListadoConfirmacion();

			});

			/**
				Eliminar varios elementos del listado de líneas a confirmar
			**/

			$main.on('click', '#btn-delete-all', function(e){
				e.preventDefault();
				eliminarIndividual = false;
				var oneLeft = $('#listado-confirmacion-autogestion .linea-batch').length == 1;

				var moreOneSelected = $('#listado-confirmacion-autogestion input[type="checkbox"]:checked').length>1;

				if( moreOneSelected || oneLeft ){
					modalConfirmarEliminar.openModal();
					$('.listado-header-autogestion button, .btn-autogestion-simular').prop('disabled', true);
				}
				else
					eliminarElementosListado();

			});

			/**
				Eliminar elemento del listado de líneas a confirmar
			**/

			$listaconfirmar.on('click', '.linea-batch .btn-delete', function(){
				var $button = $(this);
				lastdeleted = [];

				var oneLeft = $('#listado-confirmacion-autogestion .linea-batch').length == 1;

				if(oneLeft)
				{
					eliminarIndividual = true;
					modalConfirmarEliminar.openModal();
					$('.listado-header-autogestion button, .btn-autogestion-simular').prop('disabled', true);
				}else{
					eliminarElementoListado($button);
				}

				if($('#listado-confirmacion-autogestion .linea-batch input[type="checkbox"]:checked').length>0)
					$('.listado-header-autogestion button, .btn-autogestion-simular').prop('disabled', false);
				else
					$('.listado-header-autogestion button, .btn-autogestion-simular').prop('disabled', true);

				showDeshacerBlock(true);
			});

			/**
				Acciones Checkbox
			**/

			setActionsCheckbox();

			/**
				SubmitForm
			**/
			submitForm();


			/**
				Deshacer Última acción
			**/
			$('#deshacer-eliminado').click(function(e){
				e.preventDefault();
				deshacerEliminado();
				showDeshacerBlock(false);
			});

		}

		function deshacerEliminado(){

			$.each(lastdeleted, function (index, value) {
				if(dataListadoConfirmacion[value])
					dataListadoConfirmacion[value].eliminado = false;
			});

			// var lastOne = (lastdeleted.length>1 ? lastdeleted[lastdeleted.length-1] : lastdeleted[0]);
			// if(dataListadoConfirmacion[lastOne])
			// 	dataListadoConfirmacion[lastOne].eliminado = false;

			generarListadoConfirmacion();
		}

		function setActionsCheckbox(){

			function checkButtonsActive(){
				if($('#listado-confirmacion-autogestion .linea-batch input[type="checkbox"]:checked').length==0)
					$('.listado-header-autogestion button, .btn-autogestion-simular').prop('disabled', true);
				else
					$('.listado-header-autogestion #btn-delete-all, .btn-autogestion-simular').prop('disabled', false);

			}

			//CHECKBOX INDIVIDUAL
			$('#listado-confirmacion-autogestion').on('change', '.linea-batch input[type="checkbox"]', function(){

				var $element = $(this).closest('.linea-batch');
				$element.toggleClass('checked-element');

				//Actualizar propiedad de Seleccionado
				var value = $(this).is(':checked');
				seleccionarElementoListado( $(this) , value);

				/**
					Agregar al input la clase de required para jquery.validate
				**/
				if($element.hasClass('checked-element')){
					$element.find('.input-container input[type="text"]').addClass('requerido');
					checkLineActive($element, true);
				}
				else{
					$element.find('.input-container input[type="text"]').removeClass('requerido');
					checkLineActive($element, false);
				}


				// if(!$element.find('.input-container input[type="text"]').hasClass('requerido'))
				// 	checkLineActive($element, false);
				// else
				// 	checkLineActive($element, true);


				if($('#listado-confirmacion-autogestion .linea-batch input[type="checkbox"]').length == $('#listado-confirmacion-autogestion .linea-batch input[type="checkbox"]:checked').length){
					$('#listado-autogestion-container .listado-header-autogestion .checkbox-container input').prop('checked', true);

						allChecked = true;
				}
				else{
					$('#listado-autogestion-container .listado-header-autogestion .checkbox-container input').prop('checked', false);
						allChecked = false;
				}

				validarFormConfirmacion.validateFormErrors($(this));
				validarFormConfirmacion.checkButtonsActive();
				checkButtonsActive();
			});


			// SELECT ALL CHECKBOX
			$("#listado-autogestion-container .listado-header-autogestion .checkbox-container input").change(function() {

				var $checkboxAll = $(this);

				//firstClick = true;

				// if(doneValidando){
				// 	resetValidaciones(false ,false, false,'Validar');
				// }

				//SE ACTUALIZA CADA UNO DE LOS ELEMENTOS DE LA PÁGINA
				$('#listado-confirmacion-autogestion input[type="checkbox"]').each(function( index ) {

					var $parent = $(this).closest('.linea-batch');

					if($checkboxAll.is(":checked")){
						$(this).prop( "checked", true );

						seleccionarElementoListado( $(this) , true);
						/**
							Agregar al input la clase de required para jquery.validate
						**/

						checkLineActive($parent, true);
						$parent.addClass('checked-element');

						validarFormConfirmacion.validateFormErrors($(this));
					}
					else {
						$(this).prop( "checked", false );

						seleccionarElementoListado( $(this) , false);

						$parent.removeClass('checked-element');

						/**
							Quitarle al input la clase de required para jquery.validate
						**/
						checkLineActive($parent, false);
					}

				});


				allChecked = $checkboxAll.is(":checked");

				// if(!firstClick && allChecked){
				// 	$mainForm.validate();
				// }

				validarFormConfirmacion.checkButtonsActive();
				checkButtonsActive();

			});

			function checkLineActive($parent, active){

				var $input = $parent.find('.input-container input[type="text"]');

				if(active){
					//$input.addClass('requerido');
					// Cada vez que cambia checar los botones
					// validando = true;
					//datosValidos = false;
					// doneValidando = false;
				}
				else{
					//$input.removeClass('requerido');
					resetField($input);
					//validando = true;
					// doneValidando = false;
				}


				validarFormConfirmacion.checkButtonsActive();
				checkButtonsActive();

				$input.prop('disabled', !active);



				// if(!firstClick){
				//  	$('#validar-lineas-btn').trigger('click');
				// }

			}

		}


		function resetValidaciones(doneV,v,datosV, texto){
			// doneValidando = doneV;
			// validando = v;
			// datosValidos = datosV;
			$('#validar-lineas-btn').html(texto);
		}

		function resetField($input) {
			var $label = $input.closest('.column-line').find('label.error');

			var $icon = $input.parent().find('.icon-validation');

		    $input.removeClass('error').removeClass('not-valid-element');
		    $label.remove();

		}

		function checkFixedHeader(){
			var $starte = $listaconfirmar;
			var start = $starte.offset();

			$(window).scroll(function(){
				$starte = $listaconfirmar;
				start = $starte.offset();
				var end = $starte.height() + start.top;

			    if ($(this).scrollTop() > start.top && $(this).scrollTop() < end )
			        $('.to-fixed-block').addClass('fixed');
			    else
			        $('.to-fixed-block').removeClass('fixed');
			});
		}


		var esconderLap = null;

		function showDeshacerBlock(value){

			var $block = $('.listado-delete-block');

			if(value){


				if($block.is(':visible') && $block.hasClass('active')){

					clearTimeout(esconderLap);

				}


				$block.fadeIn( 400, function() {
				    $block.addClass('active');
				});

				esconderLap = setTimeout(function(){

					$block.fadeOut( 400, function() {
					   $block.removeClass('active');
					});

				}, 3000);
			}

			else{

				$block.fadeOut( 400, function() {
				   $block.removeClass('active');
				});

				clearTimeout(esconderLap);
			}
		}

		function eliminarElementosListado(){
			lastdeleted = [];

			$('#listado-confirmacion-autogestion input[type="checkbox"]:checked').each(function( index ) {
				var $element = $(this);
				eliminarElementoListado($element);

			});

			showDeshacerBlock(true);
		}

		function eliminarElementoListado($element){
			var i = ( typeof $element.data('index') != 'undefined' ? $element.data('index') : null);

			var $parent = $element.parent().closest('.linea-batch');

			if(i!=null)
			{
				lastdeleted.push(i);
				dataListadoConfirmacion[i].eliminado = true;
				$parent.remove();
			}

		}

		function seleccionarElementoListado($element, value){
			var i = ( typeof $element.data('index') != 'undefined' ? $element.data('index') : null);

			if(i!=null)
			{
				dataListadoConfirmacion[i].checked = value;
			}

		}

		var hasFirst = (($mainReactivacion.length>0 || $mainCambio.length>0 )  ? true : false );

		function generarListadoConfirmacionInicial(){

			var total = $listaconfirmar.find('.linea-batch').length;

			$listaconfirmar.find('.linea-batch').each(function (index, value) {
			  var meta = ( typeof $(this).data('meta') != 'undefined' ? $(this).data('meta') : null );

			  var $element = $(this);

				if(meta != null){
					var elemento = '';

					$.when(elemento = getListadoConfirmacionSection(meta,index, hasFirst)).done(function(){

						$element.html(elemento.html);
						meta.eliminado = false;
						meta.error = {};
						dataListadoConfirmacion.push(meta);

						bindElementActions();
					});

				}
			});
		}

		function generarListadoConfirmacion(){
			$listaconfirmar.html('');
			$.each(dataListadoConfirmacion, function (index, data) {
				if(!data.eliminado){
					var elemento = '';
					$.when(elemento = getListadoConfirmacionSection(data,index) ).done(function( ) {
								$listaconfirmar.append('<div class="col-sm-12 center-block flexbox h-align-center linea-batch '+elemento.additionalClass+'">'+elemento.html+'</div>');
								bindElementActions();
							});

				}
			});

			if(!firstClick){
				$mainForm.valid();
			}

		}


		function generarHTMLSertec(meta, index){
			var html = "";
			var addClass = "";

			var checked = ( typeof meta.checked!= undefined ? meta.checked : false );

			addClass = (checked ? 'checked-element' : '');

		  	html+='<div class="col-sm-1 checkbox-container"> <input type="checkbox" id="i-'+meta.id+'" name="i-'+meta.id+'" value="'+meta.id+'" data-index ="'+index+'" '+(checked ? 'checked' : '')+'> <label for="i-'+meta.id+'"><span class="check-sq"></span></label> </div>';
			html+='<div class="col-sm-10 no-padding">';
				html+='<div class="col-sm-4 flexbox v-align-center"> <p title="'+meta.imei+'">'+meta.imei+'</p> </div>';
				html+='<div class="col-sm-4 flexbox v-align-center"> <p title="'+meta.marca+'">'+meta.marca+'</p> </div>';

				html+='<div class="col-sm-4 flexbox v-align-center"> <p title="'+meta.modelo+'">'+meta.modelo+'</p> </div>';

			html+='</div>';

			html+='<div class="col-sm-1 flexbox v-align-center delete-container"><span class="icon io-CloseSession btn-delete" title="Quitar" data-index ="'+index+'"></span> </div>';

			return { additionalClass : addClass ,html: html };

		}

		function generarHTMLControlCostos(meta, index){
			var html = "";
			var addClass = "";

			var checked = ( typeof meta.checked!= undefined ? meta.checked : false );

			addClass = (checked ? 'checked-element' : '');

		  	html+='<div class="col-sm-1 checkbox-container"> <input type="checkbox" id="i-'+meta.id+'" name="i-'+meta.id+'" value="'+meta.id+'" data-index ="'+index+'" '+(checked ? 'checked' : '')+'> <label for="i-'+meta.id+'"><span class="check-sq"></span></label> </div>';
			html+='<div class="col-sm-10 no-padding">';
				html+='<div class="col-sm-2 flexbox v-align-center"> <p title="'+meta.region+'">'+meta.region+'</p> </div>';
				html+='<div class="col-sm-2 flexbox v-align-center"> <p title="'+meta.cuenta+'">'+meta.cuenta+'</p> </div>';

				html+='<div class="col-sm-2 flexbox v-align-center"> <p title="'+meta.numero+'">'+meta.numero+'</p> </div>';

				html+='<div class="col-sm-3 flexbox v-align-center"> <p title="'+meta.titular+'">'+meta.titular+'</p> </div>';

				html+='<div class="col-sm-3 flexbox v-align-center"> <p title="'+meta.bloqueos+'">'+meta.bloqueos+'</p> </div>';

			html+='</div>';

			html+='<div class="col-sm-1 flexbox v-align-center delete-container"><span class="icon io-CloseSession btn-delete" title="Quitar" data-index ="'+index+'"></span> </div>';

			return { additionalClass : addClass ,html: html };

		}

		//** R3 CON ASIGNADO Quitar comment de función **/


		function generarHTMLGeneralAsignado(meta, index){
			var html = "";
			var addClass = "";

			var checked = ( typeof meta.checked!= undefined ? meta.checked : false );

			addClass = (checked ? 'checked-element' : '');

		  	html+='<div class="col-sm-1 checkbox-container"> <input type="checkbox" id="i-'+meta.id+'" name="i-'+meta.id+'" value="'+meta.id+'" data-index ="'+index+'" '+(checked ? 'checked' : '')+'> <label for="i-'+meta.id+'"><span class="check-sq"></span></label> </div>';
			html+='<div class="col-sm-10 no-padding">';
				html+='<div class="col-sm-2 flexbox v-align-center"> <p title="'+meta.region+'">'+meta.region+'</p> </div>';
				html+='<div class="col-sm-3 flexbox v-align-center"> <p title="'+meta.cuenta+'">'+meta.cuenta+'</p> </div>';

				html+='<div class="col-sm-3 flexbox v-align-center h-align-center"> <p title="'+meta.numero+'">'+meta.numero+'</p>'+ (typeof meta.ruta != 'undefined' ? '<div class="icon io-info show-more-details"><div class="triangle-tooltip"><span class="ruta">'+meta.ruta+'</span></div></div>' : '')+ '</div>';
				html+='<div class="col-sm-4 flexbox v-align-center"> <p title="'+meta.titular+'">'+meta.titular+'</p> </div>';


			html+='</div>';

			html+='<div class="col-sm-1 flexbox v-align-center delete-container"><span class="icon io-CloseSession btn-delete" title="Quitar" data-index ="'+index+'"></span> </div>';

			return { additionalClass : addClass ,html: html };

		}


		function generarHTMLGeneral(meta, index){
			var html = "";
			var addClass = "";

			var checked = ( typeof meta.checked!= undefined ? meta.checked : false );

			addClass = (checked ? 'checked-element' : '');

		  	html+='<div class="col-sm-1 checkbox-container"> <input type="checkbox" id="i-'+meta.id+'" name="i-'+meta.id+'" value="'+meta.id+'" data-index ="'+index+'" '+(checked ? 'checked' : '')+'> <label for="i-'+meta.id+'"><span class="check-sq"></span></label> </div>';
			html+='<div class="col-sm-10 no-padding">';
				html+='<div class="col-sm-3 flexbox v-align-center"> <p title="'+meta.region+'">'+meta.region+'</p> </div>';
				html+='<div class="col-sm-4 flexbox v-align-center"> <p title="'+meta.cuenta+'">'+meta.cuenta+'</p> </div>';

				html+='<div class="col-sm-5 flexbox v-align-center h-align-center"> <p title="'+meta.numero+'">'+meta.numero+'</p>'+ (typeof meta.ruta != 'undefined' ? '<div class="icon io-info show-more-details"><div class="triangle-tooltip"><span class="ruta">'+meta.ruta+'</span></div></div>' : '')+ '</div>';


			html+='</div>';

			html+='<div class="col-sm-1 flexbox v-align-center delete-container"><span class="icon io-CloseSession btn-delete" title="Quitar" data-index ="'+index+'"></span> </div>';

			return { additionalClass : addClass ,html: html };

		}

		function generarHTMLFacturacion(meta, index){
			var html = "";
			var addClass = "";

			var checked = ( typeof meta.checked!= undefined ? meta.checked : false );

			addClass = (checked ? 'checked-element' : '');

		  	html+='<div class="col-sm-1 checkbox-container"> <input type="checkbox" id="i-'+meta.id+'" name="i-'+meta.id+'" value="'+meta.id+'" data-index ="'+index+'" '+(checked ? 'checked' : '')+'> <label for="i-'+meta.id+'"><span class="check-sq"></span></label> </div>';
			html+='<div class="col-sm-10 no-padding">';

				html+='<div class="col-sm-4 flexbox v-align-center"> <p title="'+meta.region+'">'+meta.region+'</p> </div>';
				html+='<div class="col-sm-4 flexbox v-align-center"> <p title="'+meta.cuenta+'">'+meta.cuenta+'</p> </div>';
				html+='<div class="col-sm-4 flexbox v-align-center"> <p title="'+meta.razonsocial+'">'+meta.razonsocial+'</p> </div>';


			html+='</div>';

			html+='<div class="col-sm-1 flexbox v-align-center delete-container"><span class="icon io-CloseSession btn-delete" title="Quitar" data-index ="'+index+'"></span> </div>';

			return { additionalClass : addClass ,html: html };

		}

		/**R3 con Asignado
		function generarHTMLFacturacionLineas(meta, index){
			var html = "";
			var addClass = "";

			var checked = ( typeof meta.checked!= undefined ? meta.checked : false );

			addClass = (checked ? 'checked-element' : '');

		  	html+='<div class="col-sm-1 checkbox-container"> <input type="checkbox" id="i-'+meta.id+'" name="i-'+meta.id+'" value="'+meta.id+'" data-index ="'+index+'" '+(checked ? 'checked' : '')+'> <label for="i-'+meta.id+'"><span class="check-sq"></span></label> </div>';
			html+='<div class="col-sm-10 no-padding">';

				html+='<div class="col-sm-2 flexbox v-align-center"> <p title="'+meta.region+'">'+meta.region+'</p> </div>';
				html+='<div class="col-sm-2 flexbox v-align-center"> <p title="'+meta.cuenta+'">'+meta.cuenta+'</p> </div>';
				html+='<div class="col-sm-4 flexbox v-align-center"> <p title="'+meta.numero+'">'+meta.numero+'</p> </div>';
				html+='<div class="col-sm-4 flexbox v-align-center"> <p title="'+meta.nombre+'">'+meta.nombre+'</p> </div>';


			html+='</div>';

			html+='<div class="col-sm-1 flexbox v-align-center delete-container"><span class="icon io-CloseSession btn-delete" title="Quitar" data-index ="'+index+'"></span> </div>';

			return { additionalClass : addClass ,html: html };

		}
		**/

		function generarHTMLFacturacionLineas(meta, index){
			var html = "";
			var addClass = "";

			var checked = ( typeof meta.checked!= undefined ? meta.checked : false );

			addClass = (checked ? 'checked-element' : '');

		  	html+='<div class="col-sm-1 checkbox-container"> <input type="checkbox" id="i-'+meta.id+'" name="i-'+meta.id+'" value="'+meta.id+'" data-index ="'+index+'" '+(checked ? 'checked' : '')+'> <label for="i-'+meta.id+'"><span class="check-sq"></span></label> </div>';
			html+='<div class="col-sm-10 no-padding">';

				html+='<div class="col-sm-3 flexbox v-align-center"> <p title="'+meta.region+'">'+meta.region+'</p> </div>';
				html+='<div class="col-sm-4 flexbox v-align-center"> <p title="'+meta.cuenta+'">'+meta.cuenta+'</p> </div>';
				html+='<div class="col-sm-5 flexbox v-align-center"> <p title="'+meta.numero+'">'+meta.numero+'</p> </div>';


			html+='</div>';

			html+='<div class="col-sm-1 flexbox v-align-center delete-container"><span class="icon io-CloseSession btn-delete" title="Quitar" data-index ="'+index+'"></span> </div>';

			return { additionalClass : addClass ,html: html };

		}

		function generarHTMLFacturacionFacturas(meta, index){
			var html = "";
			var addClass = "";

			var checked = ( typeof meta.checked!= undefined ? meta.checked : false );

			addClass = (checked ? 'checked-element' : '');

		  	html+='<div class="col-sm-1 checkbox-container"> <input type="checkbox" id="i-'+meta.id+'" name="i-'+meta.id+'" value="'+meta.id+'" data-index ="'+index+'" '+(checked ? 'checked' : '')+'> <label for="i-'+meta.id+'"><span class="check-sq"></span></label> </div>';
			html+='<div class="col-sm-10 no-padding">';

				html+='<div class="col-sm-4 flexbox v-align-center"> <p title="'+meta.region+'">'+meta.region+'</p> </div>';
				html+='<div class="col-sm-4 flexbox v-align-center"> <p title="'+meta.cuenta+'">'+meta.cuenta+'</p> </div>';
				html+='<div class="col-sm-4 flexbox v-align-center"> <p title="'+meta.factura+'">'+meta.factura+'</p> </div>';

			html+='</div>';

			html+='<div class="col-sm-1 flexbox v-align-center delete-container"><span class="icon io-CloseSession btn-delete" title="Quitar" data-index ="'+index+'"></span> </div>';

			return { additionalClass : addClass ,html: html };

		}

		//** R3 CON ASIGNADO Quitar comment de función **/

		/**
		function generarHTMLReactivacion(meta, index, first){
			var html = "";
			var addClass = "";

			first = (typeof first != 'undefined' ? first : false );

			var errors = false;

			var isSingle = $mainForm.hasClass('autogestion-single');

			var showErrors = !firstClick || typeof meta.validated!= 'undefined';

			var checked = ( typeof meta.checked!= undefined ? meta.checked : false );

			if(first)
				checked = true;

			addClass = (checked ? 'checked-element' : '');

			if(typeof meta.error != "undefined"){

				errors = {
					chip : false,
					imei : false,
				};

				errors.chip =  (typeof meta.error.chip != "undefined" ? meta.error.chip : false );

				errors.imei =  (typeof meta.error.imei != "undefined" ? meta.error.imei : false );

				errors.has = errors.chip || errors.imei;
			}


			if(!isSingle)
		  		html+='<div class="col-sm-1 checkbox-container"><input type="checkbox" id="i-'+meta.id+'" name="i-'+meta.id+'" value="'+meta.id+'" data-index ="'+index+'" '+(checked ? 'checked' : '')+'/> <label for="i-'+meta.id+'"><span class="check-sq"></span></label></div>';

			html+='<div class="'+( $mainForm.hasClass('autogestion-single') ? 'col-sm-12' : 'col-sm-10')+' no-padding flexbox col-xs-12" id="line-'+meta.id+'">';

				html+=(!isSingle ? '<div class="col-sm-2 col-xs-12 flexbox v-align-center"><p class="mobile-only">Región</p> <p class="col-xs-12 col-sm-12" title="'+meta.region+'">'+meta.region+'</p> </div><div class="col-sm-2 col-xs-12 flexbox v-align-center"><p class="mobile-only">Cuenta</p> <p class="col-xs-12 col-sm-12" title="'+meta.cuenta+'">'+meta.cuenta+'</p> </div>': '')+'<div class="'+(!isSingle ? 'col-sm-2' : 'col-sm-3')+' col-xs-12 flexbox v-align-center h-align-center"> <p class="mobile-only">Número</p> <p class="col-xs-12 col-sm-10" title="'+meta.numero+'">'+meta.numero+'</p> '+ (typeof meta.ruta != 'undefined' ? '<div class="icon io-info show-more-details"><div class="triangle-tooltip"><span class="ruta">'+meta.ruta+'</span></div></div>' : '')+' </div>';
				html+=(isSingle ? '<div class="col-sm-3 col-xs-12 flexbox v-align-center"><p class="mobile-only">Nombre</p> <p class="col-xs-12 col-sm-12" title="'+meta.titular+'">'+meta.titular+'</p> </div>' : '');

				html += '<div class="col-sm-3 col-xs-12 flexbox v-align-center no-padding value-container"><strong class="mobile-only">Chip</strong><div class="show-more-details-container"> <div class="icon io-info show-more-details chip-imei mobile-only"> <div class="triangle-tooltip"> <p class="head-question flexbox v-align-center"><span class="icon io-Sim"></span>Dónde se obtiene el número de la SIM</p> <div class="description"> <p>Se encuentra en la parte posterior de la SIM o chip y se compone de 19 dígitos y una letra, escribe los 19 dígitos únicamente.</p> </div> </div> </div></div><div class="column-line col-xs-10 col-sm-12"><div class="input-container flexbox v-align-center col-xs-12"><input type="text" name="chip['+index+']" data-index ="'+index+'" placeholder="Chip - 19 dígitos" value="'+( meta.chip ? meta.chip : '')+'" title="'+( meta.chip ? meta.chip : '')+'" maxlength="19" '+(onlyRead && meta.chip ? 'readonly' : '') + ( !checked && !isSingle ? ' disabled ' : '') +' class="only-numbers '+(onlyRead && meta.chip ? 'like-text' : '') +' chip ' + (checked ? ' requerido ' : '') + ( showErrors && errors && errors.chip ? 'not-valid-element error' : (showErrors && errors && !errors.chip ? 'valid-element' : '' ) )+'"/><span class="icon icon-validation '+ ( showErrors && errors && !errors.chip ? 'i-check' : '' )  + '"></span></div>' + (showErrors && errors && errors.chip ? '<label class="error show-error">'+errors.chip +'</label>' : '' ) + '</div></div>';

				html += '<div class="col-sm-3 col-xs-12 flexbox v-align-center no-padding value-container"><strong class="mobile-only">IMEI</strong><div class="show-more-details-container"> <div class="icon io-info show-more-details chip-imei mobile-only"> <div class="triangle-tooltip"> <p class="head-question flexbox v-align-center"><span class="icon io-Sim"></span>Dónde se obtiene el IMEI</p> <div class="description"> <p>Para conocer el IMEI de tu equipo marca *#06# y el código de 15 dígitos se mostrará en la pantalla.</p> </div> </div> </div></div><div class="column-line col-xs-10 col-sm-12"><div class="input-container flexbox v-align-center col-xs-12"><input type="text" name="imei['+index+']" data-index ="'+index+'" placeholder="IMEI - 15 dígitos" value="'+(meta.imei ? meta.imei : '')+'" title="'+(meta.imei ? meta.imei : '')+'" maxlength="15" '+(onlyRead && meta.imei ? 'readonly' : '') + ( !checked && !isSingle ? ' disabled ' : '') +' class="only-numbers '+(onlyRead && meta.imei ? 'like-text' : '')+' imei ' + (checked ? ' requerido ' : '') + (showErrors && errors && errors.imei ? 'not-valid-element error' : ( showErrors && errors && !errors.imei ? 'valid-element' : '' ) )+' "/><span class="icon icon-validation '+ ( showErrors && errors && !errors.imei ? 'i-check' : '' ) + '"></span></div>' + ( showErrors && errors && errors.imei ? '<label class="error show-error">'+errors.imei +'</label>' : '' ) + '</div></div>';

			html+='</div>';

			if(!isSingle)
				html+='<div class="col-sm-1 flexbox v-align-center delete-container"><span class="icon io-CloseSession btn-delete" title="Quitar" data-index ="'+index+'"></span> </div>';

			//Si estan precargados
			if(meta.chip && meta.imei) datosValidosInit = true;

			return { additionalClass: addClass, html: html };

		}
		**/

		function generarHTMLReactivacion(meta, index, first){
			var html = "";
			var addClass = "";

			first = (typeof first != 'undefined' ? first : false );

			var errors = false;

			var isSingle = $mainForm.hasClass('autogestion-single');

			var showErrors = !firstClick || typeof meta.validated!= 'undefined';

			var checked = ( typeof meta.checked!= undefined ? meta.checked : false );

			if(first)
				checked = true;

			addClass = (checked ? 'checked-element' : '');

			if(typeof meta.error != "undefined"){

				errors = {
					chip : false,
					imei : false,
				};

				errors.chip =  (typeof meta.error.chip != "undefined" ? meta.error.chip : false );

				errors.imei =  (typeof meta.error.imei != "undefined" ? meta.error.imei : false );

				errors.has = errors.chip || errors.imei;
			}


			if(!isSingle)
		  		html+='<div class="col-sm-1 checkbox-container"><input type="checkbox" id="i-'+meta.id+'" name="i-'+meta.id+'" value="'+meta.id+'" data-index ="'+index+'" '+(checked ? 'checked' : '')+'/> <label for="i-'+meta.id+'"><span class="check-sq"></span></label></div>';

			html+='<div class="'+( $mainForm.hasClass('autogestion-single') ? 'col-sm-12' : 'col-sm-10')+' no-padding flexbox col-xs-12" id="line-'+meta.id+'">';

				html+=(!isSingle ? '<div class="col-sm-2 col-xs-12 flexbox v-align-center"><p class="mobile-only">Región</p> <p class="col-xs-12 col-sm-12" title="'+meta.region+'">'+meta.region+'</p> </div><div class="col-sm-2 col-xs-12 flexbox v-align-center"><p class="mobile-only">Cuenta</p> <p class="col-xs-12 col-sm-12" title="'+meta.cuenta+'">'+meta.cuenta+'</p> </div>': '')+'<div class="'+(!isSingle ? 'col-sm-2' : 'col-sm-4')+' col-xs-12 flexbox v-align-center h-align-center"> <p class="mobile-only">Número</p> <p class="col-xs-12 col-sm-10" title="'+meta.numero+'">'+meta.numero+'</p> '+ (typeof meta.ruta != 'undefined' ? '<div class="icon io-info show-more-details"><div class="triangle-tooltip"><span class="ruta">'+meta.ruta+'</span></div></div>' : '')+' </div>';


				html += '<div class="'+(!isSingle ? 'col-sm-3' : 'col-sm-4')+' col-xs-12 flexbox v-align-center no-padding value-container"><strong class="mobile-only">Chip</strong><div class="show-more-details-container"> <div class="icon io-info show-more-details chip-imei mobile-only"> <div class="triangle-tooltip"> <p class="head-question flexbox v-align-center"><span class="icon io-Sim"></span>Dónde se obtiene el número de la SIM</p> <div class="description"> <p>Se encuentra en la parte posterior de la SIM o chip y se compone de 19 dígitos y una letra, escribe los 19 dígitos únicamente.</p> </div> </div> </div></div><div class="column-line col-xs-10 col-sm-12"><div class="input-container flexbox v-align-center col-xs-12"><input type="text" name="chip['+index+']" data-index ="'+index+'" placeholder="Chip - 19 dígitos" value="'+( meta.chip ? meta.chip : '')+'" title="'+( meta.chip ? meta.chip : '')+'" maxlength="19" '+(onlyRead && meta.chip ? 'readonly' : '') + ( !checked && !isSingle ? ' disabled ' : '') +' class="only-numbers '+(onlyRead && meta.chip ? 'like-text' : '') +' chip ' + (checked ? ' requerido ' : '') + ( showErrors && errors && errors.chip ? 'not-valid-element error' : (showErrors && errors && !errors.chip ? 'valid-element' : '' ) )+'"/><span class="icon icon-validation '+ ( showErrors && errors && !errors.chip ? 'i-check' : '' )  + '"></span></div>' + (showErrors && errors && errors.chip ? '<label class="error show-error">'+errors.chip +'</label>' : '' ) + '</div></div>';

				html += '<div class="'+(!isSingle ? 'col-sm-3' : 'col-sm-4')+' col-xs-12 flexbox v-align-center no-padding value-container"><strong class="mobile-only">IMEI</strong><div class="show-more-details-container"> <div class="icon io-info show-more-details chip-imei mobile-only"> <div class="triangle-tooltip"> <p class="head-question flexbox v-align-center"><span class="icon io-Sim"></span>Dónde se obtiene el IMEI</p> <div class="description"> <p>Para conocer el IMEI de tu equipo marca *#06# y el código de 15 dígitos se mostrará en la pantalla.</p> </div> </div> </div></div><div class="column-line col-xs-10 col-sm-12"><div class="input-container flexbox v-align-center col-xs-12"><input type="text" name="imei['+index+']" data-index ="'+index+'" placeholder="IMEI - 15 dígitos" value="'+(meta.imei ? meta.imei : '')+'" title="'+(meta.imei ? meta.imei : '')+'" maxlength="15" '+(onlyRead && meta.imei ? 'readonly' : '') + ( !checked && !isSingle ? ' disabled ' : '') +' class="only-numbers '+(onlyRead && meta.imei ? 'like-text' : '')+' imei ' + (checked ? ' requerido ' : '') + (showErrors && errors && errors.imei ? 'not-valid-element error' : ( showErrors && errors && !errors.imei ? 'valid-element' : '' ) )+' "/><span class="icon icon-validation '+ ( showErrors && errors && !errors.imei ? 'i-check' : '' ) + '"></span></div>' + ( showErrors && errors && errors.imei ? '<label class="error show-error">'+errors.imei +'</label>' : '' ) + '</div></div>';

			html+='</div>';

			if(!isSingle)
				html+='<div class="col-sm-1 flexbox v-align-center delete-container"><span class="icon io-CloseSession btn-delete" title="Quitar" data-index ="'+index+'"></span> </div>';

			//Si estan precargados
			if(meta.chip && meta.imei) datosValidosInit = true;

			return { additionalClass: addClass, html: html };

		}

		//** R3 CON ASIGNADO Quitar comment de función **/

		/**
		function generarHTMLCambio(meta, index, first){
			var html = "";
			var addClass = "";

			first = (typeof first != 'undefined' ? first : false );

			var errors = false;

			var isSingle = $mainForm.hasClass('autogestion-single');

			var showErrors = !firstClick || typeof meta.validated!= 'undefined';

			var checked = ( typeof meta.checked!= undefined ? meta.checked : false );

			if(first)
				checked = true;

			addClass = (checked ? 'checked-element' : '');

			var onlyCHIP = false;
			var onlyIMEI = false;
			var both = false;

			onlyCHIP = (typeof meta.imei != "undefined" ? false : true );

			onlyIMEI = (typeof meta.chip != "undefined" ? false : true );

			both = !onlyCHIP && !onlyIMEI;

			if(!$mainForm.hasClass('autogestion-single'))
		  		html+='<div class="col-sm-1 checkbox-container"><input type="checkbox" id="i-'+meta.id+'" name="i-'+meta.id+'" value="'+meta.id+'" data-index ="'+index+'" '+(checked ? 'checked' : '')+'/> <label for="i-'+meta.id+'"><span class="check-sq"></span></label></div>';

			html+='<div class="'+( $mainForm.hasClass('autogestion-single') ? 'col-sm-12 col-xs-12' : 'col-sm-10 col-xs-10')+' no-padding flexbox" id="line-'+meta.id+'">';

				html+='<div class="mobile-one-line '+(both ? 'col-sm-2' : 'col-sm-2')+ ' col-xs-12 flexbox v-align-center"><p class="mobile-only">Región</p> <p title="'+meta.region+'">'+meta.region+'</p> </div>';

				html+='<div class="mobile-one-line '+(both ? 'col-sm-2' : 'col-sm-2')+ ' col-xs-12 flexbox v-align-center"><p class="mobile-only">Cuenta</p> <p title="'+meta.cuenta+'">'+meta.cuenta+'</p> </div>';

				html+='<div class="mobile-one-line '+(both ? 'col-sm-2' : 'col-sm-2')+ ' col-xs-12 flexbox v-align-center h-align-center"> <p class="mobile-only">Número</p> <p title="'+meta.numero+'">'+meta.numero+'</p> '+ (typeof meta.ruta != 'undefined' ? '<div class="icon io-info show-more-details"><div class="triangle-tooltip"><span class="ruta">'+meta.ruta+'</span></div></div>' : '')+' </div>';

				html+=(!both ? '<div class="mobile-one-line col-sm-3 col-xs-12 flexbox v-align-center"><p class="mobile-only">Nombre</p> <p title="'+meta.titular+'">'+meta.titular+'</p> </div>' : '');

				if(!onlyIMEI)
					html+='<div class="col-sm-3 col-xs-12 flexbox v-align-center no-padding value-container"><strong class="mobile-only">Chip</strong><div class="show-more-details-container"> <div class="icon io-info show-more-details chip-imei mobile-only"> <div class="triangle-tooltip"> <p class="head-question flexbox v-align-center"><span class="icon io-Sim"></span>Dónde se obtiene el número de la SIM</p> <div class="description"> <p>Se encuentra en la parte posterior de la SIM o chip y se compone de 19 dígitos y una letra, escribe los 19 dígitos únicamente.</p> </div> </div> </div></div><div class="column-line col-xs-10 col-sm-12"><div class="input-container flexbox v-align-center col-xs-12"><input type="text" name="chip['+index+']" data-index ="'+index+'" placeholder="Chip - 19 dígitos" value="'+(meta.chip ? meta.chip : '')+'" title="'+(meta.chip ? meta.chip : '')+'" maxlength="19" class="only-numbers chip '+ (checked ? ' requerido ' : '') +'" '+( !checked && !isSingle ? ' disabled ' : '')+'/><span class="icon icon-validation"></span></div></div></div>';

				if(!onlyCHIP)
					html+='<div class="col-sm-3 col-xs-12 flexbox v-align-center no-padding value-container"><strong class="mobile-only">IMEI</strong><div class="show-more-details-container"> <div class="icon io-info show-more-details chip-imei mobile-only"> <div class="triangle-tooltip"> <p class="head-question flexbox v-align-center"><span class="icon io-Sim"></span>Dónde se obtiene el IMEI</p> <div class="description"> <p>Para conocer el IMEI de tu equipo marca *#06# y el código de 15 dígitos se mostrará en la pantalla.</p> </div> </div> </div></div><div class="column-line col-xs-10 col-sm-12"><div class="input-container flexbox v-align-center col-xs-12"> <input type="text" name="imei['+index+']" data-index ="'+index+'" placeholder="IMEI - 15 dígitos" value="'+(meta.imei ? meta.imei : '')+'" title="'+(meta.imei ? meta.imei : '')+'" maxlength="15" class="only-numbers imei '+ (checked ? ' requerido ' : '') +'" '+( !checked && !isSingle ? ' disabled ' : '')+'/><span class="icon icon-validation"></span></div></div></div>';

			html+='</div>';

			if(!$mainForm.hasClass('autogestion-single'))
				html+='<div class="col-sm-1 flexbox v-align-center delete-container"><span class="icon io-CloseSession btn-delete" title="Quitar" data-index ="'+index+'"></span> </div>';

			return { additionalClass : addClass, html: html };

		}

		**/

		function generarHTMLCambio(meta, index, first){
			var html = "";
			var addClass = "";

			first = (typeof first != 'undefined' ? first : false );

			var errors = false;

			var isSingle = $mainForm.hasClass('autogestion-single');

			var showErrors = !firstClick || typeof meta.validated!= 'undefined';

			var checked = ( typeof meta.checked!= undefined ? meta.checked : false );

			if(first)
				checked = true;

			addClass = (checked ? 'checked-element' : '');

			var onlyCHIP = false;
			var onlyIMEI = false;
			var both = false;

			onlyCHIP = (typeof meta.imei != "undefined" ? false : true );

			onlyIMEI = (typeof meta.chip != "undefined" ? false : true );

			both = !onlyCHIP && !onlyIMEI;

			if(!$mainForm.hasClass('autogestion-single'))
		  		html+='<div class="col-sm-1 checkbox-container"><input type="checkbox" id="i-'+meta.id+'" name="i-'+meta.id+'" value="'+meta.id+'" data-index ="'+index+'" '+(checked ? 'checked' : '')+'/> <label for="i-'+meta.id+'"><span class="check-sq"></span></label></div>';

			html+='<div class="'+( $mainForm.hasClass('autogestion-single') ? 'col-sm-12 col-xs-12' : 'col-sm-10 col-xs-10')+' no-padding flexbox" id="line-'+meta.id+'">';

				html+='<div class="mobile-one-line '+(both ? 'col-sm-2' : 'col-sm-3')+ ' col-xs-12 flexbox v-align-center"><p class="mobile-only">Región</p> <p title="'+meta.region+'">'+meta.region+'</p> </div>';

				html+='<div class="mobile-one-line '+(both ? 'col-sm-2' : 'col-sm-3')+ ' col-xs-12 flexbox v-align-center"><p class="mobile-only">Cuenta</p> <p title="'+meta.cuenta+'">'+meta.cuenta+'</p> </div>';

				html+='<div class="mobile-one-line '+(both ? 'col-sm-2' : 'col-sm-3')+ ' col-xs-12 flexbox v-align-center h-align-center"> <p class="mobile-only">Número</p> <p title="'+meta.numero+'">'+meta.numero+'</p> '+ (typeof meta.ruta != 'undefined' ? '<div class="icon io-info show-more-details"><div class="triangle-tooltip"><span class="ruta">'+meta.ruta+'</span></div></div>' : '')+' </div>';


				if(!onlyIMEI)
					html+='<div class="col-sm-3 col-xs-12 flexbox v-align-center no-padding value-container"><strong class="mobile-only">Chip</strong><div class="show-more-details-container"> <div class="icon io-info show-more-details chip-imei mobile-only"> <div class="triangle-tooltip"> <p class="head-question flexbox v-align-center"><span class="icon io-Sim"></span>Dónde se obtiene el número de la SIM</p> <div class="description"> <p>Se encuentra en la parte posterior de la SIM o chip y se compone de 19 dígitos y una letra, escribe los 19 dígitos únicamente.</p> </div> </div> </div></div><div class="column-line col-xs-10 col-sm-12"><div class="input-container flexbox v-align-center col-xs-12"><input type="text" name="chip['+index+']" data-index ="'+index+'" placeholder="Chip - 19 dígitos" value="'+(meta.chip ? meta.chip : '')+'" title="'+(meta.chip ? meta.chip : '')+'" maxlength="19" class="only-numbers chip '+ (checked ? ' requerido ' : '') +'" '+( !checked && !isSingle ? ' disabled ' : '')+'/><span class="icon icon-validation"></span></div></div></div>';

				if(!onlyCHIP)
					html+='<div class="col-sm-3 col-xs-12 flexbox v-align-center no-padding value-container"><strong class="mobile-only">IMEI</strong><div class="show-more-details-container"> <div class="icon io-info show-more-details chip-imei mobile-only"> <div class="triangle-tooltip"> <p class="head-question flexbox v-align-center"><span class="icon io-Sim"></span>Dónde se obtiene el IMEI</p> <div class="description"> <p>Para conocer el IMEI de tu equipo marca *#06# y el código de 15 dígitos se mostrará en la pantalla.</p> </div> </div> </div></div><div class="column-line col-xs-10 col-sm-12"><div class="input-container flexbox v-align-center col-xs-12"> <input type="text" name="imei['+index+']" data-index ="'+index+'" placeholder="IMEI - 15 dígitos" value="'+(meta.imei ? meta.imei : '')+'" title="'+(meta.imei ? meta.imei : '')+'" maxlength="15" class="only-numbers imei '+ (checked ? ' requerido ' : '') +'" '+( !checked && !isSingle ? ' disabled ' : '')+'/><span class="icon icon-validation"></span></div></div></div>';

			html+='</div>';

			if(!$mainForm.hasClass('autogestion-single'))
				html+='<div class="col-sm-1 flexbox v-align-center delete-container"><span class="icon io-CloseSession btn-delete" title="Quitar" data-index ="'+index+'"></span> </div>';

			return { additionalClass : addClass, html: html };

		}

	}

	/** Servicios masivos **/
	function initFormularioServiciosMasivo(){
		var $mainForm = $('#autogestion-form');

		var tipoIngreso = null;

		initActions();
		validateMainForm();

		function initActions(){

			/**
				Cuando se esconda el step 2
			**/

			var fullReset = false;

			$('#componente-ingresar-lineas .btn-al').on('click', function(event) {
				fullReset = true;
			});

			$('#autogestion-paso-2').on('hide', function(event) {
				var target = $(event.target).attr('id');
				if(target==='autogestion-paso-2' && fullReset)
			      resetMainForm();

			  	fullReset = false;

			  	// $('#autogestion-btn').prop('disabled', !validateFormData());
			});

			// $('#autogestion-paso-2').on('show', function(event) {
			//   	$('#autogestion-btn').prop('disabled', !validateFormData());
			// });

			/**
				Setea la info del Motivo
			**/
			$('.motivo-autogestion').change(function() {
				var $checkbox = $(this);
				var buttontext =  (typeof $checkbox.data('btexto')!='undefined' ? $checkbox.data('btexto') : null );

				if(buttontext != null)
					$('#autogestion-btn').html(buttontext);

				$('#autogestion-btn').prop('disabled', !validateFormData());

				/**Quitar una vez en producción solo es para propositos de development y simular**/
				updateFormPostURL($checkbox.val());
			});

			/**
				Checar cuando cambia el checkbox
			**/

			$('#checkbox-autogestion-terminos').change(function() {

				$('#autogestion-btn').prop('disabled', !validateFormData());
			});
		}

		function validateMainForm(){

			disableSumbitButton($mainForm, true);

			elementsForm['validator'] =
				$mainForm.validate({
				  rules: {
					archivo: {
						extension: "xls",
						filesize: 10000000
					},
					motivoAutogestion: {
						required: true
					},
					checkboxAutogestion: {
						required: true
					}
				  },
				  messages: {
					 archivo: {
					   required: "Ingresa un archivo de 10 MB máximo.",
					   extension: "Ingresa un archivo con extensión: .xls",
					   filesize: "Ingresa un archivo de 10 MB máximo."
					 },
					 motivoAutogestion: {
					   required: "Selecciona un motivo.",
					 },
					 checkboxAutogestion: {
					   required: "Acepta términos y condiciones.",
					 }
				   },
					errorClass : "error-dd error",
					errorElement : 'div',
					errorPlacement: function(error, element) {
						var elementInput = element[0];
						if(element[0]['id']==='archivo' && $(elementInput).val() != ''){
							$('.lineas-archivo .extra-info').hide();
							error.appendTo( $('.lineas-archivo .add-lines-ge-mod' ));
							element.parent().addClass('error');

						}
					},
					success: function ($error) {
						if($error.length>0 && $('#archivo').val() != ''){
							$('.lineas-archivo .extra-info').hide();
							$('.lineas-archivo .file.error' ).removeClass('error');
			   				$error.remove();
						}

			        },
			        submitHandler: function(form) {
						if(!elementsForm['sending']){
							sendFormData(form);
				  		}
					}
				});

			function sendFormData(form){
				elementsForm['sending'] = true;
				$(form).find('button[type="submit"]').prop('disabled', true);

				var self = $(form).serialize();

				var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

				/**Quitar una vez en producción y aqui solo checamos si es una línea en development para mandar a otra liga**/
				var sendTo = ( (ingresarLineasComponentTotal == 1 && is_mobile() && typeof $(form).data('actionmobile') != 'undefined') ? $(form).data('actionmobile') : urlPOST);

				urlPOST = checkDevelopmentPostHTML(urlPOST);

				$.post(  urlPOST , self )
				.done(function( data ) {
				  	Services.autogestion.masivoAutogestionServiciosCallSuccess(data, form, sendTo, showInvalidErrorArchivo );
					elementsForm['sending'] = false;

				 })
				.fail(function( jqxhr, textStatus, error ) {
				  	//Mensaje de error del sistema
				  	Services.autogestion.masivoAutogestionServiciosCallFail(error, form);
				  	elementsForm['sending'] = false;
				});
			}
		}

		function validateFormData(){


			var dataLineas = [];
			var lineasValid = false;
			//var dataArchivo = ingresarLineasComponent.getDataArchivo();

			var dataType = ingresarLineasComponent.getType();

			if(dataType === '.componente-lineas-block .lineas-autocomplete')
				dataLineas = ingresarLineasComponent.getDataAutocomplete();
			else if(dataType === '.componente-lineas-block .lineas-arbol')
				dataLineas = ingresarLineasComponent.getDataArbol();
			else
				dataLineas.push(null);

			if(dataLineas.length>0 && $mainForm.valid())
				lineasValid = true;

	    	$('#lineas-hidden-input').val(JSON.stringify(dataLineas));

			if($('#checkbox-autogestion-terminos').is(":checked") && $('.motivo-autogestion').is(":checked") && lineasValid)
				return true;


			return false;
		}

		function resetMainForm(){

			$mainForm.find("input[type=text], input[type=email], input[type=password], select").val("");
			$mainForm.find("input[type=checkbox], input[type=radio]").prop("checked", false);
			$mainForm.find('button[type="submit"]').prop('disabled', true);

			if(elementsForm['validator']){
				elementsForm['validator'].resetForm();
			}
		}
	}
	/** fin servicios masivos **/

	/** Roaming single **/
	function initFormularioRoamingSingle(){
		var $mainForm = $('#autogestion-form-single');


		initActions();
		validateMainForm();

		function initActions(){

			$(".calendar").on("change",function(e){
				e.stopPropagation();
				$('#autogestion-btn').prop('disabled', false);

			});

		}

		function validateMainForm(){

			disableSumbitButton($mainForm, true);

			elementsForm['validator'] =
				$mainForm.validate({
					ignore: "",
				  rules: {
					"fecha-inicio": {
						required: true
					},
					"fecha-fin": {
						required: true
					}
				  },
				  messages: {
					 "fecha-inicio": {
					   required: "Ingresa una fecha de inicio.",
					 },
					 "fecha-fin": {
					   required: "Ingresa una fecha fin.",
					 }
				   },
					errorClass : "error-dd error",
					errorElement : 'div',
					errorPlacement: function(error, element) {
						var elementInput = element[0];
						if(element[0]['id']==='archivo' && $(elementInput).val() != ''){
							$('.lineas-archivo .extra-info').hide();
							error.appendTo( $('.lineas-archivo .add-lines-ge-mod' ));
							element.parent().addClass('error');

						}
					},
					success: function ($error) {
						if($error.length>0 && $('#archivo').val() != ''){
							$('.lineas-archivo .extra-info').hide();
							$('.lineas-archivo .file.error' ).removeClass('error');
			   				$error.remove();
						}

			        },
			        submitHandler: function(form) {
						if(!elementsForm['sending']){
							sendFormData(form);
				  		}
					}
				});

			function sendFormData(form){
				elementsForm['sending'] = true;
				$(form).find('button[type="submit"]').prop('disabled', true);

				var self = $(form).serialize();

				var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

				/**Quitar una vez en producción**/
				var sendTo = urlPOST;

				urlPOST = checkDevelopmentPostHTML(urlPOST);

				$.post(  urlPOST , self )
				.done(function( data ) {
				  	Services.autogestion.singleAutogestionRoamingCallSuccess(data, form, sendTo);
					elementsForm['sending'] = false;

				 })
				.fail(function( jqxhr, textStatus, error ) {
				  	//Mensaje de error del sistema
				  	Services.autogestion.singleAutogestionRoamingCallFail(error, form);
				  	elementsForm['sending'] = false;
				});
			}
		}
	}
	/** fin roaming single **/

	/** Roaming masivo **/
	function initFormularioRoamingMasivo(){
		var $mainForm = $('#autogestion-form');

		var tipoIngreso = null;

		initActions();
		validateMainForm();

		function initActions(){

			/**
				Cuando se esconda el step 2
			**/

			var fullReset = false;

			$('#componente-ingresar-lineas .btn-al').on('click', function(event) {
				fullReset = true;
			});

			$('#autogestion-paso-2').on('show', function(event) {
				fullReset = true;

				$('#autogestion-btn, .btn-continuar').prop('disabled', !validateFormData());
			});

			$('#autogestion-paso-2').on('hide', function(event) {
				var target = $(event.target).attr('id');
				if(target==='autogestion-paso-2' && fullReset)
			      resetMainForm();

			  	fullReset = false;

			  	$('#autogestion-btn, .btn-continuar').prop('disabled', true);
			});

			// $(".calendar").on("change",function(e){
			// 	e.stopPropagation();
			// 	//removeFechaError($('#input-fecha-corte'));
			// 	setTimeout(function(){
			// 		$('#autogestion-btn, .btn-continuar').prop('disabled', !validateFormData());
			// 	}, 800);

			// });

		}

		function validateMainForm(){

			disableSumbitButton($mainForm, true);

			elementsForm['validator'] =
				$mainForm.validate({
					ignore: "",
				  rules: {
					archivo: {
						extension: "xls",
						filesize: 10000000
					},
					"fecha-inicio": {
						required: true
					},
					"fecha-fin": {
						required: true
					}
				  },
				  messages: {
					 archivo: {
					   required: "Ingresa un archivo de 10 MB máximo.",
					   extension: "Ingresa un archivo con extensión: .xls",
					   filesize: "Ingresa un archivo de 10 MB máximo."
					 },
					 "fecha-inicio": {
					   required: "Ingresa una fecha de inicio.",
					 },
					 "fecha-fin": {
					   required: "Ingresa una fecha fin.",
					 }
				   },
					errorClass : "error-dd error",
					errorElement : 'div',
					errorPlacement: function(error, element) {
						var elementInput = element[0];
						if(element[0]['id']==='archivo' && $(elementInput).val() != ''){
							$('.lineas-archivo .extra-info').hide();
							error.appendTo( $('.lineas-archivo .add-lines-ge-mod' ));
							element.parent().addClass('error');

						}
					},
					success: function ($error) {
						if($error.length>0 && $('#archivo').val() != ''){
							$('.lineas-archivo .extra-info').hide();
							$('.lineas-archivo .file.error' ).removeClass('error');
			   				$error.remove();
						}

			        },
			        submitHandler: function(form) {
						if(!elementsForm['sending']){
							sendFormData(form);
				  		}
					}
				});

			function sendFormData(form){
				elementsForm['sending'] = true;
				$(form).find('button[type="submit"]').prop('disabled', true);

				var self = $(form).serialize();

				var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

				/**Quitar una vez en producción y aqui solo checamos si es una línea en development para mandar a otra liga**/
				var sendTo = ( (ingresarLineasComponentTotal == 1 && is_mobile() && typeof $(form).data('actionmobile') != 'undefined') ? $(form).data('actionmobile') : urlPOST);

				urlPOST = checkDevelopmentPostHTML(urlPOST);

				$.post(  urlPOST , self )
				.done(function( data ) {
				  	Services.autogestion.masivoAutogestionRoamingCallSuccess(data, form, sendTo, showInvalidErrorArchivo );
					elementsForm['sending'] = false;

				 })
				.fail(function( jqxhr, textStatus, error ) {
				  	//Mensaje de error del sistema
				  	Services.autogestion.masivoAutogestionRoamingCallFail(error, form);
				  	elementsForm['sending'] = false;
				});
			}
		}

		function validateFormData(){


			var dataLineas = [];
			var lineasValid = false,
			dateInit = $('#input-fecha-inicio').val(),
			dateFin  =  $('#input-fecha-fin').val();

			var dataType = ingresarLineasComponent.getType();

			if(dataType === '.componente-lineas-block .lineas-autocomplete')
				dataLineas = ingresarLineasComponent.getDataAutocomplete();
			else if(dataType === '.componente-lineas-block .lineas-arbol')
				dataLineas = ingresarLineasComponent.getDataArbol();
			else
				dataLineas.push(null);

			if(dataLineas.length>0 && $mainForm.valid())
				lineasValid = true;

	    	$('#lineas-hidden-input').val(JSON.stringify(dataLineas));

			if(lineasValid)
				return true;


			return false;
		}

		function resetMainForm(){
			$mainForm.find("input[type=text], input[type=email], input[type=password], select").val("");
			$mainForm.find("input[type=checkbox], input[type=radio]").prop("checked", false);
			$mainForm.find('button[type="submit"]').prop('disabled', true);
			$mainForm.find('.date-picker .calendar').datepicker( "setDate" , null );
  			$mainForm.find('.fecha-input').val('');
  			$mainForm.find('.date-picker .fecha.one-field').html('');
  			$mainForm.find('.date-picker .fecha-fin').closest('.date-picker').addClass('disabled');
			if(elementsForm['validator']){
				elementsForm['validator'].resetForm();
			}
		}
	}
	/** fin roaming masivos **/

	function initComponentes(){

		/** componente formulario una línea para suspensión**/
	    if($('.autogestion-suspension-block #autogestion-form-single').length>0)
			initFormularioSuspensionSingle();

		/** componente formulario una línea para autogestión general (cambio y reactivacion)**/
		if($('.autogestion-reactivacion-cambio-block #autogestion-form-single').length>0)
			initFormularioGeneralSingle();

		/** componente formulario varías líneas para suspension**/
	    if($('.autogestion-suspension-block #autogestion-form').length>0)
			initFormularioSuspensionMasivo();

		/** componente formulario para citas**/
	    if($('.citas-block #autogestion-form').length>0 || $('.citas-block #autogestion-form-single').length>0)
			initFormularioCitas();

		/** componente formulario para red privada**/
	    if($('.red-privada-block #autogestion-form').length>0)
			initFormularioRedPrivada();

		/** componente formulario para red privada**/
	    if($('.red-privada-block #autogestion-form-abono').length>0)
			initFormularioAbonoDeSaldo();

		/** componente formulario para roamingSingle**/
		if($('.autogestion-general-block.roaming-block #autogestion-form-single').length>0)
			initFormularioRoamingSingle();

		/** componente formulario para roamingMasivo**/
		if($('.autogestion-general-block.roaming-block #autogestion-form').length>0)
			initFormularioRoamingMasivo();

		/** componente formulario varías líneas para autogestión general (cambio y reactivacion)**/
		if($('.autogestion-reactivacion-cambio-block #autogestion-form').length>0)
			initFormularioGeneralMasivo();

		/** componente para autogestión servicios y formulario varías líneas servicios**/
		if($('.autogestion-servicios-block').length>0){
			serviciosTelcel.inicializar();
			if($('.autogestion-servicios-block #autogestion-form').length>0)
				initFormularioServiciosMasivo();
		}

		/** componente para autogestión confirmación general**/
	    if($('#autogestion-confirmacion').length>0)
	    	initConfirmacionAutogestion();
	    /** componente para autogestión confirmación general**/

	    if($('#listado-sin-autogestion-container').length>0 || $('#listado-post-confirmacion-suspension').length>0)
	    	initConfirmacionListado();

	}

	return{
        inicializar: function(){

            if($('.autogestion-general-block').length>0)
            	initComponentes();

        }
    }

})();
var facturacionTelcel = (function(){
	var formularioId = '#form-facturas',
	$facturacionTable = $('#facturacion-table'),
	$listaFacturacion = $('#listado-facturas'),
	$facturasSelect = $('select#factura'),
	$periodoSelect = $('select#periodo'),
	$titleP = $('#modal-descargar .heading-mod .title-mod p'),
	titleBefore = ( typeof $titleP.data('before') != 'undefined' ? $titleP.data('before') : null ),
	titleAfter = ( typeof $titleP.data('after') != 'undefined' ? $titleP.data('after') : null ),
	CFDI = $listaFacturacion.hasClass('cfdi'),
	formElementsModales = { validator : null, sending: false },
	checkedElements = [];

	var modalDescargarFacturas = null;

	function initModalDescargarFacturas(){
		var emailDefault = '',
		$input = $('#modal-descargar').find('input[name="email"]'),
		formData = {};

		validateForm();

		modalDescargarFacturas = new modalesTelcel($('#modal-descargar'),{
			onInit : function(){
				initActions();
				emailDefault = $input.val();
				$('#confirmacion-autogestion').hide();
				$('#descargar-facturas-confirmacion').hide();
			},
			onReset : function(){
				removeGeneralError();
				$('#form-confirmar-descargar-facturas').show();
			  	$('#descargar-facturas-confirmacion').hide();
			  	resetMainForm();
			  	$('#btn-facturas-servicio').prop('disabled', false);
			},
			onOpen : function(){
				$('#modal-descargar').removeClass('no-close-out');

				//Simular el error en descargas con el hash//
				$('#modal-descargar .info-error').addClass('hidden');
				var hash = window.location.hash;

				if(hash=='#error-en-archivo')
					$('#modal-descargar .info-error').removeClass('hidden');
				//fin simulación//

				setPreviousData();

				if(titleBefore!=null)
					$titleP.html(titleBefore);

				//checkedElements = generalCheckBoxAll.getCheckedElements();
				var total = $('#listado-confirmacion-autogestion .checkbox-container input[type="checkbox"]').length;
				var checked = $('#listado-confirmacion-autogestion .checkbox-container input[type="checkbox"]:checked').length;

				checkedElements = { all : total == checked , elements:[]};
				$('#form-confirmar-descargar-facturas').find('button[type="submit"]').prop('disabled', false);

				if(!checkedElements.all){
					$('#form-confirmar-descargar-facturas').hide();
					$('#confirmacion-autogestion .c-lines').html(checked);
					$('#confirmacion-autogestion .t-lines').html(total);
					$('#confirmacion-autogestion').show();
				}
				else
					$('#descargar-facturas-confirmacion').hide();
			}
		});

		function setPreviousData(){

			if($facturasSelect.length>0)
				formData.factura = $facturasSelect.val();

			if($periodoSelect.length>0)
				formData.periodo = $periodoSelect.val();

		}

		function initActions(){
			$('#btn-confirmar-autogestion').click(function(){
				$('#descargar-facturas-confirmacion').hide();
				$('#confirmacion-autogestion').hide();
				$('#form-confirmar-descargar-facturas').show();
			});

			$('#modal-descargar').on('click', '#btn-r-descargar-facturas', function(){
				removeGeneralError();
				$('#form-confirmar-descargar-facturas').submit();
			});
		}

		function validateForm(){
			var $form = $('#form-confirmar-descargar-facturas');

			disableSumbitButton($form, true);

			formElementsModales['validator'] = $form.validate({
				rules: {
					email: {
						required: false,
						email: true
					}
				},
			  	messages: {
					 email: {
					   required: "Ingresa un correo electrónico.",
					   email: "Ingresa un correo electrónico válido."
					 }
			   },
			   errorClass : "error-dd error",
				submitHandler: function(form) {
					// handleErrorTooltip(false);

					if(!formElementsModales['sending']){

						formElementsModales['sending'] = true;

						$(form).find('button[type="submit"]').prop('disabled', true);

						generalLoadingIcon(form, true);

						formData.email = $(form).find('#email').val();

						$.post( postURL , { data: formData, facturas : checkedElements })
						  .done(function( json ) {

						  	Services.facturacion.descargarFacturasSuccessCallback(json, form, { element : $titleP, text : titleAfter }, uncheckAfterSend);
						  	formElementsModales['sending'] = false;
						  	generalLoadingIcon(form, false);

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	Services.facturacion.descargarFacturasFailCallback(form, error);
						  	formElementsModales['sending'] = false;
						  	generalLoadingIcon(form, false);
						});

					}

				}
			});

			checkGeneralValidForm($form);
		}

		function uncheckAfterSend(){
			//Limpiar y y resetear cada acción
		  	$('.configuracion-descarga-facturas').find("input[type=checkbox]").prop("checked", false);
		  	$('.configuracion-descarga-facturas').find("input[type=checkbox]").trigger('change');
		  	$('#check-all-elements').data('value', false);
		  	$('#check-all-elements').trigger('click');
		}

		function removeGeneralError(){
			$('#modal-descargar .system-error-msg').remove();
			$('#modal-descargar .has-system-error').removeClass('has-system-error');
		}

		function resetMainForm(){
			$input.removeClass('error error-dd');
			$input.val(emailDefault);

			if(formElementsModales['validator']){
				formElementsModales['validator'].resetForm();
			}
		}
	}

	function initFormGeneral(){
		var $form = $(formularioId),
		onlyAlias = $(formularioId).hasClass('only-alias'),
		facturasServicios = $form.hasClass('form-facturas-servicio'),
		facturasEquipos = $form.hasClass('form-facturas-equipo'),
		//facturasAlias = $form.find('#'),
		$btn = $('#btn-facturas-servicio, #btn-descargas, #btn-bitacora'),
		formAction = null,
		showPeriodoMeta = true,
		elementsForm = false,
		formMeta = {},
		// Liga a la que hace el POST!
		formActionPost= 'reportes-2.html',
		currentType = null;

		function updateBtn(){
			currentType = ingresarLineasComponent.getType();
			formAction = (currentType === '.componente-lineas-block .lineas-archivo' ? 'descarga' : formMeta.action );
			$btn.text( ( (is_mobile() || currentType === '.componente-lineas-block .lineas-archivo') && typeof formMeta.ctaMobile != 'undefined' ? formMeta.ctaMobile : formMeta.cta));
			$form.prop('action', (currentType === '.componente-lineas-block .lineas-archivo' ? 'null' : formMeta.post) );
			$btn.addClass(formAction);

			var blockAdmin = ($form.hasClass('reportes-block') ? (formAction=='descarga' ? true : false ) : ( facturasServicios ? ((formAction=='factura' && (typeof formMeta.periodo != 'undefined' && !formMeta.periodo)) ? true : false) : false) );

			if(is_admin_mode() && blockAdmin )
				$btn.addClass('disabled-admin-mode');
			else
				$btn.removeClass('disabled-admin-mode');

		}

		initActions();
		if($('#modal-descargar').length>0)
			initModalDescargarFacturas();
		setPreselectedData();

		function setPreselectedData(){
			//Preselect Alias
			var hash = window.location.hash;
			if(typeof hash != 'undefined'){
				hash = hash.replace('#','');
				if($("#alias option[value='"+hash+"']").length > 0){
					$('#alias').val(hash);

					$('#alias').trigger('change');
					//$('#btn-bitacora').prop('disabled', false);
				}
			}
		}

		function updateFormData(){
			formAction = formMeta.action;

			$btn.text( ( (is_mobile() || currentType === '.componente-lineas-block .lineas-archivo') && typeof formMeta.ctaMobile != 'undefined' ? formMeta.ctaMobile : formMeta.cta));
			$form.prop('action', formMeta.post);
			$btn.addClass(formAction);

			if(formAction == 'cuenta-hija' && !is_mobile())
				mostrarComponenteLineas(true);
			else
				mostrarComponenteLineas(false);

			var blockAdmin = ($form.hasClass('reportes-block') ? (formAction=='descarga' ? true : false ) : ( facturasServicios ? ((formAction=='factura' && (typeof formMeta.periodo != 'undefined' && !formMeta.periodo)) ? true : false) : false) );

			if(is_admin_mode() && blockAdmin )
				$btn.addClass('disabled-admin-mode');
			else
				$btn.removeClass('disabled-admin-mode');


		}

		function validateMainForm(){

			disableSumbitButton($form, true);

			elementsForm['validator'] =
				$form.validate({
				  rules: {
					archivo: {
						extension: "xls",
						filesize: 10000000
					}
				  },
				  messages: {
					 archivo: {
					   required: "Ingresa un archivo de 10 MB máximo.",
					   extension: "Ingresa un archivo con extensión: .xls",
					   filesize: "Ingresa un archivo de 10 MB máximo."
					 }
				   },
				   errorClass : "error-dd error",
					errorElement : 'div',
					errorPlacement: function(error, element) {

						var elementInput = element[0];

						if(elementInput['id']==='archivo' && $(elementInput).val() != ''){
							$('.lineas-archivo .extra-info').hide();
							error.appendTo( $('.lineas-archivo .add-lines-ge-mod' ));
							element.parent().addClass('error');
						}
					},
			   		onclick: false,
					success: function ($error) {
						if($error.length>0 && $(formularioId+' #archivo').val() != ''){
							$('.lineas-archivo .extra-info').hide();
							$('.lineas-archivo .file.error' ).removeClass('error');
			   				$error.remove();
						}

			        },
			        submitHandler: function(form) {

			        	var adminBlock = $btn.hasClass('disabled-admin-mode');

						if(!elementsForm['sending'] && !adminBlock){
							var form = formularioId;
							sendFormData(form);
				  		}
					}

				});
		}

		function sendFormData(form){
			elementsForm = true;
			$(form).find('button[type="submit"]').prop('disabled', true);

			var self = $(form).serialize();

			var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

			/**Quitar una vez en producción**/
			var sendTo = urlPOST;

			urlPOST = checkDevelopmentPostHTML(urlPOST);

			$.post(  urlPOST , self )
			.done(function( data ) {
			  	Services.facturacion.facturacionFormCallSuccess(data, form, sendTo );
				elementsForm = false;

			 })
			.fail(function( jqxhr, textStatus, error ) {
			  	//Mensaje de error del sistema
			  	Services.facturacion.facturacionFormCallFail(error, form);
			  	elementsForm = false;
			});
		}

		function initActions(){

			if($form.hasClass('reportes-block'))
				$( window ).resize(function() {
					var changed = $form.find('.factura').val();
				  	if(changed)
				  		$form.find('.factura').trigger('change');
				});

			$('.select-change').change(function(){
				var $alias = $form.find('select.alias');
				var aliasValid = ($alias.length>0 ? validAlias() : true);


				if(onlyAlias)
					$btn.prop('disabled', !(aliasValid));
				else if(facturasEquipos)
					$btn.prop('disabled', !(validFormEquipo() && aliasValid));
				else
					$btn.prop('disabled', !(validForm() && aliasValid));

			});

			$form.find('.factura').change(function(){
				var $tipo = $(this);

				$btn.removeClass(formAction);

				formMeta = (typeof $tipo.find(':selected').data('meta') != 'undefined' ? $tipo.find(':selected').data('meta') : null );

				if(formMeta!=null){
					updateFormData();
				}
			});

			$form.on('click', 'button.descarga', function(e){
				e.preventDefault();
				if($(this).hasClass('disabled-admin-mode')){
					e.preventDefault();
					return false;
				}
				else{
					modalDescargarFacturas.openModal();
				}

			});

			$form.on('click', 'button.cuenta-hija', function(e){
				e.preventDefault();
				if(is_mobile())
					modalDescargarFacturas.openModal();
				else if(validateFormData() && validForm())
					$form.submit();
			});

			$form.on('click', 'button.factura', function(e){
				e.preventDefault();
				if(is_mobile())
					modalDescargarFacturas.openModal();
				else
					$form.submit();
			});

			$('#componente-ingresar-lineas .componente-btn-block').on('click', '.btn-al', function(){
				updateBtn();
			});

			$('#componente-ingresar-lineas .file').on('change', 'input[type="file"]', function(e){
				e.stopPropagation();
				//Simulador de loading
				generalFullLoadingIcon($('body'), true);

				setTimeout(function(){
					generalFullLoadingIcon($('body'), false);
				}, 2000);

				//fin simulador loading
			});

			validateMainForm();
		}


		function validFormEquipo(){

			var valid = false,
			$periodo = $form.find('.periodo');

			if($periodo.val() != '')
				valid = true;

			return valid;
		}

		function validAlias(){

			var valid = false,
			$alias = $form.find('.alias');

			if($alias.val()!= '')
				valid = true;

			return valid;
		}

		function validForm(){

			var valid = false,
			$periodo = $form.find('.periodo'),
			$tipo = $form.find('.factura'),
			$periodoContainer = $form.find('.periodo-input-block'),
			formMeta = (typeof $tipo.find(':selected').data('meta') != 'undefined' ? $tipo.find(':selected').data('meta') : null ),
			showPeriodoMeta = (formMeta != null && typeof formMeta.periodo != 'undefined' ? formMeta.periodo : true );
			showPeriodo = $tipo.val() != '' && showPeriodoMeta;

			//Aquí el valor de la opción de facturas pendientes es 3
			if(showPeriodo)
				$periodoContainer.removeClass('hidden');
			else
				$periodoContainer.addClass('hidden');

			if((showPeriodo && $periodo.val() != '') || (!showPeriodo) && $tipo.val()!='')
				valid = true;

			return valid;
		}

		function validateFormData(){
			var dataLineas = [];
			var lineasValid = false;
			//var dataArchivo = ingresarLineasComponent.getDataArchivo();

			var dataType = ingresarLineasComponent.getType();

			if(dataType === '.componente-lineas-block .lineas-autocomplete')
				dataLineas = ingresarLineasComponent.getDataAutocomplete();
			else if(dataType === '.componente-lineas-block .lineas-arbol')
				dataLineas = ingresarLineasComponent.getDataArbol();
			else
				dataLineas.push(null);

			if(dataLineas.length>0)
				lineasValid = true;

	    	$('#lineas-hidden-input').val(JSON.stringify(dataLineas));

			if(lineasValid)
				return true;


			return false;
		}

		function mostrarComponenteLineas(flag){

			if(flag){
				$('#componente-ingresar-lineas').parent().removeClass('hidden');
				$btn.hide();
			}
			else{
				$('#componente-ingresar-lineas').parent().addClass('hidden');
				$btn.show();
			}

			ingresarLineasComponent.reset();

		}
	}

	function initListadoDescargaFacturas(){

		var $listaFacturas =  $('#listado-facturas');
		generarListadoConfirmacionInicial();
		initActions();

		initModalDescargarFacturas();

		// SIMULAR ERROR
		var hash = window.location.hash;

		if(hash=='#sin-resultados'){
			$('#sin-resultados').removeClass('hidden');
			$('#listado-check-all-container').addClass('hidden');
			$('#gestion-ejecutivos-view').addClass('hidden');
		}
		//FIN SIMULAR ERROR

		var modalGenerarReferencia = null;
		var _modalGenerarReferencia = {id : null, referencia : null};
		initModalGenerarReferencia();

		function initModalGenerarReferencia(){
			var formModal = { sendind: false };

			modalGenerarReferencia = new modalesTelcel($('#modal-generar-referencia'),{
				onInit : function(){
				},
				onReset : function(){
					//resetModal()
				},
				onOpen : function(){
					$('#modal-generar-referencia .heading-mod .title-mod p').html('Referencia única generada');
					generarReferencia();
				}
			});

			function generarReferencia(){

				var data = { success: false, data: [] };

				var container = '#modal-generar-referencia .in-cont-mod';

				if(!formModal['sending']){

					formModal['sending'] = true;
					generalLoadingIcon(container, true);

					var urlPOST = Services.apiURL.generarReferenciaUnica();

					$.post( urlPOST , { data: JSON.stringify(_modalGenerarReferencia) })
					  .done(function( json ) {

					  	Services.facturacion.generarReferenciaUnicaSuccessCallback(json, container, _modalGenerarReferencia, updateDom);
					  	formModal['sending'] = false;
					  	generalLoadingIcon(container, false);

					  })
					  .fail(function( jqxhr, textStatus, error ) {
					  	Services.facturacion.generarReferenciaUnicaFailResponse(error, form);
					  	formModal['sending'] = false;
					  	generalLoadingIcon(container, false);
					});
				}
			}

			function updateDom(){
				$('#modal-generar-referencia .form-ge-mod.error-ge').addClass('hidden');
				$('#modal-generar-referencia #form-generar-referencia').removeClass('hidden');
				$('.referencia-unica-block.ru-'+_modalGenerarReferencia.id+' p').html(_modalGenerarReferencia.referencia).removeClass('generar');
			}

		}

		function initActions(){

			generalCheckBoxAll.inicializar();

			$('.configuracion-descarga-facturas').on('click', '.btn-open-general-config', function(e){
				e.stopPropagation();
				var $settings = $(this).parent().parent().find('.settings-ri');
				$settings.addClass('active');
				$('body').addClass('settings-open');
			});

			$('.configuracion-descarga-facturas').on('click', '.btn-close-general-config', function(e){
				e.stopPropagation();
				var $settings = $(this).parent().parent().parent('.settings-ri');
				$settings.removeClass('active');
				$('body').removeClass('settings-open');
			});

			$('.configuracion-descarga-facturas').on('click', '.btn-send-estados', function(){
				modalDescargarFacturas.openModal();
			});

			$('.configuracion-descarga-facturas .settings-ri').on('change', 'input[type=checkbox]', function(){
				checkSettingsDownload();
			});

			$('#btn-download-facturas').click(function(){
				checkedElements = generalCheckBoxAll.getCheckedElements();
				$('.configuracion-descarga-facturas .btn-close-general-config').trigger("click");
				modalDescargarFacturas.openModal();
			});

			$('.linea-batch').on('click','.btn-mobile button', function(){
				var $button = $(this),
				$parent = $button.parent().parent('.linea-batch'),
				hasClass = $parent.hasClass('ver-mas');

				$('.linea-batch').removeClass('ver-mas');
				$('.linea-batch .btn-mobile button').html('Ver más');

				if(hasClass){
					$button.html('Ver más');
					$parent.removeClass('ver-mas');
				}
				else{
					$button.html('Ver menos');
					$parent.addClass('ver-mas');
				}
			});

			/**
				Mostrar/Ocultar tablas
			**/
			// $('.facturacion-block').on('click', '.hide-show-filter', function(e){
			// 	var filter = ( typeof $(this).data('filter') != 'undefined' ? $(this).data('filter') : null );

			// 	if(filter!=null){
			// 		var text = $(this).text();
			// 		var newtext = (text == "Mostrar filtrado" ? "Ocultar filtrado" : "Mostrar filtrado");

	  //   			$(this).text( newtext );

	  //   			$(filter).toggleClass( 'visible' );
			// 	}
			// });

			$('.facturacion-block').on('click', '.btn-generar-referencia', function(e){
				var id = ( typeof $(this).data('id') != 'undefined' ? $(this).data('id') : null );

				if(id!=null){
					_modalGenerarReferencia.id = id;
					modalGenerarReferencia.openModal();
				}
			});

			$('body').on('click', '.settings-ri', function(e){
				if(is_mobile()){
					e.stopPropagation();
					$('.general-group-options-container').removeClass('active');
					$('.group-block').removeClass('active');
					$('.row-ls').removeClass('active-settings');
					$('.settings-ri').removeClass('active');
				}
			});

			$('body').on('click', '.settings-ri .cont-set-ri', function(e){
				e.stopPropagation();
			});


		}

		function checkSettingsDownload(){
			var $zip = $('#check-zip').is(":checked"),
			$xls = $('#check-xls').is(":checked"),
			disabled = true;

			if($zip || $xls)
				disabled = false;

			$('#btn-download-facturas').prop('disabled', disabled);
		}

		function generarListadoConfirmacionInicial(){

			var $elements = $listaFacturas.find('.linea-batch');
			var total = $elements.length;

			$elements.each(function (index, value) {
			  var meta = ( typeof $(this).data('meta') != 'undefined' ? $(this).data('meta') : null );
			  var $element = $(this);

				if(meta != null){
					var elemento = ($listaFacturas.hasClass('facturas-equipos') ?  generarHTMLFacturacionEquipos(meta, index) : ($listaFacturas.hasClass('referencia-unica') ? generarHTMLReferenciaUnica(meta, index) : ($listaFacturas.hasClass('pendientes-pago') ? generarHTMLPendientesPago(meta, index) : ($listaFacturas.hasClass('solicitud-descargas') ? generarHTMLSolicitudDescargas(meta, index) :generarHTMLFacturacion(meta, index) ) ) ) );
					$element.html(elemento);
					// dataListadoCuentasAsociadas.push(meta);

					// bindElementActions();

				}
			});
		}

		function generarHTMLFacturacion(meta, index){
			var html = '';

			html = '<div class="col-sm-pr-100 col-xs-12 content-item-block"> <div class="col-sm-pr-5 col-xs-2 checkbox-container flexbox h-align-center"> <input type="checkbox" id="i-'+meta.id+'" name="i-'+meta.id+'" value="'+meta.id+'" data-index="0"> <label for="i-'+meta.id+'"><span class="check-sq"></span> </label> </div> <div class="col-sm-pr-95 col-xs-12 flexbox h-align-center main-content-block"> <div class="col-sm-pr-10 col-xs-12"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Región:</p> <p title="'+meta.region+'">'+meta.region+'</p> </div> <div class="col-sm-pr-20 col-xs-12 flexbox cuenta-container"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Cuenta:</p> <p class="flexbox v-align-center"><span class="icon '+(meta.tipo == 1 ? 'io-City' : 'io-simple-avatar')+'" title="'+(meta.tipo == 1 ? 'Cuenta padre' : 'Cuenta hija')+'"></span><span title="'+meta.cuenta+'">'+meta.cuenta+'</span> </p> </div> <div class="'+(CFDI ? 'col-sm-pr-20' : 'col-sm-pr-25')+' col-xs-12"> <p class="mobile-only hidden-sm hidden-md hidden-lg">RFC:</p> <p title="'+meta.rfc+'">'+meta.rfc+'</p> </div> <div class="'+(CFDI ? 'col-sm-pr-15' : 'col-sm-pr-30')+' col-xs-12 hidden-data"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Razón social:</p> <p title="'+meta.razonsocial+'">'+meta.razonsocial+'</p> </div> <div class="col-sm-pr-15 col-xs-12 hidden-data"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Fecha de corte:</p> <p title="'+meta.fecha+'">'+meta.fecha+'</p> </div>'+(CFDI ? '<div class="col-sm-pr-20 col-xs-12 hidden-data"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Factura:</p> <p title="'+meta.factura+'">'+meta.factura+'</p> </div>' : '' )+'</div> </div> <div class="btn-mobile col-xs-12 hidden-sm hidden-md hidden-lg"> <button class="bton full-width" title="Ver más">Ver más</button> </div>';

			return html;

		}

		function generarHTMLPendientesPago(meta, index){

			var html = '';

			html = '<div class="col-sm-12 col-xs-12 content-item-block"> <div class="col-sm-pr-5 col-xs-2 checkbox-container flexbox h-align-center"> <input type="checkbox" id="i-'+meta.id+'" name="i-'+meta.id+'" value="'+meta.id+'" data-index="0"> <label for="i-'+meta.id+'"><span class="check-sq"></span> </label> </div> <div class="col-sm-pr-95 col-xs-10 flexbox h-align-center main-content-block"> <div class="col-sm-pr-10 col-xs-12"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Region:</p> <p title="'+meta.region+'">'+meta.region+'</p> </div> <div class="col-sm-pr-20 col-xs-12 flexbox cuenta-container"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Cuenta:</p> <p class="flexbox v-align-center"><span class="icon '+(meta.tipo == 1 ? 'io-City' : 'io-simple-avatar')+'" title="'+(meta.tipo == 1 ? 'Cuenta padre' : 'Cuenta hija')+'"></span><span title="'+meta.cuenta+'">'+meta.cuenta+'</span> </p> </div> <div class="col-sm-pr-10 col-xs-12"> <p class="mobile-only hidden-sm hidden-md hidden-lg">RFC:</p> <p title="'+meta.rfc+'">'+meta.rfc+'</p> </div> <div class="col-sm-pr-15 col-xs-12 hidden-data"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Razón social:</p> <p title="'+meta.razonsocial+'">'+meta.razonsocial+'</p> </div> <div class="col-sm-pr-15 col-xs-12 hidden-data"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Fecha de corte:</p> <p title="'+meta.fecha+'">'+meta.fecha+'</p> </div> <div class="col-sm-pr-15 col-xs-12 hidden-data"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Factura:</p> <p title "'+meta.factura+'">'+meta.factura+'</p> </div> <div class="col-sm-pr-15 col-xs-12 hidden-data"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Total:</p> <p title="$'+Number(meta.total).toFixed(2)+'">$'+Number(meta.total).toFixed(2)+'</p> </div> </div> </div> <div class="btn-mobile col-xs-12 hidden-sm hidden-md hidden-lg"> <button class="bton full-width" title="Ver más">Ver más</button> </div>';

			return html;

		}

		function generarHTMLFacturacionEquipos(meta, index){

			var html = '';

			html = '<div class="col-sm-pr-100 col-xs-12 content-item-block"> <div class="col-sm-pr-5 col-xs-2 checkbox-container flexbox h-align-center"> <input type="checkbox" id="i-'+meta.id+'" name="i-'+meta.id+'" value="'+meta.id+'" data-index="0"> <label for="i-'+meta.id+'"><span class="check-sq"></span> </label> </div> <div class="col-sm-pr-95 col-xs-10 flexbox h-align-center main-content-block"> <div class="col-sm-pr-20 col-xs-12 order-flexbox order-flexbox-1"> <p class="mobile-only hidden-sm hidden-md hidden-lg">RFC:</p> <p title="'+meta.rfc+'">'+meta.rfc+'</p> </div> <div class="col-sm-pr-25 col-xs-12 order-flexbox order-flexbox-2"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Razón social:</p> <p title="'+meta.razonsocial+'">'+meta.razonsocial+'</p> </div> <div class="col-sm-pr-15 col-xs-12 order-flexbox order-flexbox-3"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Fecha de emisión:</p> <p title="'+meta.fecha+'">'+meta.fecha+'</p> </div> <div class="col-sm-pr-20 col-xs-12 hidden-data order-flexbox order-flexbox-4"> <p class="mobile-only hidden-sm hidden-md hidden-lg">No. de documento:</p> <p title="'+meta.documento+'">'+meta.documento+'</p> </div> <div class="col-sm-pr-20 col-xs-12 hidden-data order-flexbox order-flexbox-5"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Tipo de documento:</p> <p title="'+meta.tipo+'">'+meta.tipo+'</p> </div> </div> </div> <div class="btn-mobile col-xs-12 hidden-sm hidden-md hidden-lg"> <button class="bton full-width" title="Ver más">Ver más</button> </div>';

			return html;

		}

		function generarHTMLReferenciaUnica(meta, index){

			var html = '';

			html = '<div class="col-sm-12 col-xs-12 content-item-block"> <div class="col-sm-pr-100 col-xs-12 flexbox h-align-center main-content-block"> <div class="col-sm-pr-20 col-xs-12 flexbox order-flexbox order-flexbox-1"> <p class="mobile-only hidden-sm hidden-md hidden-lg">RFC:</p> <p title="'+meta.rfc+'">'+meta.rfc+'</p> </div> <div class="col-sm-pr-25 col-xs-12 order-flexbox order-flexbox-2"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Razón social:</p> <p title="'+meta.razonsocial+'">'+meta.razonsocial+'</p> </div> <div class="col-sm-pr-20 col-xs-12 order-flexbox order-flexbox-3"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Documento:</p> <p title="'+meta.documento+'">'+meta.documento+'</p> </div> <div class="col-sm-pr-15 col-xs-12 order-flexbox order-flexbox-4"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Total:</p> <p title="$'+Number(meta.total).toFixed(2)+'">$'+Number(meta.total).toFixed(2)+'</p> </div> <div class="col-sm-pr-30 col-xs-12 referencia-unica-block ru-'+meta.id+' order-flexbox order-flexbox-5"> <p class="col-xs-12 '+(meta.referencia === 'Cancelada' ? 'cancelado' :'' )+'">'+(meta.referencia==='Generar' ? '<span class="btn-generar-referencia'+(is_admin_mode() ? ' disabled-admin-mode' : '')+'" data-id="'+meta.id+'">'+meta.referencia+'</span>' : meta.referencia)+'</p> </div> </div> </div>';
			return html;

		}

		function generarHTMLSolicitudDescargas(meta, index){
			var html = '';
			html = '<div class="col-sm-12 col-xs-12 content-item-block padding-0" data-index="'+index+'"><div class="col-sm-pr-100 col-xs-12 flexbox h-align-center main-content-block"><div class="col-sm-pr-35 col-xs-12 flexbox h-align-center"><p class="mobile-only hidden-sm hidden-md hidden-lg">Tipo:</p><p title="'+meta.tipo+'">'+meta.tipo+'</p></div>';

			html+='<div class="col-sm-pr-20 col-xs-12 flexbox h-align-center"><p class="mobile-only hidden-sm hidden-md hidden-lg">Solicitud:</p><p title="'+meta.solicitud+'">'+meta.solicitud+'</p></div><div class="col-sm-pr-20 col-xs-12"><p class="mobile-only hidden-sm hidden-md hidden-lg">Expiración:</p><p title="'+meta.expiracion+'">'+meta.expiracion+'</p></div><div class="col-sm-pr-15 col-xs-12 flexbox"><p class="mobile-only hidden-sm hidden-md hidden-lg">Estatus:</p><p title="'+meta.estatus+'">'+meta.estatus+'</p></div><div class="col-sm-pr-10 col-xs-12 estatus-block">'+(!meta.descarga ? ( meta.formato != null ? '<p><span class="cancelado">'+meta.formato+'</span></p>' : '<div class="en-proceso flexbox h-align-center"><div class="sk-circle"> <div class="sk-circle1 sk-child"></div> <div class="sk-circle2 sk-child"></div> <div class="sk-circle3 sk-child"></div> <div class="sk-circle4 sk-child"></div> <div class="sk-circle5 sk-child"></div> <div class="sk-circle6 sk-child"></div> <div class="sk-circle7 sk-child"></div> <div class="sk-circle8 sk-child"></div> <div class="sk-circle9 sk-child"></div> <div class="sk-circle10 sk-child"></div> <div class="sk-circle11 sk-child"></div> <div class="sk-circle12 sk-child"></div> </div></div>' ) : '<p><a href="'+meta.descarga_l+'">'+meta.formato+'</a></p>' ) +'</div></div></div>';

			return html;

		}
	}

	function initConfirmarAutogestion() {
		initActions();
		initModalDescargarFacturas();

		function initActions(){
			$('#generar-btn').on('click', function(e){
				modalDescargarFacturas.openModal();
			});
		}
	}

	function initHomeFacturacion(){
		initActions();

		function initActions(){
			$('#accesos-rapidos').change(function(){
				if($('#accesos-rapidos').val()!='')
					$('#btn-mobile-accesos').prop('disabled', false);
				else
					$('#btn-mobile-accesos').prop('disabled', true);

			});

			$('#btn-mobile-accesos').click(function(){
				var url = $('#accesos-rapidos').val();

				if(url!='')
					window.location.href=url;
			});
		}
	}

	return{
		inicializar : function(){
			//generarListadoConfirmacionInicial();
			formularioId = $('#form-alias-movimientos').length>0  ? '#form-alias-movimientos' : '#form-facturas';

			if($(formularioId).length>0)
				initFormGeneral();

			if($('#listado-facturas').length>0)
				initListadoDescargaFacturas();

			if($('.autogestion-facturacion-block #listado-confirmacion-autogestion').length>0)
				initConfirmarAutogestion();

			if($('.facturacion-home-container').length>0)
				initHomeFacturacion();
		}
	}
})();
var loginTemplate = (function(){

	var formValidators = { 'user' : null, 'admin' : null, 'pass' : null, 'register' : null };
	var sending = { 'user' : false, 'admin' : false, 'pass' : false, 'register' : false };

	var currentLogin = 'admin';

	function initLoginComponent(){
		if($('.login-form-block').length>0){
			setRandomBackground();
			validateLoginAdminForm();
			validatePasswordAdminForm();
			homeAdmin();
			tooltipComponent.inicializar();
		}
	}

	function setRandomBackground(){
		var totalbg = 6,
		bg = Math.floor(Math.random() * (6 - 1 + 1)) + 1,
		$bg = $('.bg-login');

		$bg.addClass('bg-'+bg);
	}

	function handleErrorTooltip(show){
		var $error = $('.login-form-block .general-error');
		if(show)
			$error.removeClass('hidden');
		else
			$error.addClass('hidden');
	}

	function homeAdmin(){
		initActions();
		showHomeAdmin();

		$(window).hashchange({
			hash: "#administrador",
			onSet: function() {
				showHomeAdmin();
			},
			onRemove: function() {
			   showHomeUser();
			},
		});

		function showHomeAdmin(){
			resetForms();
			scrollToElement($('body'));
			$('.login-form-block .register,.login-form.user-form, #pass-user').addClass('hidden');
			$('.login-form.admin-form, #pass-admin').removeClass('hidden');
		}

		function showHomeUser(){
			resetForms();
			scrollToElement($('body'));
			$('.login-form.admin-form, #pass-admin').addClass('hidden');
			$('.login-form-block .register, .login-form.user-form, #pass-user').removeClass('hidden');

		}

		function resetForms(){
			handleErrorTooltip(false);
			$('.login-form-block').find('form').find("input[type=text], input[type=email], input[type=number], input[type=password], select").val("");

			// Esconder tooltip
			$('.triangle-tooltip').addClass('hidden');
			$('.login-form-block').find('form').find('button[type="submit"]').prop('disabled', true);

			$('.login-form-block .general-success').addClass('hidden');
			$('#pass-forgot-user .form-block').removeClass('hidden');

			$('.login-form-block .general-success').addClass('hidden');
			$('#pass-forgot-admin .form-block').removeClass('hidden');

			$('.login-form-block .general-success').addClass('hidden');
			$('#register-form .form-block').removeClass('hidden');


			if(formValidators['admin'])
				formValidators['admin'].resetForm();

			if(formValidators['user'])
				formValidators['user'].resetForm();

			if(formValidators['pass'])
				formValidators['pass'].resetForm();

			if(formValidators['register'])
				formValidators['register'].resetForm();

		}

		function initActions(){

			$('#a-admin-home').click(function(e){
				e.preventDefault();
				updateViewAdmin();
			});

			$('#a-user-home').click(function(e){
				e.preventDefault();
				updateViewUser();
			});
		}

		function updateViewAdmin(){
			currentLogin = 'admin';

			$('#a-admin-home').addClass('hidden');
			$('#a-user-home').removeClass('hidden');

			$('#user-select').addClass('hidden');
			$('#admin-select').removeClass('hidden');
			$('.current-login').html('como administrador');

		}

		function updateViewUser(){
			currentLogin = 'user';
			$('#a-user-home').addClass('hidden');
			$('#a-admin-home').removeClass('hidden');

			$('#admin-select').addClass('hidden');
			$('#user-select').removeClass('hidden');
			$('.current-login').html('como ejecutivo');
		}
	}

	var tooltipComponent = function(){

		function init(){
			initElementsCTA();
			addCloseAction();
		}

		function initNuevo($element){

			var show = $element.data('show');
			var hide = ($element.data('hide')) ? $element.data('hide') : null;

			if(show) {
				addAction($element, show, hide);
			}

		}

		function initElementsCTA(){

			$('.login-form-block .cta-shows-block').each(function( index ) {

				var $element = $(this);

				var show = $element.data('show');

				var hide = ($element.data('hide')) ? $element.data('hide') : null;

				if(show) {
					addAction($element, show, hide);
				}

			});

		}

		function resetFormsTooltip(){
			handleErrorTooltip(false);
			var $inputs = $('.triangle-tooltip').find('form').find("input[type=text], input[type=email], input[type=number], input[type=password], select");
			$inputs.val("");
			$inputs.removeClass('error');

			$('.triangle-tooltip').find('form').find('button[type="submit"]').prop('disabled', true);

			if(formValidators['pass'])
				formValidators['pass'].resetForm();

			if(formValidators['register'])
				formValidators['register'].resetForm();


			$('.login-form-block .general-success').addClass('hidden');
			$('#pass-forgot .form-block').removeClass('hidden');

			$('.login-form-block .general-success').addClass('hidden');
			$('#register-form .form-block').removeClass('hidden');
		}

		function addAction($element, show, hide){
			$(show).addClass('hidden').addClass('cta-shown-block');

			$element.on("click", function(e){
				e.preventDefault();

				//$('.login-form-block .triangle-tooltip').addClass('hidden');
				$('.login-form-block .triangle-tooltip').hide();

				resetFormsTooltip();

				if(hide){
					//$(hide).addClass('hidden');
					$(hide).hide();
				}

				$(show).removeClass('hidden');
				$(show).slideToggle( 800 );
				scrollToElement($(show));
			});

		}

		function addCloseAction(){

			$('.close-container .icon').each(function( index ) {
				var $element = $(this);
				var hide = ($element.data('hide')) ? $element.data('hide') : null;

				$element.on("click", function(e){
					e.preventDefault();
					resetFormsTooltip();

					if(hide){
						$(hide).addClass('hidden');
					}
				});

			});
		}

		return{
			inicializar : init,
			inicializarExtra : initNuevo
		}

	}();

	function validatePasswordAdminForm(){

		var $form = $('#pass-forgot-admin .pass-forgot');

		disableSumbitButton($form, true);
		//checkRequiredElements('#pass-forgot-admin .pass-forgot');

		formValidators['pass'] = $form.validate({
		  rules: {
			password_email: {
			  required: true,
			  email: true
			}
		  },

		  messages: {
			 password_email: {
			   required: "Ingresa tu correo electrónico.",
			   email: "Ingresa un correo electrónico válido."
			 }
		   },
			submitHandler: function(form) {

				if(!sending['pass'])
				{
					sendFormData(form);
				}

			}
		});

		checkGeneralValidForm($form);

		function sendFormData(form){

			sending['pass'] = true;
			$(form).find('button[type="submit"]').prop('disabled', true);

			handleErrorTooltip(false);

			var self = $(form).serialize();

			loadingIcon(form, true);

			// CAMBIAR POR SERVICIO DEL POST DE LA INFORMACIÓN ADMIN
			var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

			$.post(  urlPOST , self )
			.done(function( data ) {

			  	loadingIcon(form, false);
			  	Services.login.passForgotCallSuccess(data, form);

				sending['pass'] = false;

			 })
			.fail(function( jqxhr, textStatus, error ) {
				loadingIcon(form, false);
			  	Services.login.passForgotCallFail(error, form);
			  	sending['pass'] = false;
			});
		}
	}

	function loadingIcon(form, show){
		var loading = '<div class="loading-block"><div class="sk-circle"> <div class="sk-circle1 sk-child"></div> <div class="sk-circle2 sk-child"></div> <div class="sk-circle3 sk-child"></div> <div class="sk-circle4 sk-child"></div> <div class="sk-circle5 sk-child"></div> <div class="sk-circle6 sk-child"></div> <div class="sk-circle7 sk-child"></div> <div class="sk-circle8 sk-child"></div> <div class="sk-circle9 sk-child"></div> <div class="sk-circle10 sk-child"></div> <div class="sk-circle11 sk-child"></div> <div class="sk-circle12 sk-child"></div> </div></div>';

		if(show){
			$(form).after(loading);
		}
		else{
			$('.loading-block').remove();
		}
	}

	/***LOGIN FORM Admin***/
	function validateLoginAdminForm(){

		var $form = $('.login-form.admin-form');

		disableSumbitButton($form, true);
		//checkRequiredElements('.login-form.admin-form');

		formValidators['admin'] = $form.validate({
		  rules: {
			admin_email: {
			  required: true,
			  email: true
			},
			admin_contrasena: {
			  required: true,
			  minlength: 8
			}
		  },
		  messages: {
			admin_contrasena: {
			   required: "Ingresa tu contraseña.",
			   minlength: "Mínimo de 8 caracteres."
			},
			 admin_email: {
			   required: "Ingresa tu correo electrónico.",
			   email: "Ingresa un correo electrónico válido."
			 }
		   },
			submitHandler: function(form) {
				if(!sending['admin']){
					sendFormData(form);
				}

			}
		});

		checkGeneralValidForm($form);

		function loadingIcon(form, show){
			var loading = '<div class="loading-block"><div class="sk-circle"> <div class="sk-circle1 sk-child"></div> <div class="sk-circle2 sk-child"></div> <div class="sk-circle3 sk-child"></div> <div class="sk-circle4 sk-child"></div> <div class="sk-circle5 sk-child"></div> <div class="sk-circle6 sk-child"></div> <div class="sk-circle7 sk-child"></div> <div class="sk-circle8 sk-child"></div> <div class="sk-circle9 sk-child"></div> <div class="sk-circle10 sk-child"></div> <div class="sk-circle11 sk-child"></div> <div class="sk-circle12 sk-child"></div> </div></div>';

			if(show){
				$(form).find('button[type="submit"]').parent().prepend(loading);
			}
			else{
				$('.loading-block').remove();
			}
		}

		function sendFormData(form){

			sending['admin'] = true;
			$(form).find('button[type="submit"]').prop('disabled', true);
			handleErrorTooltip(false);
			loadingIcon(form, true);

			var self = $(form).serialize();

			// CAMBIAR POR SERVICIO DEL POST DE LA INFORMACIÓN ADMIN
			var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

			$.post(  urlPOST , self )
			.done(function( data ) {

				$(form).find('input[type="password"]').val('');
			  	loadingIcon(form, false);
			  	Services.login.userLoginCallSuccess(data, form);

			  	/**Agregar funcionamiento del nuevo componente si existe**/
			  	var $new = $('.cta-shows-block.nuevo');
			  	if($new.length>0)
			  		tooltipComponent.inicializarExtra($new);
			  	/**Fin Agregar funcionamiento del nuevo componente si existe**/

				sending['admin'] = false;

			 })
			.fail(function( jqxhr, textStatus, error ) {
			  	//Mensaje de error del SISTEMA
			  	loadingIcon(form, false);
			  	Services.login.userLoginCallFail(error, form);
			  	sending['admin'] = false;
			});
		}
	}

	return{
		inicializar : initLoginComponent
	};

})();

var miCuenta = (function(){

	var $mainView = $('#mi-cuenta-view');
	var formElement = {
		id : '#form-mi-cuenta',
		validator : null,
		sending: false
	};

	function init(){
		if($('#mi-cuenta-view').length>0){
			initActions();
			validateForm();
		}
	}

	function initActions(){

		$mainView.on('click', '.show-text', function(){

			var $button = $(this);
			var $input = $button.parent().prev('div').find('input');
			$button.toggleClass('active');

			if($button.hasClass('active'))
				$input.attr('type', 'text');
			else
				$input.attr('type', 'password');
		});

		$mainView.on('change', 'input[type="file"]', function(e){
		      var $file = $(this);
		      var file = $file[0].files[0];
		      var filetype = file.type;
		      var $parent = $('.avatar-block .input-box-container');

		      $parent.removeClass('error');
		      $('.avatar-block >.data-write label.error').remove();

		      if(filetype == 'image/png' || filetype == 'image/jpeg'){
		      	var reader = new FileReader();

			      reader.readAsDataURL(file);
			      reader.onloadend = function () {
			        $('.avatar-block img').attr('src', reader.result);
			      }
			  }
			  else{
			  	$('.avatar-block img').attr('src', imgUrl+'avatar-general.jpg');
			  	$parent.addClass('error');
			  	$('.avatar-block >.data-write').append('<label class="error error-dd">El archivo es inválido los formatos aceptados son .jpg y .png</label>');
			  }
				var title =  $file.val().replace(/^.*[\\/]/, '');
				$parent.prop('title', title);
		});


		$mainView.on('click' , '.avatar-block img, .avatar-block .icon', function(e){
			$('#avatar_usuario').trigger('click');
		});

		$mainView.on('input' , '#nuevo-pass-usuario', function(e){
			var $passInput = $('#nuevo-pass-usuario-r');
			if($passInput.length>0 && $passInput.val().length>0)
				$passInput.valid();
		});

	}

	function validateForm(){

		var $form = $('#form-mi-cuenta');

		disableSumbitButton($form, true);
		//checkRequiredElements('#form-mi-cuenta');
		checkRequiredElementsOptional('#form-mi-cuenta');
		checkTelefonoLength($form);


		formElement['validator'] = $form.validate({
			ignore : "",
		  	rules: {
				nuevo_pass_usuario: {
					minlength: 8,
					maxlength: 15,
					pattern: /^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+){8,15}$/,
					notEqual : "#pass-usuario"
				},
	    		nuevo_pass_usuario_r: {
			    	equalTo: "#nuevo-pass-usuario"
			    },
			    nombre_usuario: {
					required: true,
					basicName: true,
					minlength: 3,
					maxlength: 40
				},
				avatar_usuario: {
					extension: "jpg|png",
					filesize: 10000000
				},
				puesto_usuario: {
					minlength: 2,
					maxlength: 60
				},
				numero : {
					required : true,
					digits: true,
					minlength: 10,
					maxlength: 10,
				},
				ext_usuario: {
				  digits: true,
				  maxlength: 4
				}
		  	},
		  messages: {
		  	pass_usuario: {
			   required: "Ingresa tu contraseña actual.",
			 },
			 nuevo_pass_usuario: {
			   required: "Ingresa una contraseña.",
			   minlength: "La contraseña debe tener de 8 a 15 caracteres (letras y números). Es sensible al uso de MAYÚSCULAS y minúsculas. No utilices acentos ni caracteres especiales ñ Ñ & ( ) ¡ ! ¿? % - / $ * + , .",
			   maxlength : "La contraseña debe tener de 8 a 15 caracteres (letras y números). Es sensible al uso de MAYÚSCULAS y minúsculas. No utilices acentos ni caracteres especiales ñ Ñ & ( ) ¡ ! ¿? % - / $ * + , .",
			   pattern: "La contraseña debe tener de 8 a 15 caracteres (letras y números). Es sensible al uso de MAYÚSCULAS y minúsculas. No utilices acentos ni caracteres especiales ñ Ñ & ( ) ¡ ! ¿? % - / $ * + , .",
			   notEqual : "La nueva contraseña debe ser diferente a la contraseña actual."

			 },
			 nuevo_pass_usuario_r: {
			   required: "Ingresa nuevamente tu contraseña para confirmarla.",
			   equalTo: "Las contraseñas no coinciden. Por favor inténtalo de nuevo."
			 },
			avatar_usuario: {
				extension: "El archivo es inválido los formatos aceptados son .jpg y .png",
				filesize: "El archivo debe ser menor a 10 MB."
			},
			puesto_usuario: {
				minlength: "El puesto debe contener al menos 2 caracteres.",
			   	maxlength : "El puesto no debe ser mayor a 60 caracteres."
			},
			nombre_usuario: {
				required : "Ingresa un nombre.",
				basicName: "Este campo solo acepta letras, números, punto y espacios.",
				minlength: "El nombre debe contener al menos 3 caracteres.",
			   	maxlength : "El nombre no debe ser mayor a 40 caracteres."
			},
			numero: {
			   required: "Ingresa un número de contacto.",
			   digits: "Ingresa un número válido.",
			   minlength: "Ingresa un número de 10 dígitos.",
			   maxlength: "Ingresa un número de 10 dígitos."
			 },
			ext_usuario: {
			  digits: "Ingresa solo números.",
			  maxlength: "Ingresa máximo 4 dígitos."
			}

		   },
		   errorClass : "error",
		   errorPlacement: function(error, $element) {
			   	var $parent = $element.parent();

			   	if($element.attr("name") == "numero"){
			   		$form.find('.lada').addClass('error-dd error');
			   		$form.find('.telefono').addClass('error-dd error');
			   		$parent.append( error );
			   	}
			   	else if($element.attr("name") == "nombre_usuario" || $element.attr("name") == "puesto_usuario"){
			   		$parent = $parent.parent('.outside-input-container');
			   		$('<div class="error-aux col-sm-8 col-xs-8 col-xs-offset-4 col-sm-offset-4"></div>').insertAfter( $parent );
			   		$parent.next('.error-aux').append(error);
			   	}
			   	else{
			   		$parent.append( error );
			   	}

			},
		  	success: function(label) {

		  		if($form.find('.numero').val().length==10){
		  			$('#numero-error').remove();
		    		$form.find('.error-dd').removeClass('error-dd error');
		  		}

		  		$(label).parent('.error-aux').remove();

		  	},
		  	submitHandler: function(form) {
		  		if(!formElement['sending']){
		  			sendFormData(form);
		  		}
			}

		});

		checkGeneralValidForm($form);
	}

	function sendFormData(form){
		formElement['sending'] = true;
		$(form).find('button[type="submit"]').prop('disabled', true);

		var self = $(form).serialize();

		// CAMBIAR POR SERVICIO DEL POST DE LA INFORMACIÓN ADMIN
		var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

		$.post(  urlPOST , self )
		.done(function( data ) {

		  	Services.login.actualizarDatosCallSuccess(data, form);
			formElement['sending'] = false;

		 })
		.fail(function( jqxhr, textStatus, error ) {
		  	//Mensaje de error del SISTEMA
		  	Services.login.actualizarDatosCallFail(error, form);
		  	formElement['sending'] = false;
		});
	}

	return{
		inicializar: init
	}

})();

var activacionCuenta = (function(){

	var $mainView = $('#activacion-cuenta-view');
	var formElement = {
		id : '#form-activacion-cuenta',
		validator : null,
		sending: false
	};

	function init(){
		if($('#activacion-cuenta-view #form-activacion-cuenta').length>0){
			initActions();
			validateForm();
		}
	}


	function initActions(){
		$mainView.on('click', '.show-text', function(){

			var $button = $(this);
			var $input = $button.parent().prev('.input-container').find('input');
			$button.toggleClass('active');

			if($button.hasClass('active'))
				$input.attr('type', 'text');
			else
				$input.attr('type', 'password');
		});

		$mainView.on('input' , '#nuevo-pass', function(e){
			var $passInput = $('#nuevo-pass-r');
			if($passInput.length>0 && $passInput.val().length>0)
				$passInput.valid();
		});
	}

	function validateForm(){

		var $form = $('#form-activacion-cuenta');

		disableSumbitButton($form, true);
		//checkRequiredElements('#form-activacion-cuenta');

		formElement['validator'] = $form.validate({
		  rules: {
			nuevo_pass: {
				required: true,
				minlength: 8,
				maxlength: 15,
				pattern: /^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+){8,15}$/
			},
    		nuevo_pass_r: {
		    	equalTo: "#nuevo-pass"
		    },
		    checkboxTerminos: {
				required : true
			}

		  },
		  messages: {
			 nuevo_pass: {
			   required: "Ingresa una contraseña.",
			   minlength: "La contraseña debe tener de 8 a 15 caracteres (letras y números). Es sensible al uso de MAYÚSCULAS y minúsculas. No utilices acentos ni caracteres especiales ñ Ñ & ( ) ¡ ! ¿? % - / $ * + , .",
			   maxlength : "La contraseña debe tener de 8 a 15 caracteres (letras y números). Es sensible al uso de MAYÚSCULAS y minúsculas. No utilices acentos ni caracteres especiales ñ Ñ & ( ) ¡ ! ¿? % - / $ * + , .",
			   pattern: "La contraseña debe tener de 8 a 15 caracteres (letras y números). Es sensible al uso de MAYÚSCULAS y minúsculas. No utilices acentos ni caracteres especiales ñ Ñ & ( ) ¡ ! ¿? % - / $ * + , ."

			 },
			 nuevo_pass_r: {
			   required: "Ingresa nuevamente tu contraseña para confirmarla.",
			   equalTo: "Las contraseñas no coinciden. Por favor inténtalo de nuevo."
			 },
			 checkboxTerminos: {
				required: "Acepta los términos y condiciones para continuar."
			}

		   },
		   errorClass : "error-dd error",
		   errorPlacement: function(error, $element) {
			   	var $parent = $element.parent('.input-container');
			   	$parent.append(error);
			},
			submitHandler: function(form) {
				if(!formElement['sending']){
		  			sendFormData(form);
		  		}
			}
		});

		checkGeneralValidForm($form);
	}

	function sendFormData(form){
		formElement['sending'] = true;
		$(form).find('button[type="submit"]').prop('disabled', true);

		var self = $(form).serialize();

		// CAMBIAR POR SERVICIO DEL POST DE LA INFORMACIÓN ADMIN
		var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

		$.post(  urlPOST , self )
		.done(function( data ) {

		  	Services.login.activarCuentaCallSuccess(data, form);
			formElement['sending'] = false;

		 })
		.fail(function( jqxhr, textStatus, error ) {
		  	//Mensaje de error del SISTEMA
		  	Services.login.activarCuentaCallFail(error, form);
		  	formElement['sending'] = false;
		});
	}

	return{
		inicializar: init
	}

})();

var estableceContrasena = (function(){

	var $mainView = $('#activacion-cuenta-view');
	var formElement = {
		id : '#form-establece-contrasena',
		validator : null,
		sending: false
	};

	function init(){
		if($('#activacion-cuenta-view #form-establece-contrasena').length>0){
			initActions();
			validateForm();
		}
	}


	function initActions(){
		$mainView.on('click', '.show-text', function(){

			var $button = $(this);
			var $input = $button.parent().prev('.input-container').find('input');
			$button.toggleClass('active');

			if($button.hasClass('active'))
				$input.attr('type', 'text');
			else
				$input.attr('type', 'password');
		});

		$mainView.on('input' , '#nuevo-pass', function(e){
			var $passInput = $('#nuevo-pass-r');
			if($passInput.length>0 && $passInput.val().length>0)
				$passInput.valid();
		});
	}

	function validateForm(){

		var $form = $('#form-establece-contrasena');

		disableSumbitButton($form, true);
		//checkRequiredElements('#form-establece-contrasena');

		formElement['validator'] = $form.validate({
		  rules: {
			nuevo_pass: {
				required: true,
				minlength: 8,
				maxlength: 15,
				pattern: /^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+){8,15}$/
			},
    		nuevo_pass_r: {
		    	equalTo: "#nuevo-pass"
		    },
		    checkboxTerminos: {
				required : true
			},

		  },
		  messages: {
			 nuevo_pass: {
			   required: "Ingresa una contraseña.",
			   minlength: "La contraseña debe tener de 8 a 15 caracteres (letras y números). Es sensible al uso de MAYÚSCULAS y minúsculas. No utilices acentos ni caracteres especiales ñ Ñ & ( ) ¡ ! ¿? % - / $ * + , .",
			   maxlength : "La contraseña debe tener de 8 a 15 caracteres (letras y números). Es sensible al uso de MAYÚSCULAS y minúsculas. No utilices acentos ni caracteres especiales ñ Ñ & ( ) ¡ ! ¿? % - / $ * + , .",
			   pattern: "La contraseña debe tener de 8 a 15 caracteres (letras y números). Es sensible al uso de MAYÚSCULAS y minúsculas. No utilices acentos ni caracteres especiales ñ Ñ & ( ) ¡ ! ¿? % - / $ * + , ."

			 },
			 nuevo_pass_r: {
			   required: "Ingresa nuevamente tu contraseña para confirmarla.",
			   equalTo: "Las contraseñas no coinciden. Por favor inténtalo de nuevo."
			 },
			 checkboxTerminos: {
				required: "Acepta los términos y condiciones para continuar."
			}

		   },
		   errorClass : "error-dd error",
		   errorPlacement: function(error, $element) {
			   	var $parent = $element.parent('.input-container');
			   	$parent.append(error);
			},
			submitHandler: function(form) {
				if(!formElement['sending']){
					sendFormData(form);
		  		}
			}
		});

		checkGeneralValidForm($form);
	}

	function sendFormData(form){
		formElement['sending'] = true;
		$(form).find('button[type="submit"]').prop('disabled', true);

		var self = $(form).serialize();
		var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

		$.post(  urlPOST , self )
		.done(function( data ) {

		  	Services.login.reestablecerContrasenaCallSuccess(data, form);
			formElement['sending'] = false;

		 })
		.fail(function( jqxhr, textStatus, error ) {
		  	//Mensaje de error del SISTEMA
		  	Services.login.reestablecerContrasenaCallFail(error, form);
		  	formElement['sending'] = false;
		});
	}

	return{
		inicializar: init
	}

})();
var gestionGrupos = (function(){

	var currentView = 'mosaico';
	var $currentMainView = null;

	var $mainmosaico = $('.js .group-list-block .mosaico-view');
	var $mainlista = $('.js .lista-view .listado-general');

	var $mainmosaicoP = $('js .group-list-block');
	var $mainlistaP = $('js .lista-view');

	var dataEmpresas = null;
	var dataFiltered = null; //Todos los elementos que se pueden mostrar
	var dataPaginacion = null; //Todos los elementos que se muestran en la paginacion

	var paginacion = null;

	var _mpoAccionMasiva = { data: [], allChecked : false };

	// MODALES
	var formElementsModales = {
		'nuevoGrupo' : {id : null, validator : null, sending: false },
		'eliminarGrupo' : {id : null, validator : null, sending: false },
		'moverGrupo' : {id : null, validator : null, sending: false },
		'agregarLineas' : {id : null, validator : null, sending: false },
		'agregarLineasArchivo' : {id : null, validator : null, sending: false },
		'buscarArbolGrupo' : {id : null, validator : null, sending: false },
		'buscarArbolLineas' : {id : null, validator : null, sending: false },
		'consultarLineas' : {id: null, validator: null, sending: false },
		'descargarFacturas': {id: null, validator: null, sending: false } };

	function init(){
		if($('.gestion-cuentas-block').length>0){
			if($('.general-group-options-container').length>0)
				setConfigInfo();
			setActions();
		}
	}


	function setConfigInfo(){
		var itemData = $('.general-group-options-container').data('item');
		$('.main-group-text').html(itemData.texto);
	}


	var modalAgregarGrupo = null;
	if($('#modal-agregar-grupo').length>0)
		initModalAgregarGrupo();

	var modalEliminarGrupo = null;
	if($('#modal-eliminar-grupo').length>0)
		initModalEliminarGrupo();

	var _modalCuentasAsociadas = {};
	var modalCuentasAsociadas = null;
	if($('#modal-cuentas-asociadas').length>0)
		initModalCuentasAsociadas();

	var _modalCuentasAuxiliar = {};
	var modalCuentasAuxiliar = null;
	if($('#modal-cuentas-auxiliar').length>0)
		initModalCuentasAuxiliar();

	var modalDescargarFacturas = null;
	var _modalDescargarFacturas = {
		data : [],
		allChecked : false
	};
	if($('.gestion-cuentas-block #modal-descargar').length>0)
		initModalDescargarFacturas();

	var modalAgregarLineas = null;
	if($('#modal-agregar-lineas').length>0)
		initmodalAgregarLineas();


	var modalMoverGrupo = null;
	if($('#modal-mover-grupo').length>0)
		initmodalMoverGrupo();

	/**Inicio modal consultar cuentas asociadas**/
	function initModalCuentasAsociadas(){
		var $modal = $('#modal-cuentas-asociadas');
		var cuentasAsociadas = [];

		_modalCuentasAsociadas = {
			container: '#modal-cuentas-asociadas',
			paginacion : null,
			modal : null,
			data : [],
			dataPaginacion : []
		};

		modalCuentasAsociadas = new modalesTelcel($modal,{
			onInit : function(){
			},
			onReset : function(){
			},
			onOpen : function(){
				getDataCuentasAsociadas();
			}
		});

		_modalCuentasAsociadas['paginacion'] = new PaginacionTelcel(_modalCuentasAsociadas['data'], {
			itemsPerPage : 5,
			paginationControlsContainer: '#modal-cuentas-asociadas .pagination-block',
			onPageClick : function(data){
				setOnActionsModalCA(data);
			},
			onInit : function(data){
				setOnActionsModalCA(data);
			},
			onReset : function(data){
				setOnActionsModalCA(data);
			}
		});

		initActionsModalCuentasAsociadas();

		function setOnActionsModalCA(data){
			_modalCuentasAsociadas['dataPaginacion'] = data;
			generarListadoCuentasAsociadas(_modalCuentasAsociadas['dataPaginacion']);
		}

		function initActionsModalCuentasAsociadas(){

			$('#modal-cuentas-asociadas .order-by-modal').on('click', 'button', function(){
				var opciones = $(this).data('opc');
				_modalCuentasAsociadas['data'] = orderItemsModal(opciones, cuentasAsociadas);
				_modalCuentasAsociadas['paginacion'].updateItems(_modalCuentasAsociadas['data']);
				_modalCuentasAsociadas['dataPaginacion'] = _modalCuentasAsociadas['paginacion'].showPage(1);
				generarListadoCuentasAsociadas(_modalCuentasAsociadas['dataPaginacion']);
			});
		}

		function getDataCuentasAsociadas(){

			generalLoadingIcon('#modal-cuentas-asociadas .in-cont-mod', true);

			// Aquí va el llamado al SERVICIO y a la API json
			var apiCuentas = (typeof $modal.data('api') != 'undefined' ? $modal.data('api') : postURL);

			$.getJSON( apiCuentas, {id: modalCurrentData.id })
			  .done(function( json ) {

			  	Services.gestionGrupos.cuentasAsociadasSuccessCallback(_modalCuentasAsociadas, json, cuentasAsociadas);

			  	generalLoadingIcon('#modal-cuentas-asociadas .in-cont-mod', false);
			  	cuentasAsociadas = cuentasAsociadas.value;
			  })
			  .fail(function( jqxhr, textStatus, error ) {

			  	Services.gestionGrupos.cuentasAsociadasFailCallback(_modalCuentasAsociadas, json);
			  	generalLoadingIcon('#modal-cuentas-asociadas .in-cont-mod', false);
			});
		}

		function generarListadoCuentasAsociadas(data){

			var $main = $('#modal-cuentas-asociadas .let-allow-asoc');

			$( "#modal-cuentas-asociadas .let-allow-asoc .content-r-asoc" ).remove();

			$.each(data , function( index, elemento ) {

				var htmlLista = '<div class="col-sm-12 content-r-asoc"> <div class="col-sm-12 content-item-block"> <div class="col-sm-2 region-container"> <label class="hidden-sm hidden-md hidden-lg">Región:</label><p title="'+elemento.region+'">'+elemento.region+'</p> </div><div class="col-sm-3 flexbox h-align-center v-align-center"> <span class="icon '+(elemento.tipo == 1 ? 'io-City' : 'io-simple-avatar')+'" title="'+(elemento.tipo == 1 ? 'Cuenta padre' : 'Cuenta hija')+'"></span> <p class="account-hra" title="'+elemento.cuenta+'">'+elemento.cuenta+'</p> </div> <div class="col-sm-3"> <p title="'+elemento.rfc+'">'+elemento.rfc+'</p> </div> <div class="col-sm-4 rs-container"> <p title="'+elemento.razonsocial+'">'+elemento.razonsocial+'</p> </div> <div class="vis-mobile-hra"> <button class="simple show-md-aux-info" data-info=\'{"tipo" : "'+elemento.tipo+'",  "rfc" : "'+elemento.rfc+'", "razonsocial" : "'+elemento.razonsocial+'", "cuenta" : "'+elemento.cuenta+'"}\' type="button"> <span class="icon io-dots-vertical"></span> </button> </div> </div> </div>';

			  	$main.append(htmlLista);

			});
		}

	}
	/**Fin modal consultar cuentas asociadas**/

	/**Inicio modal consultar cuentas asociadas auxiliar mobile**/
	function initModalCuentasAuxiliar(){
		modalCuentasAuxiliar = new modalesTelcel($('#modal-cuentas-auxiliar'),{
			onInit : function(){
				initActionsModalAuxiliar();
			},
			onReset : function(){
			},
			onOpen : function(){
				updateModalData();
			}
		});


		function initActionsModalAuxiliar(){
			$('.modal-mte').on('click', '.show-md-aux-info', function(){
				_modalCuentasAuxiliar = $(this).data('info');
				modalCuentasAuxiliar.openModal();
			});

			$('body').on('click', '#modal-cuentas-auxiliar.active-up-black', function(e){
				e.preventDefault();
				$(this).removeClass('active-up-black').removeClass('active');
			});
		}

		function updateModalData(){

			$('#modal-cuentas-auxiliar .rfc-txt').html(_modalCuentasAuxiliar.rfc);

			$('#modal-cuentas-auxiliar .title-mod .icon').remove();
			$('#modal-cuentas-auxiliar .title-mod').prepend('<span class="icon '+ (_modalCuentasAuxiliar.tipo == 1 ? 'io-City' : 'io-simple-avatar') +'"></span>');

			$('#modal-cuentas-asociadas .title-mod .icon').prop('title', _modalCuentasAuxiliar.tipo == 1 ? 'Cuenta padre' : 'Cuenta hija');

			$('#modal-cuentas-auxiliar .razonsocial-txt').html(_modalCuentasAuxiliar.razonsocial);

			$('#modal-cuentas-auxiliar .cuenta-txt').html(_modalCuentasAuxiliar.cuenta);

			$('#modal-cuentas-auxiliar').addClass('active-up-black');
		}

	}
	/**Fin modal consultar cuentas asociadas auxiliar mobile**/

	/**Inicio modal descargar facturas**/
	function initModalDescargarFacturas(){
		var $titleP = $('#modal-descargar .heading-mod .title-mod p.h2'),
		titleBefore = ( typeof $titleP.data('before') != 'undefined' ? $titleP.data('before') : null ),
		titleAfter = ( typeof $titleP.data('after') != 'undefined' ? $titleP.data('after') : null ),
		emailDefault = '',
		$input = $('#modal-descargar').find('input[name="email"]');

		validateForm();

		modalDescargarFacturas = new modalesTelcel($('#modal-descargar'),{
			onInit : function(){
				$('#descargar-facturas-confirmacion').hide();
				emailDefault = $input.val();
			},
			onReset : function(){
				removeGeneralError();
				$('#form-confirmar-descargar-facturas').show();
			  	$('#descargar-facturas-confirmacion').hide();
			  	resetMainForm();
			},
			onOpen : function(){
				if(titleBefore!=null)
					$titleP.html(titleBefore);
				$('#descargar-facturas-confirmacion').hide();

				var $form = $('#form-confirmar-descargar-facturas');
				disableSumbitButton($form, false);
			}
		});

		function validateForm(){
			var $form = $('#form-confirmar-descargar-facturas');

			disableSumbitButton($form, true);
			//checkRequiredElements('#form-confirmar-descargar-facturas');

			formElementsModales['descargarFacturas']['validator'] = $form.validate({
				rules: {
					email: {
					  required: true,
					  email: true
					}
				},
				messages: {
				 email: {
				   required: "Ingresa un correo electrónico.",
				   email: "Ingresa un correo electrónico válido."
				 }
				},
				errorClass : "error-dd error",
				submitHandler: function(form) {
					if(!formElementsModales['descargarFacturas']['sending']){

						formElementsModales['descargarFacturas']['sending'] = true;

						$(form).find('button[type="submit"]').prop('disabled', true);

						var self = $(form).serialize();

						generalLoadingIcon(form, true);

						if( typeof currentModalData != 'undefined' && currentModalData != null){
							_modalDescargarFacturas.data = currentModalData.id;
							_modalDescargarFacturas.is_line = (typeof currentModalData.is_line != 'undefined' && currentModalData.is_line ? true : false );
						}
						else{
							_modalDescargarFacturas.is_line = true;
						}

						var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

						$.post( urlPOST , { data: self, data: _modalDescargarFacturas })
						  .done(function( json ) {
						  	Services.gestionGrupos.descargarFacturasSuccessCallback(json, form, { element : $titleP, text : titleAfter });
						  	formElementsModales['descargarFacturas']['sending'] = false;
						  	generalLoadingIcon(form, false);

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	Services.gestionGrupos.descargarFacturasFailCallback(error, form);
						  	formElementsModales['descargarFacturas']['sending'] = false;
						  	generalLoadingIcon(form, false);
						});

					}

				}
			});

			checkGeneralValidForm($form);
		}

		function removeGeneralError(){
			$('#modal-descargar .system-error-msg').remove();
			$('#modal-descargar .has-system-error').removeClass('has-system-error');
		}

		$('#modal-descargar').on('click', '#btn-r-descargar-facturas', function(){
			removeGeneralError();
			$('#form-confirmar-descargar-facturas').submit();
		});

		function resetMainForm(){
			$input.removeClass('error error-dd');
			$input.val(emailDefault);

			if(formElementsModales['descargarFacturas']['validator']){
				formElementsModales['descargarFacturas']['validator'].resetForm();
			}
		}
	}
	/**Fin modal descargar facturas**/

	/**Inicio modal agregar grupo**/
	function initModalAgregarGrupo(){
		var processCompleted = false;
		var $form = $('.form-agregar-grupo #form-agregar-grupo');
		var $input = $form.find('input[name="nombre"]');

		$input.bind('input', function(e){
			var $errori = $form.find('.general-error-tooltip');
			if($errori.length>0){
				$input.removeClass('error').removeClass('error-dd');
				$errori.remove();
			}
		});

		modalAgregarGrupo = new modalesTelcel($('#modal-agregar-grupo'),{
			onInit : function(){
				validateFormAddGrupo();
				addAction();
			},
			onReset : function(){
				//resetModalDesasociarCuentas();
			},
			onOpen : function(){
				processCompleted = false;
				resetFormModal($('.form-agregar-grupo #form-agregar-grupo'), 'nuevoGrupo');
			},
			onClose : function(){

				//Cuando cierre el modal si quieren hacer refresh hay que descomentar esto
				// if(processCompleted)
				// 	location.reload();
			}
		});

		function addAction(){
			// ABRIR AGREGAR LINEAS DESDE MODAL
			$('#btn-agregar-lineas-grupo-modal').click(function(){
				var $element = $(this);
				setBasicInfoModal($element.data('item'));
				modalAgregarGrupo.closeModal();
				modalAgregarLineas.openModal();
			});

		}

		function validateFormAddGrupo(){

			var $form = $('.form-agregar-grupo #form-agregar-grupo');

			disableSumbitButton($form, true);
			//checkRequiredElements('#form-agregar-grupo');

			formElementsModales['nuevoGrupo']['validator'] = $form.validate({
			  rules: {
				nombre: {
					required: true,
					minlength: 5,
					grupoNombre : true,
			  		maxlength: 45
				}
			  },
			  messages: {
				 nombre: {
				   required: "Es necesario ingresar un nombre para el grupo.",
				   minlength : " El nombre debe tener al menos 5 caracteres.",
				   grupoNombre : "El nombre no debe tener caracteres especiales, números y espacio al inicio o final.",
				   maxlength : "El nombre debe tener un máximo de 45 caracteres."
				 }
			   },
			   errorClass : "error-dd error",
				submitHandler: function(form) {
					if(!formElementsModales['nuevoGrupo']['sending']){

						formElementsModales['nuevoGrupo']['sending'] = true;

						$(form).find('button[type="submit"]').prop('disabled', true);

						var self = $(form).serialize();
						var selfArray = $(form).serializeArray();

						generalLoadingIcon(form, true);

						var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

						$.post( urlPOST , { data: self, id: currentModalData.id })
						  .done(function( json ) {

						  	var elementData = { name : selfArray[0].value , currentId : currentModalData.id, input : $input };

						  	Services.gestionGrupos.agregarGrupoSuccessCallback(json, form, elementData, addCreatedElementToHTML );

						  	//$(form).find('button[type="submit"]').prop('disabled', false);
						  	formElementsModales['nuevoGrupo']['sending'] = false;
						  	generalLoadingIcon(form, false);
						  	processCompleted = true;

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	//Mensaje de error del SISTEMA

						  	Services.gestionGrupos.agregarGrupoFailCallback(error, form );

						  	formElementsModales['nuevoGrupo']['sending'] = false;
						  	generalLoadingIcon(form, false);
						  	processCompleted = true;
						});

					}

				}
			});

			checkGeneralValidForm($form);


		}


		var addCreatedElementToHTML = function (id, name){
			var html = '<div class="col-xs-6 col-sm-6 col-md-4 item-mv"> <div class="group-block" id="group-'+id+'" data-item = "{&quot;id&quot;: &quot;'+id+'&quot; ,&quot;texto&quot;: &quot;'+name+'&quot;,&quot;lineas&quot;: &quot;0&quot;, &quot;grupos&quot;: &quot;0&quot; }"> <div class="header-group flexbox clearfix"> <div class="ribbon flexbox"> <span class="icon io-Maletin col-sm-2 left-icon-ri"></span> <div class="flexbox v-align-center col-sm-10 padding-0 name-container"> <strong class="ribbon-content col-sm-10">'+name+'</strong> <input type="text" value="'+name+'" name="editar-alias" class="editar-alias only-alphanumeric meet-regex" maxlength="45"/> <button class="simple edit-name-ri col-sm-2 btn-guardar-nombre" title="Guardar Nombre"><span class="icon io-save-doc"></span></button> <button class="simple edit-name-ri col-sm-2 btn-editar-nombre" title="Editar Nombre"><span class="icon io-Admin"></span></button> </div> </div> <div class="icon-container flexbox v-align-center"> <button class="btn-gear simple" title="Configuración"> <span class="icon io-Gear"></span> </button> </div> <div class="col-sm-12 settings-ri"> <div class="col-sm-12 cont-set-ri"> <p class="col-sm-12 title-ri"> <span class="in-text-ri">Configuración</span> <button class="simple icon-text-ri" title="Cerrar"> <span class="icon io-Close"></span> </button> </p> <div class="col-sm-12 title-mod"> <span class="icon io-Maletin col-xs-2 left-icon-ri"></span> <p class="title-ribon-sri">'+name+'</p> </div> <div class="col-sm-12 submenu-ri"> <div class="first-bloq-ri no-second-block"> <button class="simple btn-editar-nombre hide-mobile" type="button"> <span class="icon io-Admin"></span> <span class="in-text-fbr">Cambiar nombre de grupo</span> </button> <button class="simple btn-add-subgrupo" type="button"> <span class="icon io-add-folder"></span> <span class="in-text-fbr">Crear nuevo subgrupo</span> </button> <button class="simple btn-agregar-lineas" type="button"> <span class="icon io-More"></span> <span class="in-text-fbr">Agregar líneas a este grupo</span> </button> <button class="simple btn-mover-grupo" type="button" > <span class="icon io-move-folder"></span> <span class="in-text-fbr">Mover grupo</span> </button> <button class="simple btn-eliminar-grupo" type="button"> <span class="icon io-Bin"></span> <span class="in-text-fbr">Eliminar grupo</span> </button> </div>  </div> </div> </div> </div> <div class="body-group"> <div class="group-total"> <div class="row desc-imv"> <div class="col-sm-6 details-desc-imv"> <p>0</p> <span>subgrupos</span> </div> <span class="line-separator">-</span> <div class="col-sm-6 details-desc-imv"> <p>0</p> <span>líneas</span> </div> </div> </div> <div class="col-xs-12 extend-imv"> <a href="../gestion-grupos/gestion-grupos-3.html" class="see-more-gt" title="Ver todo">Ver todo</a> </div> </div> </div> </div>';

			$('#main-view-block .mosaico-view').append(html);

		}

	}
	/**Fin modal agregar grupo**/

	/**Inicio modal eliminar grupo**/
	function initModalEliminarGrupo(){
		var processCompleted = false;

		modalEliminarGrupo = new modalesTelcel($('#modal-eliminar-grupo'),{
			onInit : function(){
				setModalActions();
				$('#confirmar-eliminar-grupo').hide();
				$('#eliminar-grupo-confirmacion').hide();
				$('#eliminar-grupo-ya-eliminado').hide();
			},
			onReset : function(){
				processCompleted = false;
				$('#confirmar-eliminar-grupo').hide();
			  	$('#eliminar-grupo-confirmacion').hide();
			  	$('#eliminar-grupo-ya-eliminado').hide();
			},
			onOpen : function(){
				consultarLineas();
			},
			onClose : function(){

				//Cuando cierre el modal si quieren hacer refresh hay que descomentar esto
				// if(processCompleted)
				// 	location.reload();
			}
		});

		function consultarLineas(){

			if(!formElementsModales['consultarLineas']['sending']){

				formElementsModales['consultarLineas']['sending'] = true;

				generalLoadingIcon('#modal-eliminar-grupo .in-cont-mod', true);

				var postURL = Services.apiURL.consultarLineas();

				$.post( postURL , { id: currentModalData.id })
				  .done(function( json ) {

				  	Services.gestionGrupos.consultarLineasSuccessCallback(json,currentModalData, removeElementFromHTML);

				  	formElementsModales['consultarLineas']['sending'] = false;
				  	generalLoadingIcon('#modal-eliminar-grupo .in-cont-mod', false);

				  	processCompleted = true;

				  })
				  .fail(function( jqxhr, textStatus, error ) {

				  	Services.gestionGrupos.consultarLineasFailCallback(error, form);
				  	formElementsModales['consultarLineas']['sending'] = false;
				  	generalLoadingIcon('#modal-eliminar-grupo .in-cont-mod', false);

				});

			}

			var removeElementFromHTML = function (idDeleted){
				$('#group-'+idDeleted).parent().remove();
			}
		}

		function setModalActions(){
			$('#btn-eliminar-grupo').click(function(){
				postSaveDeleteGrupo();
			});
		}

		function postSaveDeleteGrupo(){
			var form = '#modal-eliminar-grupo .in-cont-mod';

			if(!formElementsModales['eliminarGrupo']['sending']){

				formElementsModales['eliminarGrupo']['sending'] = true;

				generalLoadingIcon(form, true);

				var postURL = Services.apiURL.eliminarGrupo();

				$.post( postURL , { delete: modalCurrentData.id })
				  .done(function( json ) {
				  	Services.gestionGrupos.eliminarGrupoSuccessCallback(json, form, currentModalData );
				  	formElementsModales['eliminarGrupo']['sending'] = false;
				  	generalLoadingIcon(form, false);

				  })
				  .fail(function( jqxhr, textStatus, error ) {
				  	Services.gestionGrupos.eliminarGrupoFailCallback(error, form);
				  	formElementsModales['eliminarGrupo']['sending'] = false;
				  	generalLoadingIcon(form, false);
				});
			}
		}

	}
	/**Fin modal eliminar grupo**/

	/**Inicio modal agregar líneas**/
	function initmodalAgregarLineas(){
		var processCompleted = false;

		modalAgregarLineas = new modalesTelcel($('#modal-agregar-lineas'),{
			onInit : function(){
				setActions();
			},
			onReset : function(){
				processCompleted = false;
			},
			onOpen : function(){
				resetModal();
			},
			onClose : function(){
				//Cuando cierre el modal si quieren hacer refresh hay que descomentar esto
				// if(processCompleted)
				// 	location.reload();
			}
		});

		function setActions(){

			$('#modal-agregar-lineas #componente-ingresar-lineas .lineas-arbol').on('click', '#btn-add-lineas-arbol', function(){
				var dataArbol = ingresarLineasComponent.getDataArbol();
				if(dataArbol.length>0)
		 			postAgregarLineas(dataArbol, 'arbol');
			});

			$('#modal-agregar-lineas #componente-ingresar-lineas .lineas-autocomplete').on('click', '#btn-add-lineas-autocomplete', function(){
				var dataAutocomplete = ingresarLineasComponent.getDataAutocomplete();
				if(dataAutocomplete.length>0)
					postAgregarLineas(dataAutocomplete, 'autocomplete');
			});


			$('#modal-agregar-lineas #componente-ingresar-lineas .lineas-archivo').on('click', '#btn-add-lineas-archivo', function(e){
				e.preventDefault();
				var dataArchivo = ingresarLineasComponent.getDataArchivo();
				Services.gestionGrupos.postAgregarLineasArchivo(dataArchivo,postAgregarLineas, showInvalidErrorArchivo);
			});

		}

		//Simular error de que es invalido el archivo
		function showInvalidErrorArchivo(){
			var msg = 'Este archivo está dañado o es ilegible, intenta con un nuevo archivo.';

			$('.lineas-archivo .extra-info').hide();
			$('.lineas-archivo .add-lines-ge-mod' ).append('<div class="error-dd error">'+msg+'</div>');
			$('#archivo').parent().addClass('error');

			$('#btn-add-lineas-archivo').prop('disabled', true);
		}

		function postAgregarLineas(dataPost, type){

			if(!formElementsModales['agregarLineas']['sending']){

				var form = '#modal-agregar-lineas .in-cont-mod .form-modal-agregar-lineas';

				nextStep('#modal-agregar-lineas .step-2','#modal-agregar-lineas .step-1');

				$('#modal-agregar-lineas .loading-block-screen').show();

				formElementsModales['agregarLineas']['sending'] = true;

				$('#btn-add-lineas-arbol').prop('disabled', true);


				if(type==="archivo"){
					var postObject =
					{
				        url: Services.apiURL.agregarLineasArchivo(),
				        type: 'POST',
				        data: { lineas: dataPost, grupo : modalCurrentData.id },
				        cache: false,
				        dataType: 'json',
				        processData: false, // Don't process the files
				        contentType: false, // Set content type to false as jQuery will tell the server its a query string request
				        success : function (data, textStatus, jqXHR){ onSuccess(data);},
				        error : function(jqXHR, textStatus, errorThrown){ onError(); }
				    }

					$.ajax(postObject);
					processCompleted = true;

				}

				else{
					$.post( Services.apiURL.agregarLineas() , { lineas: dataPost, grupo : modalCurrentData.id })
					  .done(function (data, textStatus, jqXHR){ onSuccess(data);})
					  .fail(function(jqXHR, textStatus, errorThrown){onError()});
				}

			}


			function onSuccess(json, textStatus, jqXHR){
				Services.gestionGrupos.agregarLineasSuccessCallback(json, mostrarTablas,nextStep, {text : currentModalData.texto});
				formElementsModales['agregarLineas']['sending'] = false;

				processCompleted = true;
			}

			function onError(jqXHR, textStatus, errorThrown){
				Services.gestionGrupos.getAgregarLineasFailResponse(errorThrown);
				formElementsModales['agregarLineas']['sending'] = false;
			}

			function mostrarTablas(data){

				if(data.success.length>0){
					$('#modal-agregar-lineas .step-3 .total-lineas-success').html(data.success.length);

					$('#modal-agregar-lineas .step-3 .added-lines .div-nal').html('');

					$.each(data.success, function( index, value ) {
					  $('#modal-agregar-lineas .step-3 .added-lines .div-nal').append('<div class="col-xs-12 col-sm-6"><p>'+value+'</p></div>');
					});

					$('#modal-agregar-lineas .step-3 .error-success').show();
			  		$('#modal-agregar-lineas .step-3 .added-lines').show();
				}

				if(data.error.length>0){
					$('#modal-agregar-lineas .step-3 .not-added-lines .div-nal').html('');

					$('#modal-agregar-lineas .step-3 .not-added-lines .div-nal').append('<div class="col-xs-6 col-sm-6"><p>	<b>Línea</b></p></div><div class="col-xs-6 col-sm-6"><p><b>Motivo</b></p></div>');

					$.each(data.error, function( index, value ) {
					  $('#modal-agregar-lineas .step-3 .not-added-lines .div-nal').append('<div class="col-xs-6 col-sm-6"><p>'+value.numero+'</p></div><div class="col-xs-6 col-sm-6"><p>'+value.motivo+'</p></div>');
					});

					$('#modal-agregar-lineas .step-3 .total-lineas-error').html(data.error.length);

			  		$('#modal-agregar-lineas .step-3 .error-msg').show();
			  		$('#modal-agregar-lineas .step-3 .not-added-lines').show();
			  	}

			}
		}

		function resetModal(){
			ingresarLineasComponent.reset();

			$('#modal-agregar-lineas .loading-block-screen').hide();
			$('#modal-agregar-lineas .step-1').show();
			$('#modal-agregar-lineas .step-2, #modal-agregar-lineas .step-3').hide();
			$('#modal-agregar-lineas .error-msg').hide();
			$('#modal-agregar-lineas .step-3 .error-success').hide();
			$('#modal-agregar-lineas .step-3 .info-added-lines').hide();
		}


		function nextStep(show, hide){
			$(hide).hide();
			$(show).show();
		}

	}
	/**Fin modal agregar líneas**/

	/**Inicio modal mover grupo**/
	function initmodalMoverGrupo(){
		// VARIABLE ARBOL HARDCODEADO

		var selectedGroup = { id: null , nombre: null, actual : null };

		modalMoverGrupo = new modalesTelcel($('#modal-mover-grupo'),{
			onInit : function(){
				setActions();
			},
			onReset : function(){
				resetSearchTree();
				resetTree();
				currentModalData = null;
				$('#modal-mover-grupo .single-msg').hide();
				$('#modal-mover-grupo .multiple-lines').hide();
				$('#modal-mover-grupo .multiple-lines .error-msg').hide();
			  	$('#modal-mover-grupo .multiple-lines .error-success').hide();
			  	$('#modal-mover-grupo .multiple-lines .info-added-lines').hide();
			},
			onOpen : function(){
				$('#modal-mover-grupo .grupo-txt-old').html(modalCurrentData.name);
				initTree();
				$('#modal-mover-grupo .multiple-lines .error-msg').hide();
			  	$('#modal-mover-grupo .multiple-lines .error-success').hide();
			  	$('#modal-mover-grupo .multiple-lines .info-added-lines').hide();
				resetFormModal($('#form-mover-grupo'), 'moverGrupo');
			}
		});

		function mobileNode(nodeId){
			if(nodeId!='#'){
				$('#tree-grupo').removeClass('current-root');
				$('#tree-grupo .jstree-node').removeClass('active-node');
				$('#tree-grupo #'+nodeId).addClass('active-node');
			}
			else{
				$('#tree-grupo .jstree-node').removeClass('active-node');
				$('#tree-grupo').addClass('current-root');
			}
		}


		function initTree(){

			$('#tree-grupo')
			.on("changed.jstree", function (e, data) {
				if(data.selected.length) {
					selectedGroup.id = data.selected[0];
					selectedGroup.nombre = data.instance.get_node(data.selected[0]).text;
					$('#btn-mover-grupo').prop('disabled', false);
				}
			})
			.bind("open_node.jstree", function (event, data) {
			  mobileNode(data.node.id);

			  if(is_mobile()){
			  	selectedGroup.id = data.node.id;
				selectedGroup.nombre = data.node.text;
				$('#btn-mover-grupo').prop('disabled', false);
			  }

			})
			.bind("close_node.jstree", function (event, data) {
			  mobileNode(data.node.parent);
			})
			.jstree({
				'core' : {
					'check_callback' : true,
					'data' : {
						"dataType" : "json",
						"url" : function (node) {
					      return node.id === '#' ?
					        Services.apiURL.arbolGruposRoot() :
					        Services.apiURL.arbolGruposChildren() ;
					    },
						"data" : function (node) {

							return { "id" : node.id };
						}
					},
					"multiple" : false
				}
			});

			$('#tree-grupo').addClass('current-root');

			// ARBOL DEL BUSCADOR
			$('#tree-grupo-search').hide();

			$('#tree-grupo-search')
			.on("changed.jstree", function (e, data) {
				if(data.selected.length) {

					selectedGroup.id = data.instance.get_node(data.selected[0]).id;
					selectedGroup.nombre = data.instance.get_node(data.selected[0]).text;

					var instance = $('#tree-grupo').jstree(true);
					instance.deselect_all();
					instance.select_node(selectedGroup.id);

					$('#btn-mover-grupo').prop('disabled', false);
				}
			})
			.bind("refresh.jstree", function (event, data) {
				var search = $('#modal-mover-grupo .search-input').val();

		        $('#tree-grupo-search').jstree("open_all");
		        $('#tree-grupo-search').jstree('search', search);

		        $('#tree-grupo-search .jstree-search').each(function( index ) {
		        	var texto = $( this ).text();
		        	var textoT = texto.replace(search, '<span class="exact-search">'+search+'</span>');
		        	var $innerHTML = $( this ).find('.jstree-icon');
		        	var $html = $(this);
		        	$html.html('');

		        	$innerHTML.each(function( index ) {
					  $html.append($(this));
					});

					$html.append(textoT);
				});
		    })
			.jstree({
				'core' : {
					'expand_selected_onload': true,
					'dblclick_toggle' : false,
					'data' : {
						"dataType" : "json",
						"url" : function (node) {
					      return false;
					    },
						"data" : function (node) {

							return { "id" : node.id };
						}
					},
					"multiple" : false
				},
				'plugins' : ["noclose", "search"],
				'search': {
					"case_insensitive": true,
            		"show_only_matches" : true
				}
			});

			// FIN ARBOL BUSCADOR
		}



		function setActions(){
			$('#btn-mover-grupo').prop('disabled', true);

			//EJECUTAR MOVER GRUPO
			$('#modal-mover-grupo').on('click', '#btn-mover-grupo', function(){

				if(selectedGroup.id!=0){
					postMoverGrupo('#modal-mover-grupo #form-mover-grupo');
				}
			});

			//EJECUTAR BUSQUEDA
			$("#modal-mover-grupo .btn-search").click(function() {

		        var searchString = $('#modal-mover-grupo .search-input').val();

		        if(searchString!=''){
		       		searchTree(searchString);
		        }

		    });

			//CAMBIAR ESTADO DEL BOTÓN Y DEL ARBOL DEPENDIENDO DEL SEARCH INGRESADO
		    $("#modal-mover-grupo .search-input").keyup(function() {

		        var searchString = $('#modal-mover-grupo .search-input').val();
		        var $input = $(this);
		        var min = (typeof $input.data('min') != 'undefined' ? $input.data('min') : 1);
		        if(searchString.length>=min){
		        	$('#modal-mover-grupo .btn-search').prop('disabled', false);
		        }
		       	else{
		       		$('#modal-mover-grupo .btn-search').prop('disabled', true);
		       		//resetSearchTree();
		       	}

		    });

		    //BORRAR BUSQUEDA
		    $("#modal-mover-grupo").on('click', '.btn-remover-busqueda',function() {
		       	resetSearchTree();
		    });

		}

		function resetSearchTree(){
			$('#modal-mover-grupo .search-input').val('');
		    $('#modal-mover-grupo .btn-remover-busqueda').removeClass('active');
		    $('#modal-mover-grupo .btn-search').prop('disabled', true);
		    $('#tree-grupo-search').hide();
		    $('#tree-grupo').show();
		}

		function resetTree(){

			$('#tree-grupo').jstree("deselect_all");
			$('#tree-grupo-search').jstree("deselect_all");

			$('#tree-grupo').jstree("destroy").empty();
			$('#tree-grupo-search').jstree("destroy").empty();

			selectedGroup = { id: null , nombre: null, actual : null };
			$('#btn-mover-grupo').prop('disabled', true);
		}

		function mostrarTablas(data){

				if(data.success.length>0){
					$('#modal-mover-grupo .multiple-lines .total-lineas-success').html(data.success.length);

					$('#modal-mover-grupo .multiple-lines .added-lines .div-nal').html('');

					$.each(data.success, function( index, value ) {
					  $('#modal-mover-grupo .multiple-lines .added-lines .div-nal').append('<div class="col-xs-12 col-sm-6"><p>'+value+'</p></div>');
					});

					$('#modal-mover-grupo .multiple-lines .error-success').show();
			  		$('#modal-mover-grupo .multiple-lines .added-lines').show();
				}

				if(data.error.length>0){
					$('#modal-mover-grupo .multiple-lines .not-added-lines .div-nal').html('');

					$('#modal-mover-grupo .multiple-lines .not-added-lines .div-nal').append('<div class="col-xs-6 col-sm-6"><p>	<b>Línea</b></p></div><div class="col-xs-6 col-sm-6"><p><b>Motivo</b></p></div>');

					$.each(data.error, function( index, value ) {
					  $('#modal-mover-grupo .multiple-lines .not-added-lines .div-nal').append('<div class="col-xs-6 col-sm-6"><p>'+value.numero+'</p></div><div class="col-xs-6 col-sm-6"><p>'+value.motivo+'</p></div>');
					});

					$('#modal-mover-grupo .multiple-lines .total-lineas-error').html(data.error.length);

			  		$('#modal-mover-grupo .multiple-lines .error-msg').show();
			  		$('#modal-mover-grupo .multiple-lines .not-added-lines').show();

			  	}

			}


		function postMoverGrupo(form){

			if(!formElementsModales['moverGrupo']['sending']){

				formElementsModales['moverGrupo']['sending'] = true;

				$('#btn-mover-grupo').prop('disabled', true);

				generalLoadingIcon(form, true);

				var oldMove = '';

				if( typeof currentModalData != 'undefined' && currentModalData != null){
					_mpoAccionMasiva.data = currentModalData.id;
					_mpoAccionMasiva.is_line = (typeof currentModalData.is_line != 'undefined' && currentModalData.is_line ? true : false );
					oldMove = currentModalData.texto;
				}
				else{
					_mpoAccionMasiva.is_line = true;
					oldMove = _mpoAccionMasiva.data.toString();
				}



				var postURL = Services.apiURL.moverGrupo();

				$.post( postURL , { id: selectedGroup.id, related : _mpoAccionMasiva })
				  .done(function( json ) {

				  	Services.gestionGrupos.moverGrupoSuccessCallback(json, form, appendErrorGeneral, mostrarTablas, { moverLineas : _mpoAccionMasiva.is_line && Object.prototype.toString.call(_mpoAccionMasiva.data) === "[object Array]", oldMove : oldMove, grupo : selectedGroup.nombre });
				  	formElementsModales['moverGrupo']['sending'] = false;
				  	generalLoadingIcon(form, false);

				  })
				  .fail(function( jqxhr, textStatus, error ) {
				  	Services.gestionGrupos.moverGrupoFailCallback(error, form);
				  	formElementsModales['moverGrupo']['sending'] = false;
				  	generalLoadingIcon(form, false);
				});

			}
		}

		function searchTree(search){
			//

			if(!formElementsModales['buscarArbolGrupo']['sending']){

				var form = '#modal-mover-grupo .tree-groups-asoc';

				formElementsModales['buscarArbolGrupo']['sending'] = true;

				$('#btn-mover-grupo').prop('disabled', true);

				generalLoadingIcon(form, true);

				var urlPOST = Services.apiURL.arbolGruposBusqueda();

				$.post( urlPOST , { search: search })
				  .done(function( json ) {

				  	Services.gestionGrupos.busquedaArbolGruposSuccessCallback(json);

				  	formElementsModales['buscarArbolGrupo']['sending'] = false;
				  	generalLoadingIcon(form, false);

				  })
				  .fail(function( jqxhr, textStatus, error ) {
				  	Services.gestionGrupos.busquedaArbolGruposFailCallback(error);
				  	formElementsModales['buscarArbolGrupo']['sending'] = false;
				  	generalLoadingIcon(form, false);
				});

			}
		}
	}
	/**Fin modal mover grupo**/


	function resetFormModal($form, form){
		$form.find('.general-error-tooltip').remove();
		$form.find("input[type=text], input[type=email], input[type=password], select").val("");
		$form.find("input[type=text], input[type=email], input[type=password], select").removeClass("error").removeClass("error-dd");
		$form.find('button[type="submit"]').prop('disabled', true);
		$form.removeClass('success').removeClass('error').show();

		if(formElementsModales[form]['validator']){
			formElementsModales[form]['validator'].resetForm();
		}
	}


	//Variable que guarda la Data de la Cuenta/Grupo/Alias/Línea a Editar
	var modalCurrentData = {};

	// FIN MODALES


	function setActionsGenerales(){

		// MOSTRAR OPCIONES DE CONFIGURACIÓN

		$('body').on('click', '.mosaico-view .item-mv', function(e){
			if(is_mobile()){
				e.stopPropagation();
				var $element = $(this).find('.see-more-gt');
				var url = $element.prop('href');

				window.location.href = url;
			}
		});

		$('.group-list-block').on('click', '.btn-gear', function(e){
			e.stopPropagation();
			cancelEditName();
			var $element = $(this).closest('.group-block');
			$('.group-block').removeClass('active');
			$('.general-group-options-container').removeClass('active');
			$('body').addClass('settings-open');
			$element.addClass('active');

			if(is_mobile())
				$('body').addClass('fixed-body');

		});

		// ESCONDER OPCIONES DE CONFIGURACIÓN
		$('.group-list-block').on('click', '.icon-text-ri', function(e){
			e.stopPropagation();
			var $element = $(this).closest('.group-block');
			$element.removeClass('active');
		});

		// ESCONDER OPCIONES DE CONFIGURACIÓN GENERAL
		$('.general-group-options-container').on('click', '.icon-text-ri', function(e){
			e.stopPropagation();
			var $element = $('.general-group-options-container');
			$element.removeClass('active');
		});

		$('.general-group-options-container').on('click', '.btn-open-general-config', function(e){
			cancelEditName();
			e.stopPropagation();
			var $element = $('.general-group-options-container');
			$('.group-block').removeClass('active');
			$('.row-ls').removeClass('active-settings');

			$('body').addClass('settings-open');
			$element.addClass('active');

			if(is_mobile())
				$('body').addClass('fixed-body');

		});

		$('body').on('click', '.settings-ri', function(e){
			if(is_mobile()){
				e.stopPropagation();
				$('.general-group-options-container').removeClass('active');
				$('.group-block').removeClass('active');
				$('.row-ls').removeClass('active-settings');
				$('.settings-ri').removeClass('active');
				$('body').removeClass('fixed-body');
				$('body').removeClass('settings-open');
			}
		});

		// FUNCIONAMIENTOS LISTADO DE RESULTADOS
		$('.lista-results .settings-ico-ls, .group-list-settings .settings-ico-ls').on('click', 'button', function(e){
			e.stopPropagation();
			var $element = $(this).closest('.row-ls');
			$('.general-group-options-container').removeClass('active');
			$('.row-ls, .group-list-settings .settings-ico-ls').removeClass('active-settings');

			$('body').addClass('settings-open');
			$element.addClass('active-settings');

		});

		$('.lista-results, .group-list-settings').on('click', '.icon-text-ri', function(){
			var $element = $(this).closest('.row-ls');
			$element.removeClass('active-settings');
		});

		$('.lista-results .arrow-ico-ls, .group-list-settings .arrow-ico-ls').on('click', 'button', function(){
			var $element = $(this).closest('.row-ls');

			if($element.hasClass('active-ls')){
				$element.removeClass('active-ls');
				$(this).find('span').removeClass('i-angle-up');
			}
			else{
				$('.lista-results .row-ls, .group-list-settings .row-ls').removeClass('active-ls');
					$('.lista-results .arrow-ico-ls span, .group-list-settings .arrow-ico-ls span').removeClass('i-angle-up');
				$element.addClass('active-ls');
				$(this).find('span').addClass('i-angle-up');
			}


		});

		$('.manage-particular-options').on('click', '.btn-show-mpo', function(){
			var $element = $(this).closest('.manage-particular-options');
			$element.toggleClass('active');
			$(this).find('.icon').toggleClass('i-angle-up');
		});


		//FIN FUNCIONAMIENTOS LISTADO DE RESULTADOS

		// CAMBIAR A VISTA MOSAICO
		$('body').on('click', '#vista-mosaico', function(){
			cancelEditName();
			currentView = 'mosaico';
			$('#vista-mosaico').removeClass('active');
			$('#vista-lista').addClass('active');
			$('#main-view-block').removeClass('group-row-block').addClass('group-list-block');
			// paginacion.updateItemsPerPage(0);
			// paginacion.reset();
		});

		// CAMBIAR A VISTA LISTA
		$('body').on('click', '#vista-lista', function(){
			cancelEditName();
			currentView = 'lista';
			$('#vista-lista').removeClass('active');
			$('#vista-mosaico').addClass('active');
			$('#main-view-block').removeClass('group-list-block').addClass('group-row-block');
			// paginacion.updateItemsPerPage(10);
			// paginacion.reset();
		});

		// ABRIR MODAL AGREGAR GRUPO
		$('body').on('click', '.btn-add-grupo', function(){
			cancelEditName();
			setBasicInfoModal($(this).data('item'));
			$('#modal-agregar-grupo .grupo-type').html('grupo');
			modalAgregarGrupo.openModal();
		});

		// ABRIR MODAL AGREGAR GRUPO
		$('body').on('click', '.btn-add-subgrupo', function(){
			cancelEditName();
			var $element = ($(this).closest('.group-block').length>0 ? $(this).closest('.group-block') : ($(this).closest('.row-ls').length>0 ? $(this).closest('.row-ls') : $(this).closest('.general-group-options-container')));
			setBasicInfoModal($element.data('item'));

			if($element.hasClass('general-group-options-container'))
				$('#modal-agregar-grupo .grupo-type').html('grupo');
			else
				$('#modal-agregar-grupo .grupo-type').html('subgrupo');

			modalAgregarGrupo.openModal();
		});

	}

	function setBasicInfoModal(item){
		currentModalData = item;
		$('.modal-mte .alias-text, .modal-mte .txt-grupo').html(item.texto);
	}

	function setBasicInfoParent(item){
		var itemData = item;
		$('.parent-text').html(itemData.texto);
	}

	function getElementId($element, selector){
		var id = $element.data('eid');
		var el = document.querySelector(selector);
		el.setAttribute('data-modaleid', id);
		return id;
	}


	function setActionsConfiguracion(){

		var $elmodal = $('#modal-configurar-administrador');

		$('.settings-ri .submenu-ri').on('click', 'button', function(){
			$('.group-block').removeClass('active');
		});


		// ABRIR EL CONFIGURAR ADMINISTRADOR
		$('body').on('click', '.btn-configurar-administradores', function(){
			var $element = ($(this).closest('.group-block').length>0 ? $(this).closest('.group-block') : ($(this).closest('.row-ls').length>0 ? $(this).closest('.row-ls') : $(this).closest('.general-group-options-container')));
			setBasicInfoModal($element.data('item'));
			modalAdministradores.openModal();
		});

		// ABRIR EL CUENTAS ASOCIADAS
		$('body').on('click', '.btn-cuentas-asociadas', function(){

			var $element = ($(this).closest('.group-block').length>0 ? $(this).closest('.group-block') : ($(this).closest('.row-ls').length>0 ? $(this).closest('.row-ls') : $(this).closest('.general-group-options-container')));
			setBasicInfoModal($element.data('item'));
			modalCuentasAsociadas.openModal();

		});

		// ABRIR ELIMINAR ALIAS
		$('body').on('click', '.btn-eliminar-alias', function(){
			var $element = ($(this).closest('.group-block').length>0 ? $(this).closest('.group-block') : ($(this).closest('.row-ls').length>0 ? $(this).closest('.row-ls') : $(this).closest('.general-group-options-container')));
			setBasicInfoModal($element.data('item'));
			modalEliminarAlias.openModal();
		});

		$('body').on('click', '.btn-general-solicitud-descarga', function(){
			var $element = ($(this).closest('.group-block').length>0 ? $(this).closest('.group-block') : ($(this).closest('.row-ls').length>0 ? $(this).closest('.row-ls') : $(this).closest('.general-group-options-container')));
			setBasicInfoModal($element.data('item'));
			modalDescargarFacturas.openModal();
		});


		// ABRIR EL ELIMINAR GRUPO
		$('body').on('click', '.btn-eliminar-grupo', function(){
			var $element = ($(this).closest('.group-block').length>0 ? $(this).closest('.group-block') : ($(this).closest('.row-ls').length>0 ? $(this).closest('.row-ls') : $(this).closest('.general-group-options-container')));
			setBasicInfoModal($element.data('item'));

			var parentData = $element.data('parent');

			if(typeof parentData =='undefined'){
				$parent = $('#group-data-info');
				parentData = $element.data('item');
			}

			setBasicInfoParent(parentData);
			modalEliminarGrupo.openModal();
		});

		// ABRIR AGREGAR LINEAS
		$('body').on('click', '.btn-agregar-lineas', function(){
			var $element = ($(this).closest('.group-block').length>0 ? $(this).closest('.group-block') : ($(this).closest('.row-ls').length>0 ? $(this).closest('.row-ls') : $(this).closest('.general-group-options-container')));
			setBasicInfoModal($element.data('item'));
			modalAgregarLineas.openModal();
		});


		//CAMBIAR NOMBRE
		$('body').on('click', '.btn-cambiar-nombre', function(){
			var $element = ($(this).closest('.group-block').length>0 ? $(this).closest('.group-block') : ($(this).closest('.row-ls').length>0 ? $(this).closest('.row-ls') : $(this).closest('.general-group-options-container')));
			setBasicInfoModal($element.data('item'));
			modalMoverGrupo.openModal();
		});

		// ABRIR AGREGAR LINEAS
		$('body').on('click', '.btn-mover-grupo', function(){
			var $element = ($(this).closest('.group-block').length>0 ? $(this).closest('.group-block') : ($(this).closest('.row-ls').length>0 ? $(this).closest('.row-ls') : $(this).closest('.general-group-options-container')));
			setBasicInfoModal($element.data('item'));
			$('#modal-mover-grupo .sublevel-tm').show();
			modalMoverGrupo.openModal();
		});

		$('body').on('click', '.btn-single-action', function(){
			var $button = $(this),
			postURL = (typeof $button.data('post') != 'undefined' ? $button.data('post') : null);

			if(postURL != null)
			//Aquí mandar el valor de la línea a modificar
				window.location.href = postURL;

		});

		$elmodal.on('click', '.m-btn-close-modal', function(){
			modalAdministradores.closeModal();
		});

		// Mostrar modal de agregar usuario
		$elmodal.on('click', '#btn-show-modal-usuario', function(){
			modalAgregarAdmin.openModal();
		});
	}

	var editandoNombre = false,
	$closestGuardarElement = null,
	$closestEditarBtn = null,
	editandoNombreValor = null,
	beforeEditando = null;

	function checkActiveElementEditName($element){
		return (
			$element.hasClass('name-container') && $element.hasClass('name-container')
			|| $($element).parents('.ribbon').length
			|| ($element.hasClass('error-tooltip')
				|| $element.parent().hasClass('error-tooltip'))
		);
	}

	function cancelEditName(){
		editandoNombre = false;
		var $elementos_activos = $('.group-block .name-container.active-edit');
		returnEditaNamePreviousValue($elementos_activos);

		$('.group-block').find('.name-container').removeClass('active-edit');
	}

	function returnEditaNamePreviousValue($elementos_activos){
		if($elementos_activos.length>0){
			//alert('Editando');

			for (var i = 0; i < $elementos_activos.length; i++) {
				var nombre_anterior = $($elementos_activos[i]).find('strong.ribbon-content').html();
				$($elementos_activos[i]).find('.editar-alias').val(nombre_anterior)
					//Remover errores - revisar la mejor forma de hacerlo con el Valid de jquery
					.removeClass('error');
				$($elementos_activos[i]).parent().parent().parent().find('.triangle-tooltip').hide();
			}

		}
	}

	function checkElementToEdit(){
		editandoNombre = false;
		if($closestEditarBtn!=null){
			$closestEditarBtn.find('.name-container').addClass('active-edit');
			editandoNombre = true;
			editandoNombreValor = $closestEditarBtn.find('input.editar-alias').val();
			$closestGuardarElement = $closestEditarBtn.closest('.group-block').find('.btn-guardar-nombre');
			$closestEditarBtn = null;
		}
	}

	function setActionsEditName(){
		// EDITAR NOMBRE EN MOSAICO
		$('.group-list-block').on('click', '.btn-editar-nombre', function(e){
			e.stopPropagation();
			var $element = $(this).closest('.group-block');

			if(!editandoNombre){
				$element.find('.name-container').addClass('active-edit');
				editandoNombre = true;
				$closestGuardarElement = $element.closest('.group-block').find('.btn-guardar-nombre');
				$closestEditarBtn = null;
				editandoNombreValor = $element.find('input.editar-alias').val();
				beforeEditando = $element.find('input.editar-alias').val();
			}
			else{
				$closestGuardarElement.prop('disabled', false);
				$closestGuardarElement.trigger('click');
				$closestEditarBtn = $element;
			}
		});

		// GUARDAR NOMBRE EN MOSAICO
		$('.group-list-block').on('click', '.btn-guardar-nombre', function(e){
			e.stopPropagation();
			var $element = $(this).closest('.group-block');
			verifyName($element);
		});

		$('.group-list-block').on('keydown','.editar-alias', function (e) {
			var $input = $(this);

			var $errori = $('.error-tooltip.nombre-error');

			if($errori.length>0){
				$input.removeClass('error').removeClass('error-dd');
				$errori.remove();
			}

		    if (e.keyCode === 13) { //Si es enter
		        var $element = $(this).closest('.group-block');
		        $closestGuardarElement = null;
				verifyName($element);
		    }
		});

		$('.group-list-block .editar-alias').bind('keyup', function (e) {
			var $input = $(this);
			validateNameOnInput($input);
		});


	}

	function initDetalleLinea(){

		//checkRequiredElements('.editar-nombre-form');
		setActions();

		function validNameLinea(value){
			return (/^[A-Za-zá-úÁ-Ú0-9\-.'ñ \s]+$/i.test( value ));
		}

		function validateNameLineaOnInput($input){
			var value = $input.val();
			var $element = $input.closest('.editar-nombre-form');
			var $button = $element.find('.btn-guardar-nombre');

			if(validNameLinea(value)){
				$element.find('.triangle-tooltip').remove();
				$input.removeClass('error');
				$button.prop('disabled', false);
			}
			else{
				$button.prop('disabled', true);
				appendError($element, $input, 'Es necesario ingresar el nombre.');
			}

		}

		function appendError($e, $i, message){
			if($e.find('.triangle-tooltip').length == 0){
				var errorhtml = '<div class="triangle-tooltip error-tooltip triangle-bottom nombre-error"><p>'+message+'</p></div>';
				$e.append(errorhtml);
				$i.addClass('error');
			}
		}

		function verifyNameLinea($element){
			var $input = $('.editar-nombre-form #editar-nombre');
			var value = $input.val();
			var id = $element.data('item').id;
			var form = '.edit-line-info .editar-nombre-form';

			if(validNameLinea(value)){

				$element.find('.triangle-tooltip').remove();
				$input.removeClass('error');

				var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

				$.post( urlPOST , { edit: value, id: id })
				  .done(function( json ) {
				  	Services.gestionGrupos.editarNombreLineaSuccessCallback(json, value, appendError, {input : $input, element : $element });
				  })
				  .fail(function( jqxhr, textStatus, error ) {
				  	Services.gestionGrupos.editarNombreLineaFailCallback(error);
				});
			}
		}

		function setActions(){

			$( ".editar-nombre-form" ).submit(function(e) {
			 	e.preventDefault();
			 	var $element = $(this);
			 	verifyNameLinea($element);

			});

			// EDITAR NOMBRE EN MOSAICO
			$('.block-eli-admin').on('click', '.btn-editar-nombre', function(){
				var $element = $('.editar-nombre-form');
				$element.addClass('active-edit');
			});

			$('.block-eli-admin').on('click', '.toggle-config', function(e){
				e.stopPropagation();
				var $button = $(this);
				var $element = $button.next('.settings-ri');
				$element = ($element.length>0 ? $element : $button.closest('.settings-ri'));
				$element.toggleClass('active');
				$('body').addClass('settings-open');
				// if($element.hasClass('active'))
				// 	$element.removeClass('active')
				// else
				// 	$element.addClass('active');

			});

			$('.block-eli-admin .editar-nombre').bind('input keyup', function (e) {
				var $input = $(this);
				validateNameLineaOnInput($input);
			});

		}

		function updateNombre(){

			var value = $('.editar-nombre-form #editar-nombre').val();
			var id = $('.editar-nombre-form').data('id');

			var data = { success : true, data : [] };

			$.post( postURL , { edit: value, id: id })
			  .done(function( json ) {

			    //SETEO SUCCESS TRUE HARDCODEADO
			  	//aqui iría el data que regrese el json
			  	data.success = true;

			  	if(data.success){
			  		$('.name-toedit-eli').html(value);
			  		$('.editar-nombre-form').removeClass('active-edit');
			  		// Guardar el nombre
			  	}
			  	else{
			  		//JSON SUCCESS FALSE
			  	}

			  })
			  .fail(function( jqxhr, textStatus, error ) {
			  	//Mensaje de error del SISTEMA
			});
		}
	}

	if($('.edit-line-info').length>0){
		initDetalleLinea();
	}


	function setActions(){
		setActionsGenerales();
		setActionsEditName();
		setActionsFilter();
		setActionsSearch();
		setActionsConfiguracion();

		if($('#detalle-grupo-block').length>0){
			generalCheckBoxAll.inicializar();
			setActionsCheckbox();
		}
	}

	function setActionsCheckbox(){

		$('.manage-particular-options .childs-mpo .btn-mover-grupo-mpo').click(function(e){
			modalCurrentData = {};
			e.stopPropagation();
			_mpoAccionMasiva = generalCheckBoxAll.getCheckedElements();
			$('#modal-mover-grupo .sublevel-tm').hide();
			modalMoverGrupo.openModal();
		});


		$('.manage-particular-options .childs-mpo .btn-mpo-masivo').click(function(e){

			var $button = $(this),
			postDataTo = (typeof $button.data('post') != 'undefined' ? $button.data('post') : null);

			if(postDataTo != null){
				modalCurrentData = {};
				e.stopPropagation();
				 _mpoAccionMasiva = generalCheckBoxAll.getCheckedElements();

				Services.gestionGrupos.enviarDatosAutogestionMasivosPost(_mpoAccionMasiva, postDataTo);
			}

		});
	}

	function setActionsFilter(){

		$('#orderby').change(function(){
			var opciones = $(this).find(":selected").data('value');
			orderItems(opciones);
		});

		$('#orderby-query').change(function(){
			var opciones = $(this).find(":selected").data('value');
			orderItemsQuery(opciones);
		});

		$('.order-by-query-btn button').click(function(){
			var opciones = $(this).data('opc');
			orderItemsQuery(opciones);
		});

		$('#orderby-gestiongrupos').click(function(){
			cancelEditName();
		});

		$('#orderby-gestiongrupos').change(function(){
			var opciones = $(this).find(":selected").data('value');
			var $main = $(".mosaico-view");
			var $children = $main.children(".item-mv");
			orderItemsE(opciones, $main, $children, '.group-block');
		});

		$('#orderby-gestiongrupos-a').change(function(){
			var opciones = $(this).find(":selected").data('value');
			var $main = $(".lista-results .content-ls");
			var $children = $main.children(".row-ls");
			orderItemsE(opciones, $main, $children);
		});

	}

	function orderItemsE(opc, $main, $children, element){
		$children.detach().sort(function(a, b) {

			if(typeof element!= 'undefined'){
			   var aData = $(a).find(element).data('item');
			   var bData = $(b).find(element).data('item');
			}
			else{
				var aData = $(a).data('item');
				var bData = $(b).data('item');
			}

		   if(opc.key != 'texto' && opc.key != 'responsable' && opc.key != 'asignado' && opc.key != 'titular')
		  		return Number(aData[opc.key]) > Number(bData[opc.key]) ? 1 : -1;
		  	else
		  		return aData[opc.key] > bData[opc.key] ? 1 : -1;

		});

		if(opc.orderby == 'desc')
			$main.append($children.get().reverse());
		else
			$main.append($children);

		// opc.key
		// opc.orderby
	}

	function orderItemsModal(opc, elementos){
		var dataOrdered = elementos;

		dataOrdered = sortByAZ(dataOrdered, opc.key);

		if(opc.orderby == 'desc')
			dataOrdered.reverse();

		return dataOrdered;
	}

	function validName(value){
		var validation = {
			empty : { test : value.length>0 , message: 'Es necesario ingresar un nombre para el grupo.' },
			name : 	{ test : /^[A-Za-zÑñ]*[A-Za-zNñ-\s]*[A-Za-zNñ]$/i.test( value ), message: 'El nombre no debe tener caracteres especiales, números y espacio al inicio o final.' },
			minlength :{ test : value.length>=5 , message: 'El nombre debe tener al menos 5 caracteres.' }
		};

		return validation.name.test && validation.minlength.test && validation.empty.test;
	}

	function validNameMsg(value){
		var validation = {
			empty : { test : value.length>0 , message: 'Es necesario ingresar un nombre para el grupo.' },
			name : 	{ test : /^[A-Za-zÑñ]*[A-Za-zNñ-\s]*[A-Za-zNñ]$/i.test( value ), message: 'El nombre no debe tener caracteres especiales, números y espacio al inicio o final.' },
			minlength :{ test : value.length>=5 , message: 'El nombre debe tener al menos 5 caracteres.' }
		};

		return ( !validation.empty.test ? validation.empty.message : ( !validation.name.test ? validation.name.message : validation.minlength.message) );
	}

	function validateNameOnInput($input){
		var value = $input.val();
		var $element = $input.closest('.group-block');
		var $button = $input.next('.btn-guardar-nombre');

		if(validName(value)){
			$element.find('.triangle-tooltip').remove();
			$input.removeClass('error');
			$button.prop('disabled', false);
		}
		else{
			$button.prop('disabled', true);
			appendError($element, $input, validNameMsg(value));
			console.log(validNameMsg(value));
		}
	}

	function appendError($e, $i, message){
		if($e.find('.triangle-tooltip').length == 0){
			var errorhtml = '<div class="triangle-tooltip error-tooltip triangle-bottom nombre-error"><p>'+message+'</p></div>';
			$e.append(errorhtml);
			$i.addClass('error');
		}
	}

	function verifyName($element){
		var $input = $element.find('.editar-alias');
		var value = $input.val();
		var id = $element.data('item').id;

		if(validName(value)){

			$element.find('.triangle-tooltip').remove();
			$input.removeClass('error');

			var urlPOST = Services.apiURL.editarNombreGrupo();

			$.post( urlPOST , { edit: value, id: id })
			  .done(function( json ) {
			  	Services.gestionGrupos.editarNombreGrupoSuccessCallback( json, value, appendError, {input : $input, element : $element });
			  	//Checar si hay algún elemento que se quiere editar
			  	$input.blur();
				$input.focusout();
			  	checkElementToEdit();
			  	updateBlock($element);
			  })
			  .fail(function( jqxhr, textStatus, error ) {
			  	Services.gestionGrupos.editarNombreGrupoFailCallback( error );
			});
		}
		else if(editandoNombre && editandoNombreValor!=null){
			$input.val(editandoNombreValor);
			$closestGuardarElement.trigger('click');
			editandoNombreValor = null;
		}
	}

	function updateBlock($element){

		var $input = $element.find('.editar-alias'),
		nameChanged = beforeEditando!=$input.val();
		beforeEditando = editandoNombreValor;


		if($element.hasClass('with-legal-name-mv') && nameChanged){
			var $textos = $element.find('.legal-name-imv'),
			$icon = $element.find('.ribbon .io-City');

			$element.addClass('changed-block');
			$textos.fadeOut(500);
			$icon.animate({opacity: 0}, 300, function(){
				$icon.removeClass('io-City').addClass('io-Maletin');
				$element.removeClass('with-legal-name-mv');
				$icon.animate({opacity: 1}, 300);
				$textos.remove();
			});

			setTimeout(function(){
				$element.removeClass('changed-block');
			}, 1100);
		}

	}

	var validNotEmpty = [];
	var searchby = [];
	var currentSearch = [];

	function setActionsSearch(){

		function addActionSearch($parent, i){

			$parent.find('button[type="submit"]').click(function(){
				var search = $parent.find('.search-input-block .search-input-'+searchby[i].key).val();
				var query = '?search-by='+searchby[i].key+'&search='+search;
				window.location.href = (location.hostname!='localhost' ? '/cliente/2016/mi-telcel-empresas' : '' )+'/sections/gestion-grupos/'+searchby[i].view+query;
			});
		}

		function getUrlNoQuery(){

			var url = window.location.href.split('?')[0];
			return url;
		}

		$('.search-by-container').each(function (index) {
			var $container = $(this);
			$container.data('searchi', index);
			validNotEmpty[index] = true;
			searchby[index] = null;
			currentSearch[index] = '';


			//resetSearchInput($container, index);

			$container.find('.search-input-block input').each(function (i) {
			  	var $element = $(this);
			  	validateNotEmptySearch($element, index, $container);
			});

			// if($container.hasClass('gestion-cuentas-search')){
			// 	addActionSearch($container, index);
			// }

			$container.find('.searchby').change(function(){


				searchby[index] = $(this).find(":selected").data('value');
				resetSearchInput($container, index);
				setPostUrl( $container, index);

				if(typeof searchby[index] !='undefined')
					$container.find('.search-input-block .search-input-'+searchby[index].key).show();

			}).click(function(){
				cancelEditName();
			});

			$container.find('input').click(function(){
				cancelEditName();
			});


			initCheckInputRegex();

			var $firstSelected = $container.find(":selected");

			if($firstSelected.val()==''){
				//resetSearchInput($container, index);
				//Seleccionar la primera
				$container.find('option:nth-child(2)').prop("selected", true);
				$firstSelected = $container.find(":selected");
				//Fix safari
				if($firstSelected.length>1)
					$firstSelected = $container.find(":selected:nth-child(2)");
				//Fin fix safari

			}

			searchby[index] = $firstSelected.data('value');


			$container.find('.search-input-block .search-input-'+searchby[index].key).show();

			//Seleccionar primera opcion
		});

	}

	function resetSearchInput($parent, i){
		validNotEmpty[i] = true;
		$parent.find('.search-input-block input[type="text"], .search-input-block input[type="number"]').val('');
		$parent.find('.search-input-block input[type="text"], .search-input-block input[type="number"]').hide();
		$parent.find('.search-input-block button[type="submit"]').prop('disabled', true);
	}

	function validateNotEmptySearch($element, i, $container){

		$element.bind('input', function() {

			if(searchby[i] && $container.find('.search-input-'+searchby[i].key) ){
				var ivalue = $container.find('.search-input-'+searchby[i].key).val();

				currentSearch[i] = ivalue;

				if (ivalue.length>=searchby[i].min)
					validNotEmpty[i] = false;
				else
					validNotEmpty[i] = true;
			}

			disableSumbitButton($container.closest('.search-by-container'), validNotEmpty[i]);

		});

	}

	function setPostUrl( $parent, i){
		var $form = $parent.closest('.wrapper-gfsc');
		$form.prop('action',  searchby[i].view)
	}

	function orderItems(opc){
		if(opc.key == 'nombre')
			dataFiltered = sortByAZ(dataFiltered, opc.key);
		else
			dataFiltered = sortByNumber(dataFiltered, opc.key);

		if(opc.orderby == 'desc')
			dataFiltered.reverse();

		paginacion.updateItems(dataFiltered);
		paginacion.reset();

	}

	return{
		inicializar : init
	}

})();
var notificaciones = (function(){
	var $centroNotificaciones = $('.notificaciones-table'),
	postSending = false;

	function init(){
		if($centroNotificaciones.length>0)
			initNotificaciones();
	}

	function initNotificaciones(){
		initActions();
	}


	function initActions(){
		$centroNotificaciones.on('click', '.notificacion .action-btn', function(){
			var $button = $(this),
			metaAction = (typeof $button.data('action') != 'undefined' ? $button.data('action') : null),
			$parent = $button.closest('.notificacion');

			if(metaAction != null){
				postSendUpdate(metaAction, $parent);
			}
		});
	}

	function updateNotificacionDom(action, meta, $parent){

		var toAppend = $parent.find('.ct-in-right');

		$parent.find('.action-btn').remove();

		var msg = '',
		icon = '';

		if(action=='accept'){
			msg= meta.msg.accept;
			icon = meta.icon.accept;
		}
		else{
			msg= meta.msg.cancel;
			icon = meta.icon.cancel;
		}

		$parent.find('.li-cont').removeClass('aprobacion').removeClass('ajeno');
		$parent.find('.li-cont').addClass('propio');
		$parent.find('.type').html(msg);
		$parent.find('.ti-date').html('<i>'+ meta.fecha + '</i>' + ' | ID : '+ meta.id);
		toAppend.append('<p>Estatus: '+meta.estatus+'</p><p>Folio: '+meta.folio+'</p>');


	}

	function postSendUpdate(metaAction, $parent){
		var data = { success: false, data: [] },
		container = '#notificacion-'+metaAction.id;

		if(!postSending){

			postSending = true;

			generalLoadingIcon(container , true);

			$.post( postURL , { id: metaAction.id, action : metaAction.action })
			  .done(function( json ) {

			    //SETEO SUCCESS TRUE HARDCODEADO Y el folio que regresa
			  	//aqui iría el data que regrese el json
			  	data.success = true;
			  	data.data = {
			  		folio : 'F012399',
			  		msg : {
			  			accept: "Aceptaste la solicitud de <strong>Juan Carlos Santana</strong> para suspender temporalmente <strong>[30] líneas</strong>.",
			  			cancel : "Rechazaste la solicitud de <strong>Juan Carlos Santana</strong> para suspender temporalmente <strong>[30] líneas</strong>."
			  		},
			  		icon : {
			  			accept : "io-TickNeg",
			  			cancel : "io-Alert2"
			  		},
			  		estatus : 'Completado',
			  		clase : 'propio',
			  		fecha : new Date(),
			  		id : '00111'
			  	};

			  	if(data.success){
			  		//EXITO
			  		updateNotificacionDom(metaAction.action, data.data , $parent);
			  	}
			  	else{
			  		//JSON SUCCESS FALSE
			  	}

			  	postSending = false;
			  	generalLoadingIcon(container, false);

			  })
			  .fail(function( jqxhr, textStatus, error ) {
			  	//Mensaje de error del SISTEMA
			  	postSending = false;
			  	generalLoadingIcon(container, false);
			});
		}
	}

	return{
		inicializar: init
	}
})();
var chartsMTE = (function(){

	var $chartsContainer = $('.pie-chart-container');

	function initializeCharts(){
		setLoaders();

		// Petición para obtener el script del mapa
		$.ajax({
		  url: 'https://www.gstatic.com/charts/loader.js',
		  dataType: "script"
		}).
		// Al ser satisfactoria inicializamos el mapa
		done(function(){
			var hash = window.location.hash;
			setTimeout(function(){
				mainInitCharts();
	      	}, 1500);


		}).
		fail(function(){
			throw new NuevoError("No se pudo cargar la API de las gráficas, algunas funciones no estarán disponibles en la página.");

			//Volver a hacer un segundo intento si fue fail.
			// Petición para obtener el script del mapa
			$.ajax({
			  url: 'https://www.gstatic.com/charts/loader.js',
			  dataType: "script"
			}).
			// Al ser satisfactoria inicializamos el mapa
			done(function(){
				var hash = window.location.hash;
				setTimeout(function(){
					mainInitCharts();
		      	}, 1500);


			});
		});
	}

	function mainInitCharts(){
		google.charts.load('current', {'packages':['corechart']});
		loadCharts();
		setActions();
		setActionsError();
	}

	function reinitDuplicates(){
		google.charts.load('current', {'packages':['corechart']});
		loadChartsDuplicate();
		setActions();
		setActionsError();
	}

	function loadCharts(){
		google.charts.setOnLoadCallback(initCharts);
	}

	function loadChartsDuplicate(){
		google.charts.setOnLoadCallback(initChartsSwiperDuplicate);
	}

	function loadChart($container){
		$chart = $container.find('.pie-chart-block');
		var i = $chart.data('index');
		initChart($chart, i);
		loadingChart($container, false);
	}

	function loadIndividualChart(){}

	function setError(){

		var html = '<div class="col-sm-12 api-msg api-msg-error"> <div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb"> <span class="icon io-Alert2"></span> <h2 class="h4">Información no disponible por el momento.</h2> <p class="p-only"><button class="btn-like-a btn-reintentar">Reintentar</button></p></div> </div> </div> </div>';

		$chartsContainer.each(function(){
			var $chartContainer = $(this);
			$chartContainer.append(html);

			loadingChart($chartContainer, false);
		});


	}


	function setChartError($chart){
		var $chartContainer = $chart.closest('.pie-chart-container');
		var html = '<div class="col-sm-12 api-msg api-msg-error"> <div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb"> <span class="icon io-Alert2"></span> <h2 class="h4">Información no disponible por el momento.</h2> <p class="p-only"><button class="btn-like-a btn-reintentar">Reintentar</button></p></div> </div> </div> </div>';

		$chartContainer.append(html);

		loadingChart($chartContainer, false);

		$chartContainer.find('.first-chart').show();

	}

	function initCharts(){

      	var $charts = $chartsContainer.find('.pie-chart-block');

      	$chartsContainer.find('.first-chart').hide();
		$charts.each(function(index){
			var $chart = $(this);
			var i = $chart.data('index');

			/*Get data*/
			var loaded = typeof $chart.data('loaded') != 'undefined' ? Number($chart.data('loaded')) : 0;

			if(loaded)
				initChart($chart, i);
			else
				setChartError($chart);
  		});
	}

	function initChartsSwiperDuplicate(){

		var $chartsContainerDuplicate = $('.pie-chart-container.swiper-slide-duplicate');

      	var $charts = $chartsContainerDuplicate.find('.pie-chart-block');

      	$chartsContainerDuplicate.find('.first-chart').hide();

		$charts.each(function(index){
			var $chart = $(this);
			var i = $chart.data('index');

			/*Get data*/
			var loaded = typeof $chart.data('loaded') != 'undefined' ? Number($chart.data('loaded')) : 0;

			if(loaded)
				initChart($chart, i);
			else
				setChartError($chart);
  		});
	}

	function initChart($chart, i){
		var id = 'pie-chart-'+i,
		percentage = $chart.data('percentage'),
		colors = $chart.data('colors'),
		text = $chart.data('description');

		if($('#'+id).length>0)
			id = 'pie-chart-'+i+'-'+i;

		$chart.attr('id', id );


		var $chartContainer = $chart.closest('.pie-chart-container');

        if(typeof percentage != 'undefined') {

            drawChart(id, percentage, colors, text);

            if($chartContainer.hasClass('swiper-slide') && !firstChartLoaded){
				firstChartLoaded = true;
				$chartContainer.addClass('firstLoaded');
				var $swiper = $chartContainer.closest('.swiper-mobile');
				var toSlide = (Number(i)-1 >-1 ? Number(i)-1 : Number(i)+1);
				swipersM[$swiper.data('index')].slideTo(toSlide);
				swipersM[$swiper.data('index')].slideTo(i);

			}
        }

        $chartContainer.find('.first-chart').show();
	}

	function setActions(){
		$('body').bind('resizeChart', '.pie-chart-container', function(){
			initCharts();
		});
	}

	function setActionsError(){
		$('.pie-chart-container').on('click', '.btn-reintentar', function(){
			var $button = $(this),
			$container = $button.closest('.pie-chart-container');
			loadingChart($container, true);
			setTimeout(function(){
				loadChart($container);
			}, 3000);

			$container.find('.api-msg-error').remove();

		});
	}

	function calculatePercentage(){

	}



	function drawChart(chartId, percentage, colors, text){
		percentage = JSON.parse('[' + percentage + ']');
		colors = JSON.parse('[' + colors + ']');

		var pairs = [['Task', 'Hours per Day']];

		$.each(percentage, function( i, value ) {
			var aux = ['', percentage[i]/10];
		  	pairs.push(aux);
		});

		var pairsColors = {};

		$.each(colors, function( i, value ) {
			pairsColors[i] = {color : colors[i]} ;
		});

		var data = google.visualization.arrayToDataTable(pairs);
		var container = $('#'+chartId);
		var size = ($(container).width() <240 ? 240 : $(container).width()-20);

        var options = {
			backgroundColor : 'transparent',
			legend: 'none',
			pieSliceText: 'none',
			pieStartAngle: 155,
			tooltip: { trigger: 'none' },
			slices: pairsColors,
			width :size,
            height :size,
            is3D : false,
            pieStartAngle: 290,
            enableInteractivity: false
		};

		var $chart = $('#'+chartId);
        drawingChart($chart, chartId, data, options);

        if(typeof text != 'undefined')
        	$chart.find('>div').append('<div class="chart-center"><span class="robusta">'+text+'</span></div>');

        $chart.closest('.pie-chart-container').find('.loading-block').hide();

        //loadingChart($chart, false);
	}

	function drawingChart($chart, chartId, data, options){

		var chart = new google.visualization.PieChart(document.getElementById(chartId));
        chart.draw(data, options);

	}

	function setLoaders(){
		$chartsContainer.each(function(){
			var $chartContainer = $(this);
			loadingChart($chartContainer, true);
		});
	}

	return{
		inicializar : initializeCharts,
		drawChart : drawingChart,
		reinitDuplicates : reinitDuplicates
	}
})();

if($('.pie-chart-block').length>0)
	chartsMTE.inicializar();
// Buscador del faq
var searchFaq = (function(){
    return{
        inicializar: function(){

            /*Resetar el modal cuando se hace resize*/
            var menulateralfaq = document.getElementsByClassName("search-bar-section-mobile")[0];
            if (menulateralfaq) {

                function hideMenuLateralMobile() {
                    var windowSizeFaq = window.innerWidth,
                    buscadorlateralfaq = document.getElementsByClassName("faq-left-menu")[0],
                    fondobuscadorfaq = document.getElementsByClassName("back-ftm")[0];

                    if (windowSizeFaq > 767) {
                       buscadorlateralfaq.classList.remove("flm-fixed");
                       fondobuscadorfaq.classList.remove("back-ftm-active");

                    }
                    else {}
                }

                window.onresize = function(event) {
                    hideMenuLateralMobile();
                };
            }
            else {}


            /*Menu para busqueda en mobile*/

            $(".float-icon-search-faq").on("click", function(){
                $(".faq-left-menu").addClass("flm-fixed");
                $(".back-ftm").addClass("back-ftm-active");
            });

            $(".back-ftm").on("click", function(){
                $(".faq-left-menu").removeClass("flm-fixed");
                $(this).removeClass("back-ftm-active");
            });



            // Overrides the default autocomplete filter function to search for matched on atleast 1 word in each of the input term's words --- PARA que acepte palabras separadas
            // $.ui.autocomplete.filter = function (array, terms) {
            //     arrayOfTerms = terms.split(" ");
            //     var term = $.map(arrayOfTerms, function (tm) {
            //          return $.ui.autocomplete.escapeRegex(tm);
            //     }).join('|');
            //    var matcher = new RegExp("\\b" + term, "i");
            //     return $.grep(array, function (value) {
            //        return matcher.test(value.label || value.value || value);
            //     });
            // };


            var NoResultsLabel = "<div class='no-results'> <p>No tenemos coincidencias con {{searchedvalue}}</p> <span>Intenta con otras palabras</span> </div>";
            var dataQuestions = [
                "¿Qué hago si no tengo servicio de Internet (datos)?"
                ,"¿Qué hacer en caso de Robo o extravío en el extranjero?"
                ,"¿Cómo puedo realizar el pago de mi factura?"
                ,"Quiero descargar mi factura"
                ,"Crear un grupo"
                ,"Administrar una línea"
                ,"¿Cómo agrego nuevos servicios a mi plan?"
                ,"Tengo un Plan de Renta, ¿qué tengo que contratar para viajar a Estados Unidos y que no me salga tan caro?"
                ,"Quiero contratar un plan de datos"
                ,"Quiero descativar mi línea"
                ,"Quiero pagar un grupo de líneas"
                ,"Quiero facturar periódicamente las líneas de mi cuenta"

            ];

            var accentMap = {
                'à': 'a', 'á': 'a', 'â': 'a', 'ã': 'a', 'ä': 'a', 'å': 'a', // a
                'ç': 'c',                                                   // c
                'è': 'e', 'é': 'e', 'ê': 'e', 'ë': 'e',                     // e
                'ì': 'i', 'í': 'i', 'î': 'i', 'ï': 'i',                     // i
                'ò': 'o', 'ó': 'o', 'ô': 'o', 'õ': 'o', 'ö': 'o', 'ø': 'o', // o
                'ß': 's',                                                   // s
                'ù': 'u', 'ú': 'u', 'û': 'u', 'ü': 'u',                     // u
                'ÿ': 'y'                                                    // y
            };

            var normalize = function( term ) {
              var ret = "";
              for ( var i = 0; i < term.length; i++ ) {
                ret += accentMap[ term.charAt(i) ] || term.charAt(i);
              }
              return ret;
            };



            function customFilter(array, terms) {
                arrayOfTerms = terms.split(" ");
                var term = $.map(arrayOfTerms, function (tm) {
                     return $.ui.autocomplete.escapeRegex(tm);
                }).join('|');
               var matcher = new RegExp("\\b" + term, "i");
                return $.grep(array, function (value) {
                   return matcher.test(value.label || value.value || value);
                });
            };

            $( "#input-search-faq" ).autocomplete({
                multiple: true,
                mustMatch: false,
                appendTo: "#form-search-faq .search",

                open: function (e, ui) {
                    var acData = $(this).data('ui-autocomplete');
                    acData
                    .menu
                    .element
                    .find('li')
                    .each(function () {
                        var me = $(this);
                        var keywords = acData.term.split(' ').join('|');
                        me.html(me.text().replace(new RegExp("(" + keywords + ")", "gi"), '<b>$1</b>'));
                     });

                    var ancho_del_input_actual = $('#input-search-faq').innerWidth(),
                        fitstyles_input = ({
                            // width: ancho_del_input_actual
                            position: "absolute",
                            top: "40px",
                            left: "0",
                        });


                    console.log( fitstyles_input );

                    $(this).autocomplete("widget").css( fitstyles_input );
                },

                source: function( request, response ) {

                    // Si no hay resultados
                    var results = $.ui.autocomplete.filter(dataQuestions, request.term);

                    var matcher = new RegExp( $.ui.autocomplete.escapeRegex( request.term ), "i" );
                    var results = $.grep( dataQuestions, function( value ) {
                      value = value.label || value.value || value;
                      return matcher.test( value ) || matcher.test( normalize( value ) );
                    });

                    if (!results.length) {
                        results = [replaceValue("searchedvalue", request.term, NoResultsLabel)];
                    }
                    function replaceValue(search, replace, string){
                        // console.log(search,replace,string);
                        // console.log (string.replace("{{" + search + "}}", replace));
                        return string.replace("{{" + search + "}}", replace);
                    }
                    // console.log(results);
                    response(results);

                },

                select: function (event, ui) {
                    var sin_resultados = "<div class='no-results'> <p>No tenemos coincidencias con";
                    if (ui.item.label.search(sin_resultados) > -1) {
                        event.preventDefault();
                    }
                },
                focus: function (event, ui) {
                    var sin_resultados = "<div class='no-results'> <p>No tenemos coincidencias con";
                    if (ui.item.label.search(sin_resultados) > -1) {
                        event.preventDefault();
                    }
                }

          } );




        }
    }
})();


/* Tabs para preguntas de FAQ */
var questionFaq = (function(){

    // SEnd number to contact

    function validatenumFaqFeed ($form){
        // var idQuestNum = $form.attr('id');

        disableSumbitButton($form, true);

        $form.validate({

            onkeyup: function(element) {
                   $(element).valid();
            },
            errorElement: "div",
            errorPlacement: function(error, element) {
                error.prependTo("div.cnf-errors-faq");
            },
            rules: {
                answer_contact_me_to_cel: {
                    required: true,
                    number: true,
                    minlength: 10
                }
            },
            messages: {
                answer_contact_me_to_cel: {
                    minlength: "El número debe de ser a 10 dígitos"
                }
            },
            submitHandler: function(form) {
                var self = $(form).serialize(),
                upperblockformnumber = $(form).parents(".active-feedback-f");

                $(".btons-number-feedback").removeClass("active-btons-number-feedback");

                // var messagenumNotreq = "<div class='understoodquestion'><p><span class='icon io-TickNeg'></span>Gracias por tu ayuda, en breve revisaremos tu solicitud.</p></div>";
                // $(this).parents(".feedback-f").append( messagenumNotreq );



                loadingIcon(form, true);
                $.when( sendFormData(self) )
                    .done(function() {
                        var child_of_question_feed = $(form).attr('id'),

                            $messagenumSuctext1 = "<div class='understoodquestion icon-left'><p><span class='icon io-TickNeg'></span>¡Gracias!<br>Un ejecutivo se comunicará contigo al ",
                            $messagenumSuctext2 = " para ayudarte con tu duda.</p></div>";

                        loadingIcon(form, false);

                        $(".faq-f-feed-number").removeClass("active-fffn");

                        console.log( "En la pregunta "+ child_of_question_feed + " " + self );
                        $(form).parents(".active-q").append($messagenumSuctext1 + $form.find(".number_to_contact").val() + $messagenumSuctext2);

                    }
                );
            }
        });

        checkGeneralValidForm($form);

        function sendFormData(self){
            return $('body').delay( 2000 );
        }
        function loadingIcon(form, show){
            var loading = '<div class="loading-block"><span class="icon io-Update loading-stat"></span></div>';

            if(show){
                $(form).find('button[type="submit"]').parents(".contactnumber-feedback").append(loading);
            }
            else{
                $('.loading-block').remove();
            }
        }

        return {
            clearForm: function(){
                $form.validate().resetForm();
                $form[0].reset();
                // document.getElementByClass('fq-qt-01-04').reset();
                // console.log($form + "si jala la funcion de reset");
            }
        }

    }


    function validateformFAQfeed($form){

        var idQuest = $form.attr('id');

        disableSumbitButton($form, true);

        $form.validate({

            focusInvalid: false,
            onkeyup: function(element) {
                   $(element).valid();
            },
            errorElement: "div",
            errorPlacement: function(error, element) {
                error.prependTo("div.errors-faq");
            },
            rules: {
                answer_in_s_lvl_in: {
                    required: true
                },

                answer_in_s_lvl_in_other: {
                    required: function(){
                        var value = $form.find('input[name="answer_in_s_lvl_in"]:checked').val();
                        // console.info($form);
                        return value==='other';
                    },
                    minlength: 3,
                    maxlength: 200
                },
                answer_contact_me_to_cel: {
                    required: true,
                    number: true,
                    minlength: 10
                }
            },
            messages: {
                answer_in_s_lvl_in: "Debes elegir una opción",
                // answer_in_s_lvl_in_other: "Escribe tu comentario"
                answer_in_s_lvl_in_other: {
                    required :"Escribe tu comentario",
                    minlength: "Escribe al menos 3 letras",
                    maxlength: "Escribe un comentario mas de máximo 200 letras"
                },
                answer_contact_me_to_cel: {
                    minlength: "El número debe de ser a 10 dígitos"
                }
            },
            submitHandler: function(form) {

                var self = $(form).serialize(),
                    $pointthisForm = $(form);


                loadingIcon(form, true);
                $pointthisForm.find(".button-f-a").removeClass("active-button-f-a");

                $.when( sendFormData(self) )
                    .done(function() {

                        loadingIcon(form, false);

                        console.log( idQuest + " " + self );
                        $pointthisForm.find(".first-lvl").addClass("active-first-lvl");
                        $pointthisForm.find(".second-lvl").removeClass("active-lvl");
                        $pointthisForm.find(".first-lvl").removeClass("active-first-lvl");
                        $pointthisForm.siblings(".faq-f-feed-number").addClass("active-fffn");
                        $pointthisForm.siblings(".faq-f-feed-number").find(".btons-number-feedback").addClass("active-btons-number-feedback");

                        $pointthisForm.siblings(".faq-f-feed-number").each(function( index ) {
                            var $form = $(this);
                            validatenumFaqFeed($form);
                        });

                    });
            }
        });

        checkGeneralValidForm($form);

        function sendFormData(self){
            return $('body').delay( 2000 );
        }
        function loadingIcon(form, show){
            var loading = '<div class="loading-block"><span class="icon io-Update loading-stat"></span></div>';

            if(show){
                $(form).find('button[type="submit"]').parents(".active-feedback-f").append(loading);
            }
            else{
                $('.loading-block').remove();
            }
        }



        return {
            clearForm: function(){
                $form.validate().resetForm();
                $form[0].reset();
                // document.getElementByClass('fq-qt-01-04').reset();
                // console.log($form + "si jala la funcion de reset");
            }
        }


    }


    return{
        inicializar: function(){
            $(".full-question .question-f").on("click", function(){
                var $questblockClicked = $(this),
                    $formRelative = $questblockClicked.siblings(".feedback-f").find(".faq-form-feed"),
                    $secondformRelative = $questblockClicked.siblings(".feedback-f").find(".faq-f-feed-number"),
                    succesblockmessagefaq = $questblockClicked.siblings(".understoodquestion"),
                    secondblockmessagefaq = $questblockClicked.siblings(".active-feedback-f").find(".active-fffn");

                    $questblockClicked.siblings(".feedback-f").removeClass("active-feedback-f");
                    $questblockClicked.siblings(".feedback-f").find(".first-lvl");


                if ( $questblockClicked.parent(".full-question").hasClass("active-q") )
                {
                    $questblockClicked.parent().removeClass("active-q");
                    $(".full-question .second-lvl").removeClass("active-lvl");
                    $(".full-question .first-lvl").removeClass("active-first-lvl");
                    $questblockClicked.siblings(".feedback-f").removeClass("active-feedback-f");
                }

                else
                {

                    $questblockClicked.siblings(".feedback-f").addClass("active-feedback-f");
                    $(".full-question .first-lvl").addClass("active-first-lvl");
                    $(".number_to_contact").val("");
                    $(".full-question .second-lvl").removeClass("active-lvl");
                    $(".faq-question-block .full-question").removeClass("active-q");
                    $questblockClicked.parent(".full-question").toggleClass("active-q");

                    validateformFAQfeed( $formRelative ).clearForm();
                    validatenumFaqFeed( $secondformRelative );
                }

                $('html, body').animate({
                    scrollTop: $( $questblockClicked ).offset().top
                }, 500);



                if ( succesblockmessagefaq[0] ) {
                    $questblockClicked.siblings(".feedback-f").removeClass("active-feedback-f");
                }
                else {}

                if ( secondblockmessagefaq[0] ) {
                    secondblockmessagefaq.siblings(".faq-form-feed").find(".first-lvl").removeClass("active-first-lvl");
                }
                else {}

                // Limpiar formularios y errores
                $("form").validate().resetForm();
                // $(".faq-f-feed-number").removeClass("active-fffn");
                $(".input-other-faq").removeClass("active-iof");
                $(".errors-faq, .cnf-errors-faq").html("");
                $(".number_to_contact").removeClass("error");

                return $questblockClicked;
            });

            $(".to-hi-check").on("click", function(){
                var $fakeLabelclicked = $(this),
                    $locateforminclick = $fakeLabelclicked.parents('form'),
                    $idlocateforminclick = $locateforminclick.attr("id"),
                    $valuefeedInput = $(this).siblings(".hide-input").val(),
                    $messagethanks = "<div class='understoodquestion'><p><span class='icon io-TickNeg'></span>Agradecemos tu ayuda</p></div>";

                if ( $valuefeedInput == "feedback-yes" ) {
                    $fakeLabelclicked.parents(".first-lvl").siblings(".second-lvl").addClass("active-lvl");
                    $fakeLabelclicked.parents(".first-lvl").siblings(".second-lvl").find(".button-f-a").addClass("active-button-f-a");
                }
                else if ( $valuefeedInput == "feedback-no" ) {
                    $fakeLabelclicked.parents(".first-lvl").siblings(".second-lvl").removeClass("active-lvl");
                    $fakeLabelclicked.parents(".full-question").append($messagethanks);
                    $fakeLabelclicked.parents(".feedback-f").removeClass("active-feedback-f");
                    console.log("id de Pregunta:  "+ $idlocateforminclick + "  La pregunta quedó clara");
                }

                $(".input-other-faq input").val( "" );


            });
            $(".clear-action-f-a").on("click", function(){
                $(".second-lvl.active-lvl").removeClass("active-lvl");
                $(".data-write .hide-input").prop( "checked", false );
                $(".input-other-faq").removeClass("active-iof");
            });

            $(".normal-faq-asnwer input").on("click", function(){
                // $( ".data-write.input-other-faq" ).remove();
                $( ".errors-faq .error" ).hide();
                var nextfielnorm = $(".normal-faq-asnwer input").parent().siblings(".input-other-faq");
                $(nextfielnorm).find("input").removeClass('error');
                $(nextfielnorm).removeClass("active-iof");
            });

            $(".data-write.other-faq-asnwer input").on("click", function(){

                var nextfieldother = $(".data-write.other-faq-asnwer input").parent().siblings(".input-other-faq");
                $(nextfieldother).addClass("active-iof");

            });

            $(".do-not-contact-me").on("click", function(){
                var messagenumNotreq = "<div class='understoodquestion'><p><span class='icon io-TickNeg'></span>Gracias por tu ayuda, en breve revisaremos tu solicitud.</p></div>";
                $(this).parents(".active-q").append( messagenumNotreq );

                $(".faq-f-feed-number").removeClass("active-fffn");


            });



            // // SEnd number to contact
            // $(".contactnumber-feedback .bton_not_contact_me_to_cel").on("click", function (){
            //     $(".full-question.active-q").append($messagenumNotreq);
            //     $(".contactnumber-feedback").hide();
            // });



            $('.faq-form-feed').each(function( index ) {
                var $form = $(this);
                validateformFAQfeed($form);
            });



            // SEnd number to contact
            // $('.contactnumber-feedback').each(function( index ) {
            // });

        }
    }

})();
var home = (function(){

	var modalDescargarFacturas = null,
	currentModalData = {},
	formElementsModales = {
		'descargarFacturas': {id: null, validator: null, sending: false },
		'cambio': {id: 'form-home-cambio', validator: null, sending: false },
		'reactivacion': {id: 'form-home-reactivacion', validator: null, sending: false },
		'cac': {id: 'form-home-cac', validator: null, sending: false },
		'suspension': {id: 'form-home-suspension', validator: null, sending: false }
	};

	var $tabsContainer = $('.tabs-block'),
	$tabsSelector = $tabsContainer.find('.link-secondary-tabs ul li'),
	$tabs = $tabsContainer.find('.info-secondary-tabs .tab-pane'),
	$facturasBlock = $('#facturas-pendientes-block');

	function resetForms(){
		$('.form-tab').next('.api-msg-success').addClass('hidden');
		$('.form-tab').parent().find('.api-msg-error').addClass('hidden');
		$('.form-tab').parent().parent().parent().find('.heading-opc-tab').removeClass('hidden');
		$('.form-tab').removeClass('hidden');


		$('.terminos-container').each(function (index) {
		  var $terminosContainer = $(this);

			if($terminosContainer.hasClass('visible')){
				$terminosContainer.removeClass('visible')
				$terminosContainer.hide();
			}

		});

		$('.form-tab').find("input[type=text], input[type=email], input[type=password], select").val("");
		$('.form-tab').find("input[type=checkbox], input[type=radio]").prop("checked", false);
		$('.form-tab').find('button[type="submit"]').prop('disabled', true);

		if(formElementsModales['cambio']['validator']){
			formElementsModales['cambio']['validator'].resetForm();
		}

		if(formElementsModales['reactivacion']['validator']){
			formElementsModales['reactivacion']['validator'].resetForm();
		}

		if(formElementsModales['cac']['validator']){
			formElementsModales['cac']['validator'].resetForm();
		}

		if(formElementsModales['suspension']['validator']){
			formElementsModales['suspension']['validator'].resetForm();
		}
	}

	function initFormValidations(){
		validateSuspensionForm();
		validateCambioForm();
		validateReactivacionForm();
		validateCACForm();
	}

	function validateCACForm(){
		var $mainForm = $('#'+formElementsModales['cac']['id']);
		disableSumbitButton($mainForm, true);
		formElementsModales['cac']['validator'] =
			$mainForm.validate({
			  rules: {
				checkboxAutogestion : {
					required : true
				},
				nombre: {
					required: true,
					basicName: true,
					minlength: 3,
					maxlength: 40
				},
				numero : {
					digits: true,
					minlength: 10,
					maxlength: 10,
					required : true
				},
				tramite : {
					required : true
				}
			  },
			  messages: {
			  	numero: {
					required: "Ingresa un número de contacto.",
					digits: "Ingresa un número válido.",
					minlength: "Ingresa un número de 10 dígitos.",
					maxlength: "Ingresa un número de 10 dígitos."
				},
				tramite : {
					required : "Selecciona un trámite a realizar."
				},
				nombre: {
					required : "Ingresa un nombre.",
					basicName: "Este campo solo acepta letras, números, punto y espacios.",
					minlength: "El nombre debe contener al menos 3 caracteres.",
				   	maxlength : "El nombre no debe ser mayor a 40 caracteres."
				}
			   },
				errorPlacement: function(error, element) {
					var $parent = element.parent().parent().parent();
					if(element[0].name=='numero' || element[0].name=='tramite' || element[0].name=='nombre'){
				   		$('<div class="error-aux col-sm-7 col-xs-9 col-xs-offset-3 col-sm-offset-5"></div>').insertAfter( $parent );
				   		$parent.next('.error-aux').append(error);
					}
				},
		        submitHandler: function(form) {
					if(!formElementsModales['cac']['sending']){
						sendFormData(form);
			  		}
				}
		});

		checkGeneralValidForm($mainForm);

		function sendFormData(form){
			formElementsModales['cac']['sending'] = true;
			$(form).find('button[type="submit"]').prop('disabled', true);

			var self = $(form).serialize();

			var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

			/**Quitar una vez en producción**/
			var sendTo = urlPOST;

			urlPOST = checkDevelopmentPostHTML(urlPOST);

			$.post(  urlPOST , self )
			.done(function( data ) {
			  	Services.home.CACFormCallSuccess(data, form );
				formElementsModales['cac']['sending'] = false;

			 })
			.fail(function( jqxhr, textStatus, error ) {
			  	//Mensaje de error del sistema
			  	Services.home.CACFormCallFail(error, form);
			  	formElementsModales['cac']['sending'] = false;
			});
		}
	}

	function validateReactivacionForm(){
		var $mainForm = $('#'+formElementsModales['reactivacion']['id']);
		disableSumbitButton($mainForm, true);
		formElementsModales['reactivacion']['validator'] =
			$mainForm.validate({
			  rules: {
				checkboxAutogestion : {
					required : true
				},
				numero : {
					digits: true,
					minlength: 10,
					maxlength: 10,
					required : true
				}
			  },
			  messages: {
			  	numero: {
					required: "Ingresa un número de contacto.",
					digits: "Ingresa un número válido.",
					minlength: "Ingresa un número de 10 dígitos.",
					maxlength: "Ingresa un número de 10 dígitos."
				}
			   },
				errorPlacement: function(error, element) {
					var $parent = element.parent().parent().parent();
					if(element[0].name=='numero'){
				   		$('<div class="error-aux col-sm-7 col-xs-9 col-xs-offset-3 col-sm-offset-5"></div>').insertAfter( $parent );
				   		$parent.next('.error-aux').append(error);
					}
				},
		        submitHandler: function(form) {
					if(!formElementsModales['reactivacion']['sending']){
						sendFormData(form);
			  		}
				}
		});

		checkGeneralValidForm($mainForm);

		function sendFormData(form){
			formElementsModales['reactivacion']['sending'] = true;
			$(form).find('button[type="submit"]').prop('disabled', true);

			var self = $(form).serialize();

			var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

			/**Quitar una vez en producción**/
			var sendTo = urlPOST;

			urlPOST = checkDevelopmentPostHTML(urlPOST);

			$.post(  urlPOST , self )
			.done(function( data ) {
			  	Services.home.reactivacionFormCallSuccess(data, form );
				formElementsModales['reactivacion']['sending'] = false;

			 })
			.fail(function( jqxhr, textStatus, error ) {
			  	//Mensaje de error del sistema
			  	Services.home.reactivacionFormCallFail(error, form);
			  	formElementsModales['reactivacion']['sending'] = false;
			});
		}
	}

	function validateCambioForm(){
		var $mainForm = $('#'+formElementsModales['cambio']['id']);
		disableSumbitButton($mainForm, true);
		formElementsModales['cambio']['validator'] =
			$mainForm.validate({
			  rules: {
			  	chip: {
				  	minlength: 19,
					exactlength: 19,
					required : true,
					digits : true
				},
				checkboxAutogestion : {
					required : true
				},
				numero : {
					digits: true,
					minlength: 10,
					maxlength: 10,
					required : true
				}
			  },
			  messages: {
			  	numero: {
					required: "Ingresa un número de contacto.",
					digits: "Ingresa un número válido.",
					minlength: "Ingresa un número de 10 dígitos.",
					maxlength: "Ingresa un número de 10 dígitos."
				},
				chip :{
					exactlength: "Ingresa los 19 dígitos del chip.",
					minlength: "Ingresa los 19 dígitos del chip.",
					required : "Ingresa los 19 dígitos del chip.",
					digits: "Ingresa los 19 dígitos del chip."
				}
			   },
				errorPlacement: function(error, element) {
					var $parent = element.parent().parent().parent();

					if(element[0].name=='numero' || element[0].name=='chip'){
				   		$('<div class="error-aux col-sm-7 col-xs-9 col-xs-offset-3 col-sm-offset-5"></div>').insertAfter( $parent );
				   		$parent.next('.error-aux').append(error);
					}
				},
		        submitHandler: function(form) {
					if(!formElementsModales['cambio']['sending']){
						sendFormData(form);
			  		}
				}
		});

		checkGeneralValidForm($mainForm);

		function sendFormData(form){
			formElementsModales['cambio']['sending'] = true;
			$(form).find('button[type="submit"]').prop('disabled', true);

			var self = $(form).serialize();

			var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

			/**Quitar una vez en producción**/
			var sendTo = urlPOST;

			urlPOST = checkDevelopmentPostHTML(urlPOST);

			$.post(  urlPOST , self )
			.done(function( data ) {
			  	Services.home.cambioFormCallSuccess(data, form );
				formElementsModales['cambio']['sending'] = false;

			 })
			.fail(function( jqxhr, textStatus, error ) {
			  	//Mensaje de error del sistema
			  	Services.home.cambioFormCallFail(error, form);
			  	formElementsModales['cambio']['sending'] = false;
			});
		}
	}

	function validateSuspensionForm(){
		var $mainForm = $('#'+formElementsModales['suspension']['id']);
		disableSumbitButton($mainForm, true);
		formElementsModales['suspension']['validator'] =
			$mainForm.validate({
			  rules: {
			  	motivoAutogestion : {
			  		required : true
			  	},
				checkboxAutogestion : {
					required : true
				},
				numero : {
					digits: true,
					minlength: 10,
					maxlength: 10,
					required : true
				}
			  },
			  messages: {
			  	numero: {
					required: "Ingresa un número de contacto.",
					digits: "Ingresa un número válido.",
					minlength: "Ingresa un número de 10 dígitos.",
					maxlength: "Ingresa un número de 10 dígitos."
				}
			   },
				errorPlacement: function(error, element) {
					var $parent = element.parent().parent().parent();
					if(element[0].name=='numero'){
				   		$('<div class="error-aux col-sm-7 col-xs-9 col-xs-offset-3 col-sm-offset-5"></div>').insertAfter( $parent );
				   		$parent.next('.error-aux').append(error);
					}
				},
		        submitHandler: function(form) {
					if(!formElementsModales['suspension']['sending']){
						sendFormData(form);
			  		}
				}
		});

		checkGeneralValidForm($mainForm);

		function sendFormData(form){
			formElementsModales['suspension']['sending'] = true;
			$(form).find('button[type="submit"]').prop('disabled', true);

			var self = $(form).serialize();

			var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

			/**Quitar una vez en producción**/
			var sendTo = urlPOST;

			urlPOST = checkDevelopmentPostHTML(urlPOST);

			$.post(  urlPOST , self )
			.done(function( data ) {
			  	Services.home.suspensionFormCallSuccess(data, form );
				formElementsModales['suspension']['sending'] = false;

			 })
			.fail(function( jqxhr, textStatus, error ) {
			  	//Mensaje de error del sistema
			  	Services.home.suspensionFormCallFail(error, form);
			  	formElementsModales['suspension']['sending'] = false;
			});
		}
	}

	function initHome(){
		loadFacturas();
		initActions();
		if($('#modal-descargar').length>0)
			initModalDescargarFacturas();

		initTabs();
		initFormValidations();
	}

	function loadFacturas(){
		var $facturas = $facturasBlock.find('.general-table-container');
		$facturas.find('.general-table').hide();
		generalLoadingIcon($facturasBlock, true);

		setTimeout(function(){
			var hash = window.location.hash;

			if(hash=="#error-solicitud"){
				setErrorFacturas();
			}
			else{
				generalLoadingIcon($facturasBlock, false);
				$facturas.find('.general-table').show();
			}
		}, 2000);

		setActionsErrorFacturas();
	}

	function setErrorFacturas(){
		var error = '<div class="col-sm-12 api-msg api-msg-error"> <div class="notif-bloq"> <div class="row"> <div class="col-xs-12 col-sm-12 inner-nb"> <span class="icon io-Alert2"></span> <h2 class="h4">Información no disponible por el momento.</h2> <p class="p-only"><button class="btn-like-a btn-reintentar">Reintentar</button></p></div> </div> </div> </div>';

		$facturasBlock.find('.api-msg-error').remove();
		generalLoadingIcon($facturasBlock, false);
		$facturasBlock.html(error);
	}

	function setActionsErrorFacturas(){
		$facturasBlock.on('click', '.btn-reintentar', function(){
			var $button = $(this),
			$container = $facturasBlock;
			generalLoadingIcon($facturasBlock, true);
			setTimeout(function(){
				setErrorFacturas();
			}, 3000);

			$container.find('.api-msg-error').remove();

		});
	}

	function initTabs(){
		//setDefault();
		initActions();
		function initActions(){
			$tabsSelector.click(function(e){
				e.preventDefault();
				var $selected = $(this);
				var selector = (typeof $selected.data('tab') != undefined ? $selected.data('tab') : null),
				$selector = (selector !=null ? $(selector) : null );

				if($selector.length>0)
					tabShow($selector , $selected);
			});
		}

		function tabShow($element, $selected){
			resetForms();
			$tabsSelector.removeClass('active');
			$tabs.removeClass('active');
			$element.addClass('active');
			$selected.addClass('active');
		}
	}

	function initActions(){
		$('.facturas-block').on('click', '.btn-descargar', function(e){
			e.preventDefault();
			var $element = $(this);
			setBasicInfoModal($element.data('item'));
			modalDescargarFacturas.openModal();
		});

		$('#btn-facturas-pendientes').click(function(e){
			e.preventDefault();
			getFacturasPendientes('#facturas-pendientes-block');
		});

		$('.btn-trigger-action').click(function(e){
			e.preventDefault();
			var $button = $(this),
			btn = (typeof $button.data('btn') != undefined ? $button.data('btn') : null );

			if(btn!=null){
				$(btn).trigger('click');
			}

		});

	}

	var sending = false;

	function getFacturasPendientes(form){
		sending = true;
		generalLoadingIcon(form, true);
		var urlPOST = Services.apiURL.getFacturasPendientesHome();

		$.post(  urlPOST , {} )
		.done(function( data ) {

			generalLoadingIcon(form, false);
			Services.home.getFacturasPendientes(data, form);
			sending = false;
		 })
		.fail(function( jqxhr, textStatus, error ) {
		  	//Mensaje de error del sistema
		  	Services.home.getFacturasPendientesFail(form, error);
		  	sending = false;
		  	generalLoadingIcon(form, false);
		});
	}

	function setBasicInfoModal(item){
		currentModalData = item;
		$('.modal-mte .alias-text, .modal-mte .txt-grupo').html(item.texto);
	}

	/**Inicio modal descargar facturas**/
	function initModalDescargarFacturas(){
		var $titleP = $('#modal-descargar .heading-mod .title-mod p.h2'),
		titleBefore = ( typeof $titleP.data('before') != 'undefined' ? $titleP.data('before') : null ),
		titleAfter = ( typeof $titleP.data('after') != 'undefined' ? $titleP.data('after') : null ),
		emailDefault = '',
		$input = $('#modal-descargar').find('input[name="email"]');

		validateForm();

		modalDescargarFacturas = new modalesTelcel($('#modal-descargar'),{
			onInit : function(){
				$('#descargar-facturas-confirmacion').hide();
				emailDefault = $input.val();
			},
			onReset : function(){
				removeGeneralError();
				$('#form-confirmar-descargar-facturas').show();
			  	$('#descargar-facturas-confirmacion').hide();
			  	resetMainForm();
			},
			onOpen : function(){
				if(titleBefore!=null)
					$titleP.html(titleBefore);
				$('#descargar-facturas-confirmacion').hide();

				var $form = $('#form-confirmar-descargar-facturas');
				disableSumbitButton($form, false);
			}
		});

		function validateForm(){
			var $form = $('#form-confirmar-descargar-facturas');

			disableSumbitButton($form, true);

			formElementsModales['descargarFacturas']['validator'] = $form.validate({
				rules: {
					email: {
					  required: false,
					  email: true
					}
				},
				messages: {
				 email: {
				   required: "Ingresa un correo electrónico.",
				   email: "Ingresa un correo electrónico válido."
				 }
				},
				errorClass : "error-dd error",
				submitHandler: function(form) {
					if(!formElementsModales['descargarFacturas']['sending']){

						formElementsModales['descargarFacturas']['sending'] = true;

						$(form).find('button[type="submit"]').prop('disabled', true);

						var self = $(form).serialize();

						generalLoadingIcon(form, true);


						var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

						$.post( urlPOST , { data: self, data: currentModalData })
						  .done(function( json ) {
						  	Services.facturacion.descargarFacturasSuccessCallback(json, form, { element : $titleP, text : titleAfter });
						  	formElementsModales['descargarFacturas']['sending'] = false;
						  	generalLoadingIcon(form, false);

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	Services.facturacion.descargarFacturasFailCallback(error, form);
						  	formElementsModales['descargarFacturas']['sending'] = false;
						  	generalLoadingIcon(form, false);
						});

					}

				}
			});

			checkGeneralValidForm($form);
		}

		function removeGeneralError(){
			$('#modal-descargar .system-error-msg').remove();
			$('#modal-descargar .has-system-error').removeClass('has-system-error');
		}

		$('#modal-descargar').on('click', '#btn-r-descargar-facturas', function(){
			removeGeneralError();
			$('#form-confirmar-descargar-facturas').submit();
		});

		function resetMainForm(){
			$input.removeClass('error error-dd');
			$input.val(emailDefault);

			if(formElementsModales['descargarFacturas']['validator']){
				formElementsModales['descargarFacturas']['validator'].resetForm();
			}
		}
	}
	/**Fin modal descargar facturas**/

	function init(){
		var $home = $('.home-block');
		if($home.length>0)
			initHome();
	}

	return{
		inicializar : init,
		facturasSwiperMobile : function($element){
			setBasicInfoModal($element.data('item'));
			modalDescargarFacturas.openModal();
		}
	}
})();
var dateRange = null,
	datesJSON = null,
	$calendar = $('.calendar');
		dateRange = { min : (typeof $calendar.data('min') != 'undefined' ? $calendar.data('min') : null ) , max : (typeof $calendar.data('max') != 'undefined' ? $calendar.data('max') : null ) };

var modalGeolocation = null;
function initModalGeolocation(){

	modalGeolocation = new modalesTelcel($('#modal-geolocation'),{
		onInit : function(){
		},
		onReset : function(){
		},
		onOpen : function(){
		},
		onClose : function(){
			var $mapaContainer = $('.citas-cac-container');
			if($mapaContainer.length>0)
				scrollToElement($mapaContainer);

		}
	});

}

var modalSinHorarios = null;
function initModalSinHorarios(){

	modalSinHorarios = new modalesTelcel($('#modal-sin-horarios'),{
		onInit : function(){
		},
		onReset : function(){
			resetFechaHoraCAC(true);

			var $step = $('.fecha-hora-cac-block').closest('.citas-step');

			if($step.length>0)
				setTimeout(function(){
					scrollToElement($step);
				}, 500);

		},
		onOpen : function(){
		}
	});

}

var modalErrorSolicitud = null;
function initModalErrorSolicitud(){
	var loadingContainer = $('#modal-error-solicitud .form-ge-mod');

	modalErrorSolicitud = new modalesTelcel($('#modal-error-solicitud'),{
		onInit : function(){
			setModalActions();
			$('#redirect-txt').hide();
		},
		onReset : function(){
			generalLoadingIcon(loadingContainer, false);
			$('#redirect-txt').hide();
			$('#autogestion-form-citas button[type="submit"]').prop('disabled', false);
		},
		onOpen : function(){

		},
		onClose : function(){

			//Cuando cierre el modal si quieren hacer refresh hay que descomentar esto
			// if(processCompleted)
			// 	location.reload();
		}
	});


	function setModalActions(){
		$('#btn-reintentar-submit').click(function(){
			retrySendForm();
		});
	}

	function retrySendForm(){
		$('#autogestion-form-citas').submit();
		modalErrorSolicitud.closeModal();
	}

}

var formElementsModales = {
	'cancelarVisita' : {id : null, validator : null, sending: false },
	'cancelarCita' : {id : null, validator : null, sending: false },
	'consultarDateTime' : {id : null, validator : null, sending: false },
	'reprogramarCita' : {id : null, validator : null, sending: false }
};

var _modalCancelarCita = null, _modalCancelarVisita = null;
var modalCancelarCita = null, modalCancelarVisita = null;

/**Inicio modal cancelar cita**/
function initModalCancelarCita(){
	var processCompleted = false;

	modalCancelarCita = new modalesTelcel($('#modal-cancelar-cita'),{
		onInit : function(){
			setModalActions();
			$('#confirmar-cancelar-cita').hide();
			$('#cancelar-cita-24-hrs').hide();
			$('#cancelar-cita-confirmacion').hide();
		},
		onReset : function(){
			processCompleted = false;
			$('#confirmar-cancelar-cita').hide();
		  	$('#cancelar-cita-confirmacion').hide();
		},
		onOpen : function(){
			$('#confirmar-cancelar-cita').hide();
			$('#cancelar-cita-24-hrs').hide();
			$('#cancelar-cita-confirmacion').hide();
			consultarDateTime();

		},
		onClose : function(){
			$('.linea-batch.active-settings').removeClass('active-settings');
			var $current = $('#cita-'+_modalCancelarCita.id);
			if($current.length>0)
				scrollToElement($current);
			//Cuando cierre el modal si quieren hacer refresh hay que descomentar esto
			// if(processCompleted)
			// 	location.reload();
		}
	});

	function consultarDateTime(){
		if(!formElementsModales['consultarDateTime']['sending']){

			formElementsModales['consultarDateTime']['sending'] = true;

			generalLoadingIcon('#modal-cancelar-cita .in-cont-mod', true);

			var postURL = Services.apiURL.getCurrentDateTime();

			$.post( postURL , { })
			  .done(function( json ) {

			  	Services.citas.consultarDateTimeSuccessCallback(json,_modalCancelarCita);
			  	formElementsModales['consultarDateTime']['sending'] = false;
			  	generalLoadingIcon('#modal-cancelar-cita .in-cont-mod', false);

			  })
			  .fail(function( jqxhr, textStatus, error ) {

			  	Services.citas.consultarDateTimeFailCallback(error, '#modal-cancelar-cita .in-cont-mod');
			  	formElementsModales['consultarDateTime']['sending'] = false;
			  	generalLoadingIcon('#modal-cancelar-cita .in-cont-mod', false);

			});

		}
	}

	function setModalActions(){
		$('#btn-cancelar-cita').click(function(){
			postCancelarCita();
		});
	}

	function postCancelarCita(){
		var form = '#modal-cancelar-cita .in-cont-mod';

		if(!formElementsModales['cancelarCita']['sending']){

			formElementsModales['cancelarCita']['sending'] = true;

			generalLoadingIcon(form, true);

			var postURL = Services.apiURL.cancelarCita();

			$.post( postURL , { delete: _modalCancelarCita.id })
			  .done(function( json ) {
			  	//Aquí le pusimos un delay de para simular que se tarda el servicio en regresar la info
			  	$('body').delay(8000);
				//En el servicio de cancelar la cita
				//Cuando sale el exito, se debe actualizar el html de la lista con la nueva información
				//Para que al cerrar el modal ya este actualizada

			  	Services.citas.cancelarCitaSuccessCallback(json, form, _modalCancelarCita);
			  	formElementsModales['cancelarCita']['sending'] = false;
			  	generalLoadingIcon(form, false);
			  	processCompleted = true;

			  })
			  .fail(function( jqxhr, textStatus, error ) {
			  	Services.citas.cancelarCitaFailCallback(error, form);
			  	formElementsModales['cancelarCita']['sending'] = false;
			  	generalLoadingIcon(form, false);
			});
		}
	}

}
/**Fin modal cancelar cita**/

/**Inicio modal cancelar visita**/
function initModalCancelarVisita(){
	var processCompleted = false;

	modalCancelarVisita = new modalesTelcel($('#modal-cancelar-visita'),{
		onInit : function(){
			setModalActions();
			$('#confirmar-cancelar-visita').hide();
			$('#cancelar-visita-confirmacion').hide();
		},
		onReset : function(){
			processCompleted = false;
			$('#confirmar-cancelar-visita').hide();
		  	$('#cancelar-visita-confirmacion').hide();
		},
		onOpen : function(){
			$('#modal-cancelar-visita .visita-folio').html(_modalCancelarVisita.folio);
			$('#confirmar-cancelar-visita').show();
			$('#cancelar-visita-confirmacion').hide();

		},
		onClose : function(){
			$('.linea-batch.active-settings').removeClass('active-settings');
			var $current = $('#cita-'+_modalCancelarVisita.id);
			if($current.length>0)
				scrollToElement($current);
			//Cuando cierre el modal si quieren hacer refresh hay que descomentar esto
			// if(processCompleted)
			// 	location.reload();
		}
	});

	function setModalActions(){
		$('#btn-cancelar-visita').click(function(){
			postCancelarVisita();
		});
	}

	function postCancelarVisita(){
		var form = '#modal-cancelar-visita .in-cont-mod';

		if(!formElementsModales['cancelarVisita']['sending']){

			formElementsModales['cancelarVisita']['sending'] = true;

			generalLoadingIcon(form, true);

			var postURL = Services.apiURL.cancelarVisita();

			$.post( postURL , { delete: _modalCancelarVisita.id })
			  .done(function( json ) {
			  	//Aquí le pusimos un delay de para simular que se tarda el servicio en regresar la info
			  	$('body').delay(8000);
				//En el servicio de cancelar la cita
				//Cuando sale el exito, se debe actualizar el html de la lista con la nueva información
				//Para que al cerrar el modal ya este actualizada

			  	Services.citas.cancelarVisitaSuccessCallback(json, form, _modalCancelarVisita);
			  	formElementsModales['cancelarVisita']['sending'] = false;
			  	generalLoadingIcon(form, false);
			  	processCompleted = true;

			  })
			  .fail(function( jqxhr, textStatus, error ) {
			  	Services.citas.cancelarVisitaFailCallback(error, form);
			  	formElementsModales['cancelarVisita']['sending'] = false;
			  	generalLoadingIcon(form, false);
			});
		}
	}

}
/**Fin modal cancelar cita**/

var _modalReprogramarCita = null;
var modalReprogramarCita = null;

/**Inicio modal cancelar cita**/
function initModalReprogramarCita(){
	var processCompleted = false;

	modalReprogramarCita = new modalesTelcel($('#modal-reprogramar-cita'),{
		onInit : function(){
			setModalActions();
			$('#confirmar-reprogramar-cita').hide();
			$('#reprogramar-cita-confirmacion').hide();
			$('#reprogramar-cita-24-hrs').hide();
		},
		onReset : function(){
			processCompleted = false;
			$('#confirmar-reprogramar-cita').hide();
		  	$('#reprogramar-cita-confirmacion').hide();
		  	resetFechaHoraCAC(false);
		  	$('#btn-reprogramar-cita').prop('disabled', true);
		},
		onOpen : function(){
			$('#modal-reprogramar-cita .date-picker').removeClass('open');
			$('#reprogramar-cita-confirmacion').hide();
			$('#reprogramar-cita-24-hrs').hide();
			$('#confirmar-reprogramar-cita').hide();
			consultarDateTime();
		},
		onClose : function(){
			$('.linea-batch.active-settings').removeClass('active-settings');
			removeHoraError($('#modal-reprogramar-cita').find('.time-picker .time-select'));
			var $current = $('#cita-'+_modalReprogramarCita.id);
			if($current.length>0)
				scrollToElement($current);
			//Cuando cierre el modal si quieren hacer refresh hay que descomentar esto
			// if(processCompleted)
			// 	location.reload();
		}
	});

	function consultarDateTime(){
		if(!formElementsModales['consultarDateTime']['sending']){

			formElementsModales['consultarDateTime']['sending'] = true;

			generalLoadingIcon('#modal-reprogramar-cita .in-cont-mod', true);

			var postURL = Services.apiURL.getCurrentDateTime();

			$.post( postURL , { })
			  .done(function( json ) {

			  	Services.citas.consultarDateTimeSuccessCallback(json,_modalReprogramarCita, getAvailableDateTimes);
			  	formElementsModales['consultarDateTime']['sending'] = false;
			  	generalLoadingIcon('#modal-reprogramar-cita .in-cont-mod', false);

			  	// getAvailableDateTimes(_modalReprogramarCita.fecha);
			  })
			  .fail(function( jqxhr, textStatus, error ) {

			  	Services.citas.consultarDateTimeFailCallback(error, '#modal-reprogramar-cita .in-cont-mod');
			  	formElementsModales['consultarDateTime']['sending'] = false;
			  	generalLoadingIcon('#modal-reprogramar-cita .in-cont-mod', false);

			});

		}
	}

	function setModalActions(){
		$('#btn-reprogramar-cita').click(function(){
			postReprogramarCita();
		});
	}

	function postReprogramarCita(){
		var form = '#modal-reprogramar-cita .in-cont-mod';

		if(!formElementsModales['reprogramarCita']['sending']){

			formElementsModales['reprogramarCita']['sending'] = true;

			generalLoadingIcon(form, true);

			var postURL = Services.apiURL.reprogramarCita();

			var data = {
				id : _modalReprogramarCita.id,
				fecha: $('#modal-reprogramar-cita #input-fecha-corte').val(),
				hora : $('#modal-reprogramar-cita #time-picker').val()
			};

			$.post( postURL , data )
			  .done(function( json ) {
			  	//Aquí le pusimos un delay de para simular que se tarda el servicio en regresar la info
			  	$('body').delay(8000);
				//En el servicio de reprogramar la cita
				//Cuando sale el exito, se debe actualizar el html de la lista con la nueva fecha
				//Para que al cerrar el modal ya este actualizada

			  	Services.citas.reprogramarCitaSuccessCallback(json, form, data );
			  	formElementsModales['reprogramarCita']['sending'] = false;
			  	generalLoadingIcon(form, false);
			  	processCompleted = true;

			  })
			  .fail(function( jqxhr, textStatus, error ) {
			  	Services.citas.reprogramarCitaFailCallback(error, form);
			  	formElementsModales['reprogramarCita']['sending'] = false;
			  	generalLoadingIcon(form, false);
			});
		}
	}

}
/**Fin modal reprogramar cita**/

var mapaCAC = (function () {

	var $mapa = $('#mapa-cac'),
	map = null,
	markers = [],
	userPosition = null,
	clientPositionMarker = null,
	$miUbicacionBtnContainer = $('#mi-ubicacion').parent().parent();

	function resizeMapa(){
		var center = map.getCenter();
		google.maps.event.trigger(map, 'resize');
		map.setCenter(center);
		generalLoadingIcon('.listado-cac-block', false);
	}

	function initMapa(){

		$miUbicacionBtnContainer.hide();
		generalLoadingIcon('.listado-cac-block', true);

		// Petición para obtener el script del mapa
		$.ajax({
		  url: 'https://maps.googleapis.com/maps/api/js?key=AIzaSyAsnL285ziiyoXYCuzmuo2zXJZoyQkU084&libraries=geometry&v=3.exp&#038;signed_in=true',
		  dataType: "script"
		}).
		// Al ser satisfactoria inicializamos el mapa
		done(function(){
			generateMapa();
			getLocation();
		}).
		fail(function(){
			throw new NuevoError("No se pudo cargar la API de Google Maps, algunas funciones no estarán disponibles en la página.");
		});

	}

	function generateMapa(){

		var myLatlng = new google.maps.LatLng(21.5121499,-109.8253327);

		var mapOptions = {
			scrollwheel: false,
			zoom: 4,
			center: myLatlng
		};

		map = new google.maps.Map(document.getElementById('mapa-cac'), mapOptions);
		map.setOptions({ minZoom: 14 });

		google.maps.event.addListenerOnce( map , 'idle', function(){
		    generalLoadingIcon('.listado-cac-block ', false);
		});
	}

	function getFilteredMarkers(markers){
		drawMarkers(markers);
	}

	function showCloserElements(){
		if(userPosition!=null)
		{
			drawUserMarker();
			closestMarkers();
		}
		else{
			getLocation();
		}
	}


	function cleanMarkers(){

		markers.forEach(function (marker, i) {
		     markers[i].setMap(null);
		});

		markers = [];

		$('.listado-cac-list >ul').html('');
	}

	function drawMarkers(markersT){
		cleanMarkers();

		var count = 0;
		var bounds = new google.maps.LatLngBounds();
		var newcenter;
		var zoomval = 4;
		var infowindow;
		var mapMarkers = markersT;

		mapMarkers.forEach(function(markerInfo) {

			var lat = markerInfo.latitude;
			var lng = markerInfo.longitude;
			var title = markerInfo.title;
			var info = markerInfo.description;

			if( lng && lat )
			{

				var cacHTML = ' <li class="li-cac flex-col-direction-mobile" data-cac="'+markerInfo.id+'" id="cac-'+markerInfo.id+'"> <div class="description flex-col-direction-mobile"> <div class="flex-col-direction-mobile"> <h4 class="title">'+title+'</h4> <p class="address"> '+info+'</p> </div></div> </li>';

				// <button type="button" class="blue-dark btn-elegir"  data-cac="'+markerInfo.id+'"><span class="text">Elegir</span> <span class="span-btn io-SliderRight"></span></button>
				$('.listado-cac-list >ul').append(cacHTML);

                var pin = 'pin.png';

                var myLatlng = new google.maps.LatLng(lat,lng);

  				var image = {
				    url: '../../assets/img/pointer.png',
				    scaledSize : new google.maps.Size(27, 45)
				 };

              	var marker = new google.maps.Marker({
	                position: myLatlng,
	                map: map,
	                title: title,
	                animation: google.maps.Animation.DROP,
	                icon:image
	              });


				marker.addListener('click', function() {
					//SELECCIONAR CAC
					$('#cac-'+markerInfo.id).trigger('click');
					CACcomponent.markerAction(markerInfo.id);

				});

				markers[count] = marker;

				bounds.extend(myLatlng);

				if(count==0){
                    newcenter =  myLatlng;
                }

                count++;
			}
		});

		setCenter(newcenter, zoomval);
	}

	function setCenter(center, zoom){

		map.setCenter(center);
		zoomChangeBoundsListener =
		google.maps.event.addListenerOnce(map, 'bounds_changed', function(event) {
			if (this.getZoom()){
				this.setZoom(zoom);
			}
		});

		setTimeout(function(){google.maps.event.removeListener(zoomChangeBoundsListener); }, 2000);
	}

	function getLocation(){
		if (navigator.geolocation)
			navigator.geolocation.getCurrentPosition(setPosition, handleErrorGeoLocation);
		else
			handleErrorGeoLocation();
	}

	function handleErrorGeoLocation(){
		$('.citas-cac-container').addClass('no-geolocation');
		$('#mi-ubicacion').addClass('no-geolocation');
		//HANDLE ERROR
	}

	function setPosition(position){

		$miUbicacionBtnContainer.show();

		userPosition = {
			lat: position.coords.latitude,
			lng: position.coords.longitude
		};

		drawUserMarker();
		$('#mi-ubicacion').trigger('click');
		closestMarkers();
	}

	function drawUserMarker(){
		$('.citas-cac-container').removeClass('no-geolocation');
		$('#mi-ubicacion').removeClass('no-geolocation');
		$('#ver-lista').addClass('active');


	    if(clientPositionMarker==null){
	    	var icon = {
	          url: "../../assets/img/location.png",
	          scaledSize: new google.maps.Size(12, 12),
	          origin: new google.maps.Point(0,0),
	          anchor: new google.maps.Point(0, 0)
		    };

		    clientPositionMarker = new google.maps.Marker({
				position: userPosition,
				map: map,
				title: '',
				icon : icon
			});
	    }

		map.setCenter(userPosition);
	}

	function closestMarkers(){
		$.getJSON( Services.apiURL.getCACs(), { position: userPosition })
		  .done(function( json ) {
		  	//checkDistance solo se van a mandar para entorno developers
		  	Services.citas.setCACClosestLocationSuccessCallback(json,getFilteredMarkers, checkDistance);
		  })
		  .fail(function( jqxhr, textStatus, error ) {
		  	Services.citas.setCACClosestLocationSuccessCallback({ success: false, data: null } ,getFilteredMarkers);
		});
	}

	function checkDistance(plat, plng){
		var p1 = new google.maps.LatLng(userPosition.lat,userPosition.lng),
		p2 = new google.maps.LatLng(plat, plng),
		distance = google.maps.geometry.spherical.computeDistanceBetween(p1, p2);

		if(distance<1700)
			return true;

		return false;
	}


	return{
		inicializar: function(){

			if($('#mapa-cac').length>0)
				initMapa();
		},

		mresizeMapa : resizeMapa,
		mgetUserLocation : getLocation,
		mgetFilteredMarkers : getFilteredMarkers,
		showCloserElements : showCloserElements
	}
})();

var CACcomponent = (function () {

	var Steps = null,
	isFirstChange = true,
	lineasTramites = [],
	validTramites = false,
	totalLineas = 0,
	totalTramites = 0,
	tramiteOptions = [],
	isVisita = $('#autogestion-form-citas').hasClass('only-visit-cac') ? true : false;

	var _modalConfirmarEliminar = {};
	var modalConfirmarEliminar = null;

	var municipiosByEstado = [];

	var cacUserData = null;

	if(isVisita)
		cacUserData = { type : 'visita', lineas : null };
	else
		cacUserData = { type : 'cita', lineas : null, sucursal : null, fecha : null, hora : null };

	function initmodalConfirmarEliminar(){

		var lastLine = false;

		modalConfirmarEliminar = new modalesTelcel($('#modal-confirmar-eliminar'),{
			onInit : function(){
				initActionsModalAuxiliar();
			},
			onReset : function(){
				// if($('#listado-confirmacion-autogestion .linea-batch input[type="checkbox"]:checked').length>0)
				// 	$('.listado-header-autogestion button').prop('disabled', false);
				// else
				// 	$('.listado-header-autogestion button').prop('disabled', true);

				// $('#modal-confirmar-eliminar .added-lines .div-nal').html('');
			},
			onOpen : function(){
				setModalData();
			}
		});

		function setModalData(){
			var meta = _modalConfirmarEliminar.meta;

			if(typeof meta !='undefined')
				$('#modal-confirmar-eliminar .txt-linea').html(meta.numero);
		}


		function initActionsModalAuxiliar(){

			$('#modal-confirmar-eliminar').on('click', '#btn-confirmar-eliminar', function(){

				removeLineasTramites();

				// if(lastLine){
				// 	var url = ( typeof $(this).data('redirect') != 'undefined' ? $(this).data('redirect') : homeURL );
				// 	lastLine = false;
				// 	window.location.href= url;
				// }
			});

		}

	}

	var formElements = {id: 'autogestion-form-citas', validator: null, sending: false };
	var $mainForm = null;

	function validateCACForm(){
		$mainForm = $('#autogestion-form-citas');
		disableSumbitButton($mainForm, true);
		formElements['validator'] =
			$mainForm.validate({
				ignore:"",
			  rules: {
				checkboxAutogestion : {
					required : true
				},
				nombre: {
					required: true,
					basicName: true,
					minlength: 3,
					maxlength: 40
				},
				numero : {
					digits: true,
					minlength: 10,
					maxlength: 10,
					required : true
				},
				email: {
					required: true,
					email: true
				}
			  },
			  messages: {
			  	numero: {
					required: "Ingresa un número de contacto.",
					digits: "Ingresa un número válido.",
					minlength: "Ingresa un número de 10 dígitos.",
					maxlength: "Ingresa un número de 10 dígitos."
				},
				email: {
					required: "Ingresa un correo electrónico.",
					email: "Ingresa un correo electrónico válido."
				},
				nombre: {
					required : "Ingresa el nombre de la persona autorizada.",
					basicName: "Este campo solo acepta letras, números, punto y espacios.",
					minlength: "El nombre debe contener al menos 3 caracteres.",
				   	maxlength : "El nombre no debe ser mayor a 40 caracteres."
				}
			   },
				errorPlacement: function(error, element) {
					var $parent = element.parent().parent().parent();
					if(element[0].name=='numero' || element[0].name=='email' || element[0].name=='nombre'){
				   		$('<div class="error-aux col-sm-7 col-xs-9 col-xs-offset-3 col-sm-offset-5"></div>').insertAfter( $parent );
				   		$parent.next('.error-aux').append(error);
					}
				}
				,
		        submitHandler: function(form) {
					if(!formElements['sending']){
						sendFormData(form);
			  		}
				}
		});

		checkThisValidForm();

		function sendFormData(form){

			// var loadingContainer = $('#modal-error-solicitud .form-ge-mod');
			// $('#redirect-txt').show();

			// generalLoadingIcon(loadingContainer, true);
			// modalErrorSolicitud.openModal();

			formElements['sending'] = true;
			$(form).find('button[type="submit"]').prop('disabled', true);

			var self = cacUserData;
			self.nombre = $('#nombre_cac').val();
			self.email = $('#email_cac').val();
			self.numero = $('#numero_cac').val();

			var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

			/**Quitar una vez en producción**/
			var sendTo = urlPOST;

			urlPOST = checkDevelopmentPostHTML(urlPOST);

			$.post(  urlPOST , self )
			.done(function( data ) {
			  	Services.citas.CACFormCallSuccess(self, form, modalErrorSolicitud, sendTo );
				formElements['sending'] = false;
				// generalLoadingIcon(loadingContainer, false);
			 })
			.fail(function( jqxhr, textStatus, error ) {
			  	//Mensaje de error del sistema
			  	Services.citas.CACFormCallFail(error, form);
			  	formElements['sending'] = false;
			});
		}
	}

	function checkThisValidForm(){

		$mainForm.find('input').on('keyup change input keydown', function () {
	        validateForm();
	    });

	    $mainForm.find('input[type="checkbox"], input[type="radio"]').on('change', function () {
	        validateForm();
	    });
	}

	function validateForm(){

		if (checkValidData() && $mainForm.validate().checkForm() && validTramites) {
	        $mainForm.find('.first-submit, button[type="submit"]').prop('disabled', false);
	    } else {
	       $mainForm.find('.first-submit, button[type="submit"]').prop('disabled', true);
	    }
	}

	function checkValidData(){
		for(key in cacUserData){
			if(cacUserData[key]==null || cacUserData[key]=='' || cacUserData[key]==0)
				return false;
		}

		return true;
	}

	function initLineasTramites(){
		var $mainContainer = $('#citas-lineas-tramites'),
		$mainContainerSingle = $('#citas-tramites'),
		currentLineasTramites = [];

		if($mainContainer.length>0){
			updateLineasTramites();
			setActions();
		}

		if($mainContainerSingle.length>0){
			updateLineaSingle();
			setActionsSingle();
		}

		function updateLineaSingle(){
			var linea = $('#lineas-hidden-input').val();
			updateUserData('lineas', linea);
		}

		function setActionsSingle(){

			$mainContainerSingle.on('change', 'input[type=checkbox]' , function (e) {

			    if ($mainContainerSingle.find('input[type=checkbox]:checked').length == 3)
			        $mainContainerSingle.find('input[type=checkbox]:not(:checked)').prop('disabled', true);
			    else
			    	$mainContainerSingle.find('input[type=checkbox]').prop('disabled', false);


			    var currentlyChecked = $mainContainerSingle.find('input[type=checkbox]:checked').length;

			    if(currentlyChecked>0){
			    	removeTramiteErrorSingle();
			    	validTramites = true;

			    	if(currentlyChecked>2)
			    		Steps.showStep(1);
			    	else if(currentlyChecked>0)
			    		Steps.showStep(1, false);

			    	if($('#mapa-cac').length>0){
			    		generalLoadingIcon('.listado-cac-block', true);
						getResizeMapa();
						$('.msg-no-geolocation').removeClass('hidden');
					}
			    }
			    else{
			    	validTramites = false;
			    	addTramiteErrorSingle();
			    }

			    updateTramites();

			});

			function updateTramites(){
				var tramites = [];

				$mainContainerSingle.find('input[type=checkbox]:checked').each(function(){
					var $cht = $(this);
					tramites.push($cht.val());
				});

				updateUserData('tramites', tramites);
			}

		}

		function addTramiteErrorSingle(){
			var error = '<label class="error error-tramite">Elige un tramite.</label>';

			if($('.error-tramite').length<1){
				$( error ).insertAfter( $mainContainerSingle );
			}

			validTramites = false;
		}

		function removeTramiteErrorSingle(){
			$('.error-tramite').remove();
		}

		function updateLineasTramites(){
			$mainContainer.find('.linea-batch').each(function(){
				var $linea = $(this),
				data = { id : (typeof $linea.attr('id')!='undefined' ? $linea.attr('id') : null ), meta : (typeof $linea.data('meta') != 'undefined' ? $linea.data('meta') : null )};

				if(data.id){
					lineasTramites[data.id] = data.meta;
					totalLineas++;
					totalTramites++;
				}
			});
		}

		function setActions(){
			$mainContainer.on('click', '.btn-delete', function(){
				var $btn = $(this),
				$container = $btn.closest('.linea-batch');

				if(modalConfirmarEliminar!=null){

					var id = $container.attr('id');

					if(lineasTramites[id] && (totalLineas-1)>0 ){
						_modalConfirmarEliminar = {id : id, 'meta':lineasTramites[id]};
						modalConfirmarEliminar.openModal();
					}

				}

			});

			$mainContainer.on('click', '.btn-agregar-tramite', function(){
				var $btn = $(this),
				$container = $btn.closest('.linea-batch');

				if(totalTramites<3){
					addTramite($container);
				}

			});

			$mainContainer.on('click', '.btn-delete-tramite', function(){
				var $btn = $(this),
				$container = $btn.closest('.content-item-block.extra'),
				$currentSelect = $container.closest('.tramite'),
				$linea = $container.closest('.linea-batch');
				$container.remove();
				totalTramites--;

				updateLineaSelectOptions($linea);

				var lineasData = [];
				lineasData = updateDataLineas();
				updateUserData('lineas', lineasData);

				if(totalTramites<3)
					$('.linea-batch .agregar-tramite-container').removeClass('hidden');

			});
		}
	}

	function checkTramitesToAdd($container){
		var $selects = $container.find('.tramite'),
		tramiteOptionsNot = [];

		$selects.each(function(){
			var $select = $(this);

			if($select.val()!='')
				tramiteOptionsNot.push($select.val());
		});

		return getSelect(tramiteOptionsNot);
	}

	function getSelect(selected)
	{
		var html = '';

		html = '<div class="col-sm-12 col-xs-12 content-item-block extra padding-0"> <div class="col-sm-pr-100 col-xs-12 flexbox h-align-center v-align-center tramite-container"> <div class="data-write slt"> <select class="tramite"> <option value="">Elige una opción</option>';

		$.each(tramiteOptions, function(i, tramite) {
			if($.inArray(tramite.value,selected)<0)
				html+='<option value="'+tramite.value+'">'+tramite.text+'</option>';
		});


		html+='</select> </div> </div><span class="icon io-Less btn-delete-tramite" title="Quitar"></span></div>';

		return html;
	}

	function addTramite($container){
		var $before = $container.find('.delete-container'),
		html = checkTramitesToAdd($container);

		totalTramites++;

		$( html ).insertBefore( $before );

		checkEmptyTramites();

		if(totalTramites==3)
			$('.linea-batch .agregar-tramite-container').addClass('hidden');
	}

	function checkEmptyTramites(){
		var $selects = $('#citas-lineas-tramites .linea-batch .tramite');

		$selects.each(function(){
			var $select = $(this);

			if($select.val()=='')
				addTramiteError($select);
		});

		validateForm();
	}

	function removeLineasTramites(){
		var aux = [];

		for (var key in lineasTramites) {
			if(!(key == _modalConfirmarEliminar.id))
				aux[key] = lineasTramites[key];
			else{
				totalLineas--;
				var tramites = $('#'+_modalConfirmarEliminar.id).find('.tramite').length;
				totalTramites -= tramites;
			}
		}

		lineasTramites = aux;

		if(totalLineas==1)
			$('.linea-batch .delete-container').addClass('hidden');

		if(totalTramites<3)
			$('.linea-batch .agregar-tramite-container').removeClass('hidden');

		$('#'+_modalConfirmarEliminar.id).remove();

		var lineasData = [];
		lineasData = updateDataLineas();
		updateUserData('lineas', lineasData);

		var $selected = $('#citas-lineas-tramites .tramite'),
		valid = true;

		$selected.each(function(){
			var $select = $(this);

			if($select.val()=='')
				valid = false;
		});

		validTramites = valid;
		var lineasData = [];

		if(valid){
			lineasData = updateDataLineas();
			Steps.showStep(1);
			if($('#mapa-cac').length>0){
				generalLoadingIcon('.listado-cac-block', true);
				getResizeMapa();
				$('.msg-no-geolocation').removeClass('hidden');
			}
		}

		modalConfirmarEliminar.closeModal();
	}

	function updateUserData(key, value){
		cacUserData[key] = value;
		validateForm();
	}

	function initFiltrado(){
		var currentEstado = 0;
		var currentMunicipio = 0;
		setActions();
		getEstados();


		function setActions(){

			$( "#cac-estado" ).change(function() {
				$('.no-close-cacs').addClass('hidden');
				onSelectChange();
				currentEstado = this.value;
			  	getMunicipios(this.value);
			  	filterMarkers();
			});

			$( "#cac-municipio" ).change(function() {
				$('.no-close-cacs').addClass('hidden');
				onSelectChange();
				currentMunicipio = this.value;
			  	filterMarkers();
			});
		}

		function addCACError(){
			var error = '<label class="error error-cac">Selecciona un Centro de Atención a Clientes.</label>';

			if($('.error-cac').length<1){
				$('.listado-cac-list').prepend(error);
			}
		}

		function removeCACError(){
			$('.error-cac').remove();
		}

		function onSelectChange(){
			$('.citas-cac-container').removeClass('no-geolocation');
			resetFechaHoraCAC(true);
			updateUserData('sucursal', null);
			addCACError();

			if(isFirstChange){
				if($('.listado-cac-block').hasClass('map-view-block')){
					$('#ver-mapa').removeClass('active');
					$('#ver-lista').addClass('active');
				}
				else{
					$('#ver-lista').removeClass('active');
					$('#ver-mapa').addClass('active');
				}

				isFirstChange = false;
			}
		}

		function filterMarkers(){

			$.getJSON( Services.apiURL.getCACs(), { estado: currentEstado, municipio: currentMunicipio })
			  .done(function( json ) {
			  	//callDrawMarkers({ success: true, data: json });

			  	Services.citas.setCACLocationSuccessCallback(json,callDrawMarkers);
			  })
			  .fail(function( jqxhr, textStatus, error ) {
			  	//callDrawMarkers({ success: false, data: null });
			  	Services.citas.setCACLocationSuccessCallback({ success: false, data: null } ,callDrawMarkers);
			});
		}

		function callDrawMarkers(data){
			mapaCAC.mgetFilteredMarkers(data);
		}

		function fillEstados(data){
			if(data.success){
				var select = $("#cac-estado");
				$.each(data.data.mexico.estado, function() {
				    select.append($("<option />").val(this.id).text(this.nombre));
				    // Llenar arreglo de municipios
				    municipiosByEstado[this.id] = this.municipios.municipio;
				});
			}
		}

		function fillMunicipios(data){
			if(data.success){
				var select = $("#cac-municipio");
				select.html('<option value="0">Elige el municipio</option>');
				$.each(data.data, function() {
				    select.append($("<option />").val(this.id).text(this.nombre));
				});
			}
		}

		function getEstados(){

			$.getJSON( Services.apiURL.getEstadosMunicipios(), {})
			  .done(function( json ) {
			  	fillEstados({ success: true, data: json });
			  })
			  .fail(function( jqxhr, textStatus, error ) {
			  	fillEstados({ success: false, data: null });
			});
		}

		function getMunicipios(i){

			// AQUÍ VA EL REGRESO DE MUNICIPIOS
			fillMunicipios({ success: true, data: municipiosByEstado[i] });
		}


	}

	function updateDataLineas(){
		var lineasData = [];

		for (var key in lineasTramites) {
			lineasTramites[key].tramites = [];
			$('#'+key).find('.tramite').each(function(){
				var $select = $(this).find(":selected");
				 lineasTramites[key].tramites.push($select.val());

			});

			lineasData.push(lineasTramites[key]);
		}

		return lineasData;

	}

	function addTramiteError($select){
		var $container = $select.closest('.tramite-container'),
		$block = $container.closest('.content-item-block'),
		error = '<label class="error error-tramite">Elige un tramite.</label>';

		if($container.find('.error-tramite').length<1){
			$block.addClass('has-error');
			$select.addClass('error');
			$container.append(error);
		}

		validTramites = false;
	}

	function removeTramiteError($select){
		var $container = $select.closest('.tramite-container'),
		$block = $container.closest('.content-item-block');

		$block.removeClass('has-error');
		$select.removeClass('error');
		$container.find('.error-tramite').remove();

	}


	function setTramitesOptions(){
		var select = $('#citas-lineas-tramites .linea-batch').find('.tramite')[0],
		$options = $(select).find('option');

		$options.each(function(){
			var $option = $(this);
			if($option.val()!='')
				tramiteOptions.push({value : $option.val(), text : $option.text()});
		});
	}

	function updateLineaSelectOptions($linea, selected){
		var checkSelected = (typeof selected != 'undefined' && selected != '' ? true : false);

		if(checkSelected){
			//Remove option from selects
			var $options = $linea.find('.tramite option[value="'+selected+'"]');

			$options.each(function(){
				var $option = $(this);

				if(!$option.is(':selected'))
					$option.remove();
			});
		}


		//Add previous option

		var $selects = $linea.find('.tramite'),
		tramiteOptionsNot = [];

		$selects.each(function(){
			var $select = $(this);
			if($select.val()!='')
				tramiteOptionsNot.push($select.val());
		});


		$selects.each(function(){
			var $select = $(this);

			$.each(tramiteOptions, function(i, tramite) {
				if($.inArray(tramite.value,tramiteOptionsNot)<0 && $select.find('option[value="'+tramite.value+'"]').length==0){
					var html='<option value="'+tramite.value+'">'+tramite.text+'</option>';
					$select.append(html);
				}
			});

		});

	}

	function setActions(){

		if($('#citas-lineas-tramites').length>0)
			setTramitesOptions();

		$('#citas-lineas-tramites').on('change', '.tramite', function(){
			var $selected = $('#citas-lineas-tramites .tramite'),
			valid = true,
			$currentSelect = $(this),
			$linea = $currentSelect.closest('.linea-batch');

			updateLineaSelectOptions($linea, $currentSelect.val());

			if($currentSelect.val()=='')
				addTramiteError($currentSelect);
			else
				removeTramiteError($currentSelect);

			$selected.each(function(){
				var $select = $(this);

				if($select.val()=='')
					valid = false;
			});

			validTramites = valid;
			var lineasData = [];

			if(valid){
				lineasData = updateDataLineas();
				Steps.showStep(1);
				if($('#mapa-cac').length>0){
					generalLoadingIcon('.listado-cac-block', true);
					getResizeMapa();
					$('.msg-no-geolocation').removeClass('hidden');
				}
			}

			updateUserData('lineas', lineasData);

		});


		$('.listado-cac-list').on( "click", '.li-cac', function(){
			$('.listado-cac-list li').removeClass('active');
			$(this).addClass('active');
			updateUserData('sucursal', $(this).data('cac'));
			updateUserData('fecha', null);
			resetFechaHoraCAC(true);

			addHoraError($('.time-picker .time-select'));
			updateUserData('hora', null);

			$('.error-cac').remove();
			getAvailableDateTimes($(this).data('cac'));
			Steps.showStep(2);
		});

		$('#ver-mapa').click(function(){
			$(this).removeClass('active');
			$('#ver-lista').addClass('active');
		  	$('.listado-cac-block').addClass('map-view-block');
		  	getResizeMapa();
		});

		$('#ver-lista').click(function(){
			$(this).removeClass('active');
			$('#ver-mapa').addClass('active');
		  	$('.listado-cac-block').removeClass('map-view-block');
		  	getResizeMapa();
		});

		$('#mi-ubicacion').click(function(){
			var $btn = $(this);

			$('.no-close-cacs').addClass('hidden');

			if($btn.hasClass('no-geolocation'))
				modalGeolocation.openModal();
			else{
				mapaCAC.showCloserElements();
				$('.listado-cac-block').addClass('map-view-block');
			  	getResizeMapa();
			  	$('#ver-mapa').removeClass('active');
			  	$('#ver-lista').addClass('active');
			}

		});

		$('.time-picker').bind('updateDataTiempos', function(e){
			e.stopPropagation();
			var $timepicker = $(this),
			date = $('.fecha-input').val();
			removeFechaError($('#input-fecha-corte'));
			updateSelectTiempos($timepicker);
			updateUserData('fecha', date);

			addHoraError($timepicker.find('.time-select'));
			updateUserData('hora', null);
		});

		$('.time-picker .time-select').change(function(){
			var $timepicker = $(this);

			if($timepicker.val()!=''){
				removeHoraError($timepicker);
				updateUserData('hora', $timepicker.val());
				Steps.showStep(3);
			}
			else{
				addHoraError($timepicker);
				updateUserData('hora', null);
			}
		});

	}

	function getResizeMapa(){
		mapaCAC.mresizeMapa();
	}

	function init(){
		if($('.citas-block').length>0){
			if($('#mapa-cac').length>0){
				mapaCAC.inicializar();
			}

			if($('#modal-confirmar-eliminar').length>0)
				initmodalConfirmarEliminar();

			initFiltrado();
			validateCACForm();
			initLineasTramites();

			setActions();
			var $steps = $('.citas-step');
			Steps = new setSteps($steps);
		}
	}

	return{
		inicializar : init,
		markerAction : function(cacId){
			// updateUserData('sucursal', cacId);
			// Steps.showStep(2);
		}
	}
})();

var misCitas = (function () {

	function init(){
		if($('#listado-citas').length>0)
			initListadoCitas();

		if($('.detalle-citas-block').length>0)
			initDetalleBlock();

		if($('.date-picker').length>0 && !initializedDate)
			generalDatePicker.inicializar();
	}

	function initDetalleBlock(){
		var $element = $('#main-detalle-citas');
		_modalReprogramarCita = _modalCancelarCita = _modalCancelarVisita = (typeof $element.data('meta')!= 'undefined' ? $element.data('meta') : null);

		initActions();

		function initActions(){

			$('.detalle-citas-block').on('click', '.btn-reprogramar-cita', function(e){
				e.stopPropagation();
				if(_modalReprogramarCita!=null)
					modalReprogramarCita.openModal();

			});

			$('.detalle-citas-block').on('click', '.btn-cancelar-cita', function(e){
				e.stopPropagation();

				if(_modalCancelarCita!=null)
					modalCancelarCita.openModal();

			});

			$('.detalle-citas-block').on('click', '.btn-cancelar-visita', function(e){
				e.stopPropagation();

				if(_modalCancelarVisita!=null)
					modalCancelarVisita.openModal();

			});

			$('.time-picker').bind('updateDataTiempos', function(e){
				e.stopPropagation();
				var $timepicker = $(this);
				updateSelectTiempos($timepicker);
				addHoraError($timepicker.find('.time-select'));
				$('#btn-reprogramar-cita').prop('disabled',true);
			});

			$('.time-picker .time-select').change(function(){
				var $timepicker = $(this),
				$datepicker = $('#input-fecha-corte');

				if($timepicker.val()!=''){
					removeHoraError($timepicker);

					if($datepicker.val()!='')
						$('#btn-reprogramar-cita').prop('disabled',false);
				}
				else{
					addHoraError($timepicker);
					$('#btn-reprogramar-cita').prop('disabled',true);
				}
			});


		}
	}

	function initListadoCitas(){

		var $listaCitas =  $('#listado-citas');
		generarListadoInicial();
		initActions();


		function initActions(){

			generalCheckBoxAll.inicializar();

			$('#listado-citas').on('click', '.btn-open-general-config', function(e){
				e.stopPropagation();
				var $element = $(this).closest('.linea-batch');
				$('.linea-batch').removeClass('active-settings');

				$('body').addClass('settings-open');
				$element.addClass('active-settings');

			});


			$('#listado-citas').on('click', '.btn-close-general-config', function(e){
				e.stopPropagation();
				var $element = $(this).closest('.linea-batch');
				$element.removeClass('active-settings');
				$('body').removeClass('settings-open');
			});

			$('#listado-citas').on('click', '.btn-cancelar-cita', function(e){
				e.stopPropagation();
				var $element = $(this).closest('.linea-batch');
				_modalCancelarCita = (typeof $element.data('meta')!= 'undefined' ? $element.data('meta') : null);

				if(_modalCancelarCita!=null)
					modalCancelarCita.openModal();

			});

			$('#listado-citas').on('click', '.btn-cancelar-visita', function(e){
				e.stopPropagation();
				var $element = $(this).closest('.linea-batch');
				_modalCancelarVisita = (typeof $element.data('meta')!= 'undefined' ? $element.data('meta') : null);

				if(_modalCancelarVisita!=null)
					modalCancelarVisita.openModal();

			});

			$('#listado-citas').on('click', '.btn-reprogramar-cita', function(e){
				e.stopPropagation();
				var $element = $(this).closest('.linea-batch');
				_modalReprogramarCita = (typeof $element.data('meta')!= 'undefined' ? $element.data('meta') : null);

				if(_modalReprogramarCita!=null)
					modalReprogramarCita.openModal();

			});

			$('body').on('click', '.settings-ri .cont-set-ri', function(e){
				e.stopPropagation();
			});

		}


		function generarListadoInicial(){

			var $elements = $listaCitas.find('.linea-batch');
			var total = $elements.length;

			$elements.each(function (index, value) {
			  var meta = ( typeof $(this).data('meta') != 'undefined' ? $(this).data('meta') : null );
			  var $element = $(this);

				if(meta != null){
					var elemento = generarHTMLCitas(meta, index);
					$element.html(elemento);
					$element.attr('id', 'cita-'+meta.id);
				}
			});
		}

		function generarHTMLCitas(meta, index){
			var html = '';

			var arrLineas, lineas;

			arrLineas = (typeof meta.lineas != 'undefined' ? meta.lineas.split('|') : [] );

			lineas = '';
			$.each(arrLineas, function(key, d) {
		  		lineas+= '<span title="'+d+'">'+d+'</span>';
			});

			html = '<div class="col-sm-pr-100 col-xs-12 content-item-block '+(meta.estatus == 0 ? 'item-cancelado' : '')+'"><div class="col-sm-pr-15 col-xs-12 flexbox"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Número de folio:</p> <p class="flexbox v-align-center" title="'+meta.folio+'">'+meta.folio+'</p> </div><div class="col-sm-pr-15 col-xs-12 flexbox"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Linea(s):</p> <p class="flexbox v-align-center cita-lineas">'+lineas+'</p> </div><div class="col-sm-pr-15 col-xs-12 flexbox"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Se autorizo a:</p> <p class="flexbox v-align-center" title="'+meta.autorizado+'">'+meta.autorizado+'</p> </div><div class="col-sm-pr-20 col-xs-12 flexbox"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Tipo de trámite:</p> <p class="flexbox v-align-center all-p" title="'+meta.tramite+'">'+meta.tramite+'</p> </div><div class="col-sm-pr-25 col-xs-12 flexbox"> <p class="mobile-only hidden-sm hidden-md hidden-lg">Cita:</p> <p class="flexbox v-align-center all-p cita-detalle">'+(meta.estatus == 1 ? ( meta.tipo == 1 ? 'Cita agendada el '+meta.fecha+' a las '+meta.hora : 'Visita abierta con vigencia hasta el '+meta.fecha) : 'Cancelada')+'</p> </div><div class="col-sm-pr-10 col-xs-12 general-group-options-container flexbox hidden-xs">'+(meta.estatus == 1 ? '<div class="icon-container"> <button class="simple btn-open-general-config" type="button" title="Configuración"> <span class="icon io-Gear"></span> <p>Configuración</p> </button> </div> <div class="col-sm-12 settings-ri"> <div class="col-sm-12 cont-set-ri"> <p class="col-sm-12 title-ri"> <span class="in-text-ri">Configuración</span> <button class="simple icon-text-ri btn-close-general-config" title="Cerrar"> <span class="icon io-Close"></span> </button> </p> <div class="col-sm-12 submenu-ri"> <div class="first-bloq-ri"> <a href="'+meta.detalle+'" class="btn simple btn-ver-detalle"> <span class="icon io-notes"></span> <span class="in-text-fbr">Ver detalle</span> </a> '+(meta.tipo==1 ? '<button class="simple btn-reprogramar-cita" type="button"> <span class="icon io-Month"></span> <span class="in-text-fbr">Reprogramar</span> </button><button class="simple btn-cancelar-cita" type="button"> <span class="icon io-NoEntry"></span> <span class="in-text-fbr">Cancelar</span> </button>' : '')+'</div> </div> </div> </div> ': '')+'</div>'+(meta.estatus == 1 && meta.tipo==1 ? '<div class="btn-container btn-container-2-btns col-xs-12 hidden-sm hidden-md hidden-lg"><div class="col-xs-6 btn-reprogramar-block"><button type="button" class="btn-reprogramar-cita orange">Reprogramar cita</button></div><div class="col-xs-6 btn-cancelar-block"><button type="button" class="btn-cancelar-cita">Cancelar cita</button></div></div>' : '')+'<div class="btn-container col-xs-12 hidden-sm hidden-md hidden-lg"><div class="btn-ver-detalle-block col-xs-12">'+(meta.estatus == 0 ? '<button type="button" class="btn-ver-detalle" disabled><span class="text">Ver detalle</span><span class="icon io-AccordionRightNeg"></span></button>' : '<a href="'+meta.detalle+'" class="btn-ver-detalle"><span class="text">Ver detalle</span><span class="icon io-AccordionRightNeg"></span></a>')+'</div></div></div> ';

			return html;

		}

	}

	return{
		inicializar : init
	}

})();

function addFechaError($input){
	var $container = $input.closest('.date-picker'),
	$block = $container.closest('.date-picker-container'),
	$inputContainer = $input.closest('.input'),
	error = '<label class="error error-fecha">Elige una fecha.</label>';

	if($container.find('.error-fecha').length<1){
		$block.addClass('has-error');
		$inputContainer.addClass('error');
		$container.append(error);
	}

}

function removeFechaError($input){
	var $container = $input.closest('.date-picker'),
	$block = $container.closest('.date-picker-container'),
	$inputContainer = $input.closest('.input');

	$block.removeClass('has-error');
	$inputContainer.removeClass('error');
	$container.find('.error-fecha').remove();

}

function addHoraError($select){
	var $container = $select.closest('.time-picker'),
	$block = $container.closest('.time-picker-container'),
	error = '<label class="error error-hora">Elige una hora.</label>';

	if($container.find('.error-hora').length<1){
		$block.addClass('has-error');
		$select.addClass('error');
		$container.append(error);
	}

}

function removeHoraError($select){
	var $container = $select.closest('.time-picker'),
	$block = $container.closest('.time-picker-container');

	$block.removeClass('has-error');
	$select.removeClass('error');
	$container.find('.error-hora').remove();

}

function updateSelectTiempos($timepicker){
	var date = $('.fecha-input').val(),
	$timeSelect = $timepicker.find('.time-select');

	$timeSelect.prop('disabled', false);

	$('.time-select').html('<option value="">Elige la hora</option>');

	if(typeof datesJSON[date] != 'undefined' && datesJSON[date].length>0)
		drawOptions();
	else
		modalSinHorarios.openModal();

	function drawOptions(){
	  	$.each(datesJSON[date], function(key, d) {
	  		$('.time-select').append('<option value="'+d+'">'+d+'</option>');
		});
	}
}

function getAvailableDateTimes(cacId){
	$.getJSON( Services.apiURL.getCACAvailableDateTimes(), { id: cacId , range: dateRange })
	  .done(function( json ) {
	  	datesJSON = Services.citas.getCACAvailableDateTimesSuccessCallback(json, dateRange);
	  })
	  .fail(function( jqxhr, textStatus, error ) {
	  	//callDrawMarkers({ success: false, data: null });
	  	Services.citas.getCACAvailableDateTimesFailResponse();
	});
}

function resetFechaHoraCAC(showErrors){

	if(showErrors)
		addFechaError($('#input-fecha-corte'));

	$('#time-picker').prop('disabled', true);
	$('#time-picker').html('<option value="">Elige la hora</option>');
  	$('.date-picker .calendar').datepicker( "setDate" , null );
  	$('#input-fecha-corte').val('');
  	$('.date-picker .fecha-corte').html('');
}

if($('#modal-error-solicitud').length>0)
	initModalErrorSolicitud();

if($('#modal-geolocation').length>0)
	initModalGeolocation();

if($('#modal-sin-horarios').length>0)
	initModalSinHorarios();

if($('#modal-cancelar-cita').length>0)
	initModalCancelarCita();

if($('#modal-cancelar-visita').length>0)
	initModalCancelarVisita();

if($('#modal-reprogramar-cita').length>0)
	initModalReprogramarCita();
var adendum = (function(){

	var elementsForm = {
		id : null,
		validator : null,
		sending: false
	};

	var formElementsModales = {
		'descargarFacturas': {id: null, validator: null, sending: false }
	};

	var _modalDescargarFacturas = {
		data : [],
		allChecked : false
	};

	var modalDescargarFacturas = null;
	var $listaAdendum = $('#listado-adendum'),
	$singleForm = $('#adendum-form-single'),
	$masivoForm = $('#adendum-form'),
	$allForm = $('#form-all-adendum');

	function init(){
		if($listaAdendum.length>0)
			generarListadoConfirmacionInicial();

		if($singleForm.length>0)
			initSingleForm();

		if($masivoForm.length>0)
			initMasivoForm();

		if($allForm.length>0)
			initAllForm();

		if($('#modal-descargar').length>0)
			initModalDescargarFacturas();

		setActionsGenerales();

	}

	function setActionsGenerales(){
		$('body').on('click', '.btn-general-solicitud-descarga', function(){
			//Aquí hay que tener en la variable el post de las facturas que se quieren
			_modalDescargarFacturas = {data: []};
			if(modalDescargarFacturas!=null)
				modalDescargarFacturas.openModal();
		});
	}

	function initModalDescargarFacturas(){
		var $titleP = $('#modal-descargar .heading-mod .title-mod p'),
		titleBefore = ( typeof $titleP.data('before') != 'undefined' ? $titleP.data('before') : null ),
		titleAfter = ( typeof $titleP.data('after') != 'undefined' ? $titleP.data('after') : null ),
		emailDefault = '',
		$input = $('#modal-descargar').find('input[name="email"]');

		validateForm();

		modalDescargarFacturas = new modalesTelcel($('#modal-descargar'),{
			onInit : function(){
				$('#descargar-facturas-confirmacion').hide();
				emailDefault = $input.val();
			},
			onReset : function(){
				removeGeneralError();
				$('#form-confirmar-descargar-facturas').show();
			  	$('#descargar-facturas-confirmacion').hide();
			  	resetMainForm();
			},
			onOpen : function(){
				if(titleBefore!=null)
					$titleP.html(titleBefore);
				$('#descargar-facturas-confirmacion').hide();

				var $form = $('#form-confirmar-descargar-facturas');
				disableSumbitButton($form, false);

			}
		});

		function validateForm(){
			var $form = $('#form-confirmar-descargar-facturas');

			disableSumbitButton($form, true);

			formElementsModales['descargarFacturas']['validator'] = $form.validate({
				  rules: {
					email: {
					  required: false,
					  email: true
					}
				  },
			  	messages: {
					 email: {
					   required: "Ingresa un correo electrónico.",
					   email: "Ingresa un correo electrónico válido."
					 }
			   },
			   errorClass : "error-dd error",
				submitHandler: function(form) {

					// handleErrorTooltip(false);
					if(!formElementsModales['descargarFacturas']['sending']){

						formElementsModales['descargarFacturas']['sending'] = true;

						$(form).find('button[type="submit"]').prop('disabled', true);

						var self = $(form).serialize();

						generalLoadingIcon(form, true);

						var data = { success: true, data: [] };


						$.post( postURL , { data: self, data: _modalDescargarFacturas })
						  .done(function( json ) {
						  	Services.adendum.descargarFacturasSuccessCallback(json, form, { element : $titleP, text : titleAfter } );
						  	formElementsModales['descargarFacturas']['sending'] = false;
						  	generalLoadingIcon(form, false);

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	Services.adendum.descargarFacturasFailCallback(form, error);
						  	formElementsModales['descargarFacturas']['sending'] = false;
						  	generalLoadingIcon(form, false);
						});

					}

				}
			});

			checkGeneralValidForm($form);

		}

		function removeGeneralError(){
			$('#modal-descargar .system-error-msg').remove();
			$('#modal-descargar .has-system-error').removeClass('has-system-error');
		}

		$('#modal-descargar').on('click', '#btn-r-descargar-facturas', function(){
			removeGeneralError();
			$('#form-confirmar-descargar-facturas').submit();
		});

		function resetMainForm(){
			$input.removeClass('error error-dd');
			$input.val(emailDefault);

			if(formElementsModales['descargarFacturas']['validator']){
				formElementsModales['descargarFacturas']['validator'].resetForm();
			}
		}
	}

	//FORMULARIO ADENDUM ALL
	function initAllForm(){

		initActions();
		validateMainForm();

		function validateMainForm(){

			disableSumbitButton($allForm, true);


			$allForm.submit(function(e){
				e.preventDefault();
				if(!elementsForm['sending']){
					sendFormData();
		  		}
			});

			function sendFormData(){
				var form = '#form-all-adendum';
				elementsForm['sending'] = true;
				$allForm.find('button[type="submit"]').prop('disabled', true);

				var self = $allForm.serialize();

				var urlPOST = ( $allForm.prop('action') == '' ? postURL : $allForm.prop('action') ) ;

				/**Quitar una vez en producción y aqui solo checamos si es una línea en development para mandar a otra liga**/
				var sendTo = urlPOST;

				urlPOST = checkDevelopmentPostHTML(urlPOST);

				$.post(  urlPOST , self )
				.done(function( data ) {
				  	Services.adendum.allCallSuccess(data, form, sendTo);
					elementsForm['sending'] = false;
				 })
				.fail(function( jqxhr, textStatus, error ) {
				  	//Mensaje de error del sistema
				  	Services.adendum.allCallFail(error, form);
				  	elementsForm['sending'] = false;
				});
			}
		}

		function initActions(){
			$('.reset-form-all-adendum').click(function(){
				resetMainForm();
			});
		}

		function resetMainForm(){
			$allForm.find('button[type="submit"]').prop('disabled', false);
		}

	}
	//FIN FORMULARIO ADENDUM ALL

	//FORMULARIO ADENDUM MASIVO
	function initMasivoForm(){

		var tipoIngreso = null;

		initActions();
		validateMainForm();

		function validateMainForm(){

			disableSumbitButton($masivoForm, true);

			elementsForm['validator'] =
				$masivoForm.validate({
					  rules: {
						archivo: {
							extension: "xls",
							filesize: 10000000
						}
					  },
					  messages: {
						 archivo: {
						   required: "Ingresa un archivo de 10 MB máximo.",
						   extension: "Ingresa un archivo con extensión: .xls",
						   filesize: "Ingresa un archivo de 10 MB máximo."
						 }
					   },
						errorClass : "error-dd error",
						errorElement : 'div',
						errorPlacement: function(error, element) {
							var elementInput = element[0];
							if(element[0]['id']==='archivo' && $(elementInput).val() != ''){
								$('.lineas-archivo .extra-info').hide();
								error.appendTo( $('.lineas-archivo .add-lines-ge-mod' ));
								element.parent().addClass('error');

							}
						},
						success: function ($error) {
							if($error.length>0 && $('#archivo').val() != ''){
								$('.lineas-archivo .extra-info').hide();
								$('.lineas-archivo .file.error' ).removeClass('error');
				   				$error.remove();
							}

				        },
				        submitHandler: function(form) {
							if(!elementsForm['sending']){
								sendFormData(form);
					  		}
						}
				});

				function sendFormData(form){
					elementsForm['sending'] = true;
					$(form).find('button[type="submit"]').prop('disabled', true);

					var self = $(form).serialize();

					var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

					/**Quitar una vez en producción y aqui solo checamos si es una línea en development para mandar a otra liga**/
					var sendTo = ( (ingresarLineasComponentTotal ==1 && is_mobile() && typeof $(form).data('actionmobile') != 'undefined') ? $(form).data('actionmobile') : urlPOST);

					urlPOST = checkDevelopmentPostHTML(urlPOST);

					$.post(  urlPOST , self )
					.done(function( data ) {
					  	Services.adendum.masivoAdendumCallSuccess(data, form, sendTo, showInvalidErrorArchivo );
						elementsForm['sending'] = false;
					 })
					.fail(function( jqxhr, textStatus, error ) {
					  	//Mensaje de error del sistema
					  	Services.adendum.masivoAdendumCallFail(error, form);
					  	elementsForm['sending'] = false;
					});
				}
		}


		function validateFormData(){

			var dataLineas = [];
			var lineasValid = false;
			//var dataArchivo = ingresarLineasComponent.getDataArchivo();

			var dataType = ingresarLineasComponent.getType();

			if(dataType === '.componente-lineas-block .lineas-autocomplete')
				dataLineas = ingresarLineasComponent.getDataAutocomplete();
			else if(dataType === '.componente-lineas-block .lineas-arbol')
				dataLineas = ingresarLineasComponent.getDataArbol();
			else
				dataLineas.push(null);

			if(dataLineas.length>0 && $masivoForm.valid())
				lineasValid = true;

	    	$('#lineas-hidden-input').val(JSON.stringify(dataLineas));


			if(lineasValid)
				return true;

			return false;
		}


		//Simular error de que es invalido el archivo
		function showInvalidErrorArchivo(){
			var msg = 'Este archivo está dañado o es ilegible, intenta con un nuevo archivo.';

			$('#archivo-invalido').remove();
			$('.lineas-archivo .extra-info').hide();
			$('.lineas-archivo .add-lines-ge-mod' ).append('<div class="error-dd error" id="archivo-invalido">'+msg+'</div>');
			$('#archivo').parent().addClass('error');

			$masivoForm.find('button[type="submit"]').prop('disabled', true);
		}

		function initActions(){

			/**
				Cuando se esconda el step 2
			**/

			var fullReset = false;

			$('#componente-ingresar-lineas .btn-al').on('click', function(event) {
				fullReset = true;
				resetMainForm();
			});

			$('#autogestion-paso-2').on('hide', function(event) {
				var target = $(event.target).attr('id');
				if(target==='autogestion-paso-2' && fullReset)
			      resetMainForm();

			  	$masivoForm.find('button[type="submit"]').prop('disabled', true);

			  	fullReset = false;
			});

			$('#autogestion-paso-2').on('show', function(event) {
				var target = $(event.target).attr('id');

				if(target==='autogestion-paso-2')
					$masivoForm.find('button[type="submit"]').prop('disabled', !validateFormData());
			});

			$('.reset-adendum-form').click(function(){
				$('#autogestion-paso-2').hide();
				if(typeof ingresarLineasComponent != 'undefined')
					ingresarLineasComponent.reset();

			});


		}

		function resetMainForm(){

			$masivoForm.find("input[type=text], input[type=email], input[type=password], select").val("");
			$masivoForm.find('button[type="submit"]').prop('disabled', true);

			if(elementsForm['validator']){
				elementsForm['validator'].resetForm();
			}
		}

	}
	//FIN FORMULARIO ADENDUM MASIVO

	function initSingleForm(){
		$singleForm.submit(function(e){
			e.preventDefault();
			if(!elementsForm['sending'])
				sendFormData();
		});

		function sendFormData(){
			var form = '#adendum-form-single';
			elementsForm['sending'] = true;
			$singleForm.find('button[type="submit"]').prop('disabled', true);
			var self = $singleForm.serialize();
			var urlPOST = ( $singleForm.prop('action') == '' ? postURL : $singleForm.prop('action') ) ;

			/**Quitar una vez en producción**/
			var sendTo = urlPOST;

			urlPOST = checkDevelopmentPostHTML(urlPOST);

			$.post(  urlPOST , self )
			.done(function( data ) {
			  	Services.adendum.singleAdendumCallSuccess(data, form, sendTo );
				elementsForm['sending'] = false;
				$singleForm.find('button[type="submit"]').prop('disabled', false);

			 })
			.fail(function( jqxhr, textStatus, error ) {
			  	//Mensaje de error del sistema
			  	Services.adendum.singleAdendumCallFail(error, form);
			  	elementsForm['sending'] = false;
			  	$singleForm.find('button[type="submit"]').prop('disabled', false);
			});
		}
	}

	function generarListadoConfirmacionInicial(){

		var $elements = $listaAdendum.find('.linea-batch');
		var total = $elements.length;

		$elements.each(function (index, value) {
		  var meta = ( typeof $(this).data('meta') != 'undefined' ? $(this).data('meta') : null );
		  var $element = $(this);

			if(meta != null){
				var elemento = generarHTMLAdendum(meta, index);
				$element.html(elemento);
				// bindElementActions();

			}
		});
	}

	function generarHTMLAdendum(meta, index){
		var html = '';

		html = '<div class="col-sm-pr-100 col-xs-12 content-item-block" data-index="'+index+'"> <div class="col-xs-12 col-sm-pr-10"><p class="label">Región:</p> <p class="p-value" title="'+meta.region+'">'+meta.region+'</p></div><div class="col-xs-12 col-sm-pr-15"><p class="label">Cuenta:</p> <p class="p-value" title="'+meta.cuenta+'">'+meta.cuenta+'</p></div><div class="col-xs-12 col-sm-pr-15"><p class="label">Número:</p> <p class="p-value" title="'+meta.numero+'">'+meta.numero+'</p></div><div class="col-xs-12 col-sm-pr-15 flexbox imei-extra-detail"><p class="label">Equipo:</p> <div class="show-more-details-container col-xs-6 col-sm-12"><p class="p-value" title="'+meta.equipo+'">'+meta.equipo+'</p><div class="icon io-info show-more-details"> <div class="triangle-tooltip"> <div class="col-sm-12"> <div class="col-xs-12 col-sm-12 extra-mob-dt-ls flexbox"> <p class="txt-300" title="'+meta.imei+'">IMEI: <span class="txt-100">'+meta.imei+'</span></p> </div> </div> </div> </div></div></div><div class="col-xs-12 col-sm-pr-15"><p class="label">Plan:</p> <p class="p-value" title="'+meta.plan+'">'+meta.plan+'</p></div><div class="col-xs-12 col-sm-pr-15"><p class="label">Plazo:</p> <p class="p-value" title="'+meta.plazo+'">'+meta.plazo+'</p></div><div class="col-xs-12 col-sm-pr-15 flexbox imei-extra-detail"><p class="label">Fecha de término:</p> <div class="show-more-details-container col-xs-6 col-sm-12"><p class="p-value" title="'+meta.termino+'">'+meta.termino+'</p></div></div></div>';


		return html;

	}


	return{
		inicializar: init
	}
})();
var cargaMasivaGrupos = (function(){
	var $treeLineas = $('#tree-lineas'),
	elementsForm = {
		id : null,
		validator : null,
		sending: false
	};

	var modalRevertir = null,
	$arbolData = $('#v-arbol-data'),
	confirmarRevertir = false;

	function initModalRevertir(){

		modalRevertir = new modalesTelcel($('#modal-revertir'),{
			onInit : function(){
				setActions();
				setModalData();

			},
			onReset : function(){
			},
			onOpen : function(){
			}
		});

		function setActions(){
			$('#btn-confirmar-revertir').click(function(){
				confirmarRevertir = true;
				$('#form-carga-masiva-anterior').submit();
			});
		}

		function setModalData(){
			var date = $arbolData.data('date'),
			available = $arbolData.data('available');

			$('.v-arbol-date').html(date);
			$('.v-arbol-date-last').html(available);
		}

	}

	var modalNuevaEstructura = null,
	confirmarNuevaEstructura = false;

	function initModalNuevaEstructura(){

		modalNuevaEstructura = new modalesTelcel($('#modal-nueva-estructura'),{
			onInit : function(){
				setActions();

			},
			onReset : function(){
			},
			onOpen : function(){
			}
		});

		function setActions(){
			$('#btn-confirmar-nueva-estructura').click(function(){
				confirmarNuevaEstructura = true;
				$('#form-carga-masiva').submit();
			});
		}

	}

	function init(){
		if($treeLineas.length>0)
			initArbol();

		if($('#autogestion-form').length>0)
			initFormularioCargaMasiva();

		if($('#autogestion-form-confirmar').length>0)
			initFormularioCargaMasivaConfirmacion();

		if($('#modal-revertir').length>0)
			initModalRevertir();

		if($('#modal-nueva-estructura').length>0)
			initModalNuevaEstructura();

	}

	//Simular error de que es invalido el archivo
	function showInvalidErrorArchivo(){
		var msg = 'Este archivo está dañado o es ilegible, intenta con un nuevo archivo.';

		$('#archivo-invalido').remove();
		$('.lineas-archivo .extra-info').hide();
		$('.lineas-archivo .add-lines-ge-mod' ).append('<div class="error-dd error" id="archivo-invalido">'+msg+'</div>');
		$('#archivo').parent().addClass('error');

		$('#autogestion-form').find('button[type="submit"]').prop('disabled', true);
	}

	//FORMULARIO Carga Masiva
	function initFormularioCargaMasiva(){

		var $mainForm = $('#autogestion-form');

		var tipoIngreso = null;

		initActions();
		validateMainForm();

		function validateMainForm(){

			disableSumbitButton($mainForm, true);

			elementsForm['validator'] =
				$mainForm.validate({
					  rules: {
						archivo: {
							required : {
								depends: function(element) {
									var motivo = $mainForm.find('.motivo-autogestion:checked').val();

				                	return motivo == 'estructura-nueva';
				                }
							},
							extension: "xls",
							filesize: 10000000
						},
						motivoAutogestion: {
							required: true
						}
					  },
					  messages: {
						 archivo: {
						   required: "Ingresa un archivo de 10 MB máximo.",
						   extension: "Ingresa un archivo con extensión: .xls",
						   filesize: "Ingresa un archivo de 10 MB máximo."
						 },
						 motivoAutogestion: {
						   required: "Selecciona un motivo.",
						 }
					   },
						errorClass : "error-dd error",
						errorElement : 'div',
						errorPlacement: function(error, element) {
							var elementInput = element[0];
							if(element[0]['id']==='archivo'){
								$('.lineas-archivo .extra-info').hide();
								error.appendTo( $('.lineas-archivo .add-lines-ge-mod' ));
								element.parent().addClass('error');

							}
						},
						success: function ($error) {
							if($error.length>0 && $('#archivo').val() != ''){
								$('.lineas-archivo .extra-info').hide();
								$('.lineas-archivo .file.error' ).removeClass('error');
				   				$error.remove();
							}
				        },
				        highlight : function(element, errorClass){
				        	var $element = $(element);
				        	if($element.attr('id')==='archivo' && $element.val() == ''){
				        		$('.lineas-archivo .extra-info').hide();
								$element.parent().addClass('error');
				        	}
				        },
				        submitHandler: function(form) {
							if(!elementsForm['sending']){
								sendFormData(form);
					  		}
						}
				});

				checkGeneralValidForm($mainForm);

				function sendFormData(form){
					elementsForm['sending'] = true;
					$(form).find('button[type="submit"]').prop('disabled', true);

					var self = $(form).serialize();

					var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

					/**Quitar una vez en producción y aqui solo checamos si es una línea en development para mandar a otra liga**/
					var sendTo = urlPOST;
					urlPOST = checkDevelopmentPostHTML(urlPOST);

					$.post(  urlPOST , self )
					.done(function( data ) {
					  	Services.gestionGrupos.cargaMasivaCallSuccess(data, form, sendTo, showInvalidErrorArchivo );
						elementsForm['sending'] = false;
					 })
					.fail(function( jqxhr, textStatus, error ) {
					  	//Mensaje de error del sistema
					  	Services.gestionGrupos.cargaMasivaCallFail(error, form);
					  	elementsForm['sending'] = false;
					});
				}
		}


		function initActions(){

			/**
				Setea la info del Motivo
			**/
			var $lastStep = $('.carga-masiva-last-step');
			$('.motivo-autogestion').change(function() {
				var $checkbox = $(this);
				if(typeof ingresarLineasComponent != 'undefined')
					ingresarLineasComponent.reset();
				/**Quitar una vez en producción solo es para propositos de development y simular**/
				updateFormPostURL($checkbox.val());

				if($('.motivo-autogestion:checked').length>0){
					var current = $checkbox.val(),
					btntext = (typeof $checkbox.data('btn') != 'undefined' ? $checkbox.data('btn') : 'Subir archivo');

					if(current=='estructura-anterior')
						$lastStep.addClass('revertir-estructura');
					else
						$lastStep.removeClass('revertir-estructura');

					$('#autogestion-btn').html(btntext);
					$lastStep.addClass('active');
				}
				else
					$lastStep.removeClass('active');
			});

		}

		function resetMainForm(){

			$mainForm.find("input[type=text], input[type=email], input[type=password], select").val("");
			$mainForm.find("input[type=checkbox], input[type=radio]").prop("checked", false);
			$mainForm.find('button[type="submit"]').prop('disabled', true);

			if(elementsForm['validator']){
				elementsForm['validator'].resetForm();
			}
		}

	}
	//FIN FORMULARIO Carga Masiva

	//FORMULARIO Carga Masiva
	function initFormularioCargaMasivaConfirmacion(){

		var $mainForm = $('#autogestion-form-confirmar');

		var tipoIngreso = null;

		initActions();
		validateMainForm();

		function validateMainForm(){

			disableSumbitButton($mainForm, true);

			elementsForm['validator'] =
				$mainForm.validate({
					  rules: {
						archivo: {
							required : {
								depends: function(element) {
									var motivo = $mainForm.find('.motivo-autogestion:checked').val();

				                	return motivo == 'estructura-nueva';
				                }
							},
							extension: "xls",
							filesize: 10000000
						},
						motivoAutogestion: {
							required: true
						}
					  },
					  messages: {
						 archivo: {
						   required: "Ingresa un archivo de 10 MB máximo.",
						   extension: "Ingresa un archivo con extensión: .xls",
						   filesize: "Ingresa un archivo de 10 MB máximo."
						 },
						 motivoAutogestion: {
						   required: "Selecciona un motivo.",
						 }
					   },
						errorClass : "error-dd error",
						errorElement : 'div',
						errorPlacement: function(error, element) {
							var elementInput = element[0];
							if(element[0]['id']==='archivo'){
								$('.lineas-archivo .extra-info').hide();
								error.appendTo( $('.lineas-archivo .add-lines-ge-mod' ));
								element.parent().addClass('error');

							}
						},
						success: function ($error) {
							if($error.length>0 && $('#archivo').val() != ''){
								$('.lineas-archivo .extra-info').hide();
								$('.lineas-archivo .file.error' ).removeClass('error');
				   				$error.remove();
							}
				        },
				        highlight : function(element, errorClass){
				        	var $element = $(element);
				        	if($element.attr('id')==='archivo' && $element.val() == ''){
				        		$('.lineas-archivo .extra-info').hide();
								$element.parent().addClass('error');
				        	}
				        },
				        submitHandler: function(form) {
							if(!elementsForm['sending']){
								sendFormData(form);
					  		}
						}
				});

				checkGeneralValidForm($mainForm);

				function sendFormData(form){
					elementsForm['sending'] = true;
					$(form).find('button[type="submit"]').prop('disabled', true);

					var self = $(form).serialize();

					var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

					/**Quitar una vez en producción y aqui solo checamos si es una línea en development para mandar a otra liga**/
					var sendTo = urlPOST;
					urlPOST = checkDevelopmentPostHTML(urlPOST);

					$.post(  urlPOST , self )
					.done(function( data ) {
					  	Services.gestionGrupos.cargaMasivaCallSuccess(data, form, sendTo, showInvalidErrorArchivo );
						elementsForm['sending'] = false;
					 })
					.fail(function( jqxhr, textStatus, error ) {
					  	//Mensaje de error del sistema
					  	Services.gestionGrupos.cargaMasivaCallFail(error, form);
					  	elementsForm['sending'] = false;
					});
				}
		}


		function initActions(){

			/**
				Setea la info del Motivo
			**/
			var $lastStep = $('.carga-masiva-last-step');
			$('.motivo-autogestion').change(function() {
				var $checkbox = $(this);
				if(typeof ingresarLineasComponent != 'undefined')
					ingresarLineasComponent.reset();

				if($('.motivo-autogestion:checked').length>0){
					var current = $checkbox.val(),
					btntext = (typeof $checkbox.data('btn') != 'undefined' ? $checkbox.data('btn') : 'Subir archivo');

					if(current=='continuar-con-lineas')
						$lastStep.addClass('revertir-estructura');
					else
						$lastStep.removeClass('revertir-estructura');

					$('#autogestion-btn').html(btntext);
					$lastStep.addClass('active');
				}
				else
					$lastStep.removeClass('active');



			});

		}

		function resetMainForm(){

			$mainForm.find("input[type=text], input[type=email], input[type=password], select").val("");
			$mainForm.find("input[type=checkbox], input[type=radio]").prop("checked", false);
			$mainForm.find('button[type="submit"]').prop('disabled', true);

			if(elementsForm['validator']){
				elementsForm['validator'].resetForm();
			}
		}

	}
	//FIN FORMULARIO Carga Masiva

	function updateFormPostURL(value){

		var $masivo = $('#autogestion-form');

		var masivoPosts = {
			'estructura-nueva' : 'carga-masiva-2-a.html',
			'estructura-anterior' : 'carga-masiva-2-b.html',
		};

		$masivo.prop('action', masivoPosts[value]);
	}

	/**Inicio carga masiva**/
	function getDataArbol(){
		//Obtener los elementos seleccionados
		var result = $treeLineas.jstree('get_selected');

		formatDataArbol(result);

		return elementsPost;
		//postAgregarLineas(phoneChecked, total);
	}

	// UNIFICAR LA INFORMACIÓN AL MISMO FORMATO
	function formatDataArbol(data){

		var dataT = null;

		elementsPost = [];

		data.forEach(function(item, index){

			if($('#'+item+' >.jstree-anchor .io-Phone').length>0){

				dataT = {
			 		id : ( typeof item != 'undefined' ? item : null ),
			 		tipo : 'single',
			 		selected : 'single'
			 	};
			}
			else{
				dataT = {
			 		id : ( typeof item != 'undefined' ? item : null ),
			 		tipo : 'group',
			 		selected : 'all'
			 	};
			}

			elementsPost.push(dataT);

		});

	}

	function initArbol(){

		var $element = $('#componente-ingresar-lineas .componente-lb.lineas-arbol'),
		elementOptions = ( typeof $element.data('options') != 'undefined' ? $element.data('options') : null),
		treeCuentas = false,
		rootElements = [],
		allSelected = false;

		initActions();
		initTree();

		function initActions(){

			// $('#checkbox-all').change(function(){
			// 	var $all = $(this),
			// 	checked = $all.is(':checked');

			// 	if(checked){
			// 		$treeLineas.jstree("select_all");
			// 		allSelected = true;
			// 	}
			// 	else{
			// 		$treeLineas.jstree("deselect_all");
			// 		allSelected = false;
			// 	}

			// });

			// $('#btn-delete-all').click(function(){
			// 	deleteNodes();
			// });

			$('#form-carga-masiva-anterior').submit(function(e){
		   		e.preventDefault();
				if(!confirmarRevertir)
					modalRevertir.openModal();
				else
					sendFormDataEstructuraAnterior();

			});

		   	$('#form-carga-masiva').submit(function(e){
		   		e.preventDefault();
		   		if(!confirmarNuevaEstructura)
					modalNuevaEstructura.openModal();
				else
					sendFormDataNuevaEstructura();

			});
		}

		function sendFormDataEstructuraAnterior(){
			var form = '#form-carga-masiva-anterior';

			elementsForm['sending'] = true;
			$(form).find('button[type="submit"]').prop('disabled', true);

			var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

			/**Quitar una vez en producción**/
			var sendTo = urlPOST;

			urlPOST = checkDevelopmentPostHTML(urlPOST);

			$.post(  urlPOST , {} )
			.done(function( data ) {
			  	Services.gestionGrupos.cargaMasivaPostArbolCallSuccess(data, form, sendTo );
				elementsForm['sending'] = false;

			 })
			.fail(function( jqxhr, textStatus, error ) {
			  	//Mensaje de error del sistema
			  	Services.gestionGrupos.cargaMasivaPostArbolCallFail(error, form);
			  	elementsForm['sending'] = false;
			});
		}

		function sendFormDataNuevaEstructura(){
			var form = '#form-carga-masiva';

			elementsForm['sending'] = true;
			$(form).find('button[type="submit"]').prop('disabled', true);

			var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

			/**Quitar una vez en producción**/
			var sendTo = urlPOST;

			urlPOST = checkDevelopmentPostHTML(urlPOST);

			$.post(  urlPOST , {} )
			.done(function( data ) {
			  	Services.gestionGrupos.cargaMasivaPostArbolCallSuccess(data, form, sendTo );
				elementsForm['sending'] = false;

			 })
			.fail(function( jqxhr, textStatus, error ) {
			  	//Mensaje de error del sistema
			  	Services.gestionGrupos.cargaMasivaPostArbolCallFail(error, form);
			  	elementsForm['sending'] = false;
			});
		}

		function deleteNodes(){
			var deleted = $treeLineas.jstree('get_selected');

			$.each(deleted, function( index, value ) {
				$treeLineas.jstree('delete_node', '#'+value);
			});
		}

		function mostrarNodos(node){
			$treeLineas.jstree('open_node', node.id, function(e, data) {

			}, true);
		}

		function esconderNodos(node){
			$treeLineas.jstree('close_node', node.id);

		}

		function updateTotal(){
			var result = $treeLineas.jstree('get_selected'),
			rootTotal = 0;

			$.each(result, function( index, value ) {
			  if($.inArray(value, rootElements)>-1)
			  	rootTotal++;
			});

			if(rootTotal==rootElements.length){
				$('#checkbox-all').prop('checked', true);
				allSelected = true;
			}
			else{
				$('#checkbox-all').prop('checked', false);
				allSelected = false;
			}

			if(result.length>0)
				$('.active-selected').prop('disabled', false);
			else
				$('.active-selected').prop('disabled', true);
		}

		function initTree(){

			treeCuentas = ($treeLineas.hasClass('tree-cuentas') ? '-cuentas' : '');

			$treeLineas
			.on("changed.jstree", function (e, data) {
				//updateTotal();
			})
			.bind("open_node.jstree", function (event, data) {
			  mostrarNodos(data.node);
			})
			.bind('loaded.jstree', function(e, data) {
			    $treeLineas.find('>ul >li').each(function(){
					var $node = $(this);
					rootElements.push($node.attr('id'));
				});
			})
			.bind("delete_node.jstree", function (event, data) {
				// var $delete = $('#btn-delete-all'),
				// redirect = (typeof $delete.data('none') != 'undefined' ? $delete.data('none') : null) ;

				// if(redirect!=null && allSelected)
				// 	window.location.href = redirect;
			})
			.jstree({
				'core' : {
					'check_callback' : true,
					'data' : {
						'dataType' : 'json',
						'url' : function (node) {
					      return node.id === '#' ?
					        'http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/root'+treeCuentas+'.php' :
					        'http://multiplicamx.com/cliente/2016/mi-telcel-empresas/assets/children'+treeCuentas+'.php';
					    },
						'data' : function (node) {
							return { 'id' : node.id };
						}
					},
					'multiple' : true
				}
			});

		}

	}
	/**Fin carga masiva**/

	return{
		inicializar: init
	}

})();
var sertec = (function(){

	var elementsForm = {
		id : null,
		validator : null,
		sending: false
	};

	var formElementsModales = {
		'descargarFacturas': {id: null, validator: null, sending: false }
	};

	var modalDescargarFacturas = null;

	var _modalDescargarFacturas = {
		data : [],
		allChecked : false
	};

	var $listaSertec = $('#listado-sertec'),
	$allForm = $('#form-all-imei'),
	$specificForm = $('#form-specific-imei'),
	$singleForm = $('#sertec-form-single'),
	$tableOrder = $('#extra-detail-sertec #movimientos-table');

	function init(){
		if($listaSertec.length>0)
			generarListadoConfirmacionInicial();

		if($allForm.length>0)
			initAllForm();

		if($specificForm.length>0)
			initMasivoForm();

		if($singleForm.length>0)
			initFormularioSingle();

		if($tableOrder.length>0)
			initOrdenamientoDetalle();

		if($('.sertec-block #modal-descargar').length>0)
			initModalDescargarFacturas();

		setActionsGenerales();
	}

	function setActionsGenerales(){
		$('body').on('click', '.btn-general-solicitud-descarga', function(){
			//Aquí hay que tener en la variable el post de las facturas que se quieren
			_modalDescargarFacturas = {data: []};
			if(modalDescargarFacturas!=null)
				modalDescargarFacturas.openModal();
		});

		$('body').on('click', '#btn-show-extra-detail', function(){
			var $info = $('#info-content');
			$info.toggleClass('show-details');

			if($info.hasClass('show-details'))
				scrollToElement($('#extra-detail-sertec'));

		});
	}

	var ordenado = [];


	function initOrdenamientoDetalle(){

		getData();

		$tableOrder.find('.order-by-block button').click(function(e){
			e.stopPropagation();
			var opciones = ( typeof $(this).data('opc') != 'undefined' ? $(this).data('opc') : null );
			orderElements(opciones);
		});

		function getData(){
			$tableOrder.find('.data-detalle').each(function (index, value) {
				var data = ( typeof $(this).data('detalle') != 'undefined' ? $(this).data('detalle') : null );
				ordenado.push(data);
			});
		}

		function orderElements(opciones){
			var sorted = [];

			if(opciones!=null)
				sorted = sortByAZ(ordenado, opciones.key);

			if(opciones.orderby == 'desc')
				sorted.reverse();

			ordenado = sorted;

			generarListado();
		}

		function generarListado(){
			var $mainContent = $tableOrder.find('.table-main-block');
			$mainContent.html('');

			$.each( ordenado, function( key , meta ) {
				var html = '<div class="col-sm-pr-100 col-xs-12 center-block flexbox h-align-center v-align-center data-detalle"> <div class="col-sm-pr-30 flexbox h-align-center"> <p title="'+meta.fecha+'">'+meta.fecha+'</p> </div> <div class="col-sm-pr-30 flexbox h-align-center estatus-container"> <div class="circle-container"><span class="circle"></span></div> <p class="name">Estatus:</p> <p title="'+meta.estatus+'">'+meta.estatus+'</p> </div> <div class="col-sm-pr-40 col-xs-4 flexbox h-align-center border-right-none comment-container"> <div class="circle-container"><span class="circle"></span></div> <p class="name">Comentario:</p> <p title="'+meta.comentario+'">'+meta.comentario+'</p> </div> </div>';

				$mainContent.append(html);

			});
		}
	}

	//Modal para descargar
	function initModalDescargarFacturas(){
		var $titleP = $('#modal-descargar .heading-mod .title-mod p'),
		titleBefore = ( typeof $titleP.data('before') != 'undefined' ? $titleP.data('before') : 'Solicitud de descarga' ),
		titleAfter = ( typeof $titleP.data('after') != 'undefined' ? $titleP.data('after') : titleBefore ),
		emailDefault = '',
		$input = $('#modal-descargar').find('input[name="email"]');

		validateForm();

		modalDescargarFacturas = new modalesTelcel($('#modal-descargar'),{
			onInit : function(){
				$('#descargar-facturas-confirmacion').hide();
				emailDefault = $input.val();
			},
			onReset : function(){
				removeGeneralError();
				$('#form-confirmar-descargar-facturas').show();
			  	$('#descargar-facturas-confirmacion').hide();
			  	resetMainForm();
			},
			onOpen : function(){
				if(titleBefore!=null)
					$titleP.html(titleBefore);
				$('#descargar-facturas-confirmacion').hide();

				var $form = $('#form-confirmar-descargar-facturas');
				disableSumbitButton($form, false);

			}
		});

		function validateForm(){
			var $form = $('#form-confirmar-descargar-facturas');

			disableSumbitButton($form, true);

			formElementsModales['descargarFacturas']['validator'] = $form.validate({
				  rules: {
					email: {
					  required: false,
					  email: true
					}
				  },
			  	messages: {
					 email: {
					   required: "Ingresa un correo electrónico.",
					   email: "Ingresa un correo electrónico válido."
					 }
			   },
			   errorClass : "error-dd error",
				submitHandler: function(form) {

					// handleErrorTooltip(false);
					if(!formElementsModales['descargarFacturas']['sending']){

						formElementsModales['descargarFacturas']['sending'] = true;

						$(form).find('button[type="submit"]').prop('disabled', true);

						var self = $(form).serialize();

						generalLoadingIcon(form, true);

						var data = { success: true, data: [] };


						$.post( postURL , { data: self, data: _modalDescargarFacturas })
						  .done(function( json ) {
						  	Services.sertec.descargarFacturasSuccessCallback(json, form, { element : $titleP, text : titleAfter } );
						  	formElementsModales['descargarFacturas']['sending'] = false;
						  	generalLoadingIcon(form, false);

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	Services.sertec.descargarFacturasFailCallback(form, error);
						  	formElementsModales['descargarFacturas']['sending'] = false;
						  	generalLoadingIcon(form, false);
						});

					}

				}
			});

			checkGeneralValidForm($form);

		}

		function removeGeneralError(){
			$('#modal-descargar .system-error-msg').remove();
			$('#modal-descargar .has-system-error').removeClass('has-system-error');
		}

		$('#modal-descargar').on('click', '#btn-r-descargar-facturas', function(){
			removeGeneralError();
			$('#form-confirmar-descargar-facturas').submit();
		});

		function resetMainForm(){
			$input.removeClass('error error-dd');
			$input.val(emailDefault);

			if(formElementsModales['descargarFacturas']['validator']){
				formElementsModales['descargarFacturas']['validator'].resetForm();
			}
		}
	}
	//Fin Modal para descargar

	/**sertec single**/
	function initFormularioSingle(){
		validateMainForm();

		function validateMainForm(){

			disableSumbitButton($singleForm, true);

			elementsForm['validator'] =
				$singleForm.validate({
				  rules: {
					checkboxAutogestion : {
						required : true
					}
				  },
				  messages: {
					checkboxAutogestion : {
						required : "Acepta los términos y condiciones para continuar"
					}
				   },
					errorPlacement: function(error, $element) {
					   	/** no mostramos errores **/
					},
			        submitHandler: function(form) {
						if(!elementsForm['sending']){
							sendFormData(form);
				  		}
					}
			});

			checkGeneralValidForm($singleForm);

			function sendFormData(form){
				elementsForm['sending'] = true;
				$(form).find('button[type="submit"]').prop('disabled', true);

				var self = $(form).serialize();

				var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

				/**Quitar una vez en producción**/
				var sendTo = urlPOST;

				urlPOST = checkDevelopmentPostHTML(urlPOST);

				$.post(  urlPOST , self )
				.done(function( data ) {
				  	Services.sertec.singleCallSuccess(data, form, sendTo );
					elementsForm['sending'] = false;

				 })
				.fail(function( jqxhr, textStatus, error ) {
				  	//Mensaje de error del sistema
				  	Services.sertec.singleCallFail(error, form);
				  	elementsForm['sending'] = false;
				});
			}
		}
	}
	/**fin sertec single**/

	//FORMULARIO SERTEC SPECIFIC
	function initMasivoForm(){

		var tipoIngreso = null;

		initActions();
		validateMainForm();

		function validateMainForm(){

			disableSumbitButton($specificForm, true);

			elementsForm['validator'] =
				$specificForm.validate({
					  rules: {
						archivo: {
							extension: "xls",
							filesize: 10000000
						},
						checkboxAutogestion : {
							required : true
						}
					  },
					  messages: {
						archivo: {
						   required: "Ingresa un archivo de 10 MB máximo.",
						   extension: "Ingresa un archivo con extensión: .xls",
						   filesize: "Ingresa un archivo de 10 MB máximo."
						},
						checkboxAutogestion : {
							required : "Acepta los términos y condiciones para continuar"
						}
					   },
						errorClass : "error-dd error",
						errorElement : 'div',
						errorPlacement: function(error, element) {
							var elementInput = element[0];
							if(element[0]['id']==='archivo' && $(elementInput).val() != ''){
								$('.lineas-archivo .extra-info').hide();
								error.appendTo( $('.lineas-archivo .add-lines-ge-mod' ));
								element.parent().addClass('error');

							}
						},
						success: function ($error) {
							if($error.length>0 && $('#archivo').val() != ''){
								$('.lineas-archivo .extra-info').hide();
								$('.lineas-archivo .file.error' ).removeClass('error');
				   				$error.remove();
							}

				        },
				        submitHandler: function(form) {
							if(!elementsForm['sending']){
								sendFormData(form);
					  		}
						}
				});

				function sendFormData(form){
					elementsForm['sending'] = true;
					$(form).find('button[type="submit"]').prop('disabled', true);

					var self = $(form).serialize();

					var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

					/**Quitar una vez en producción y aqui solo checamos si es una línea en development para mandar a otra liga**/
					var sendTo = ( (ingresarLineasComponentTotal ==1 && is_mobile() && typeof $(form).data('actionmobile') != 'undefined') ? $(form).data('actionmobile') : urlPOST);

					urlPOST = checkDevelopmentPostHTML(urlPOST);

					$.post(  urlPOST , self )
					.done(function( data ) {
					  	Services.sertec.specificIMEICallSuccess(data, form, sendTo, showInvalidErrorArchivo );
						elementsForm['sending'] = false;
					 })
					.fail(function( jqxhr, textStatus, error ) {
					  	//Mensaje de error del sistema
					  	Services.sertec.specificIMEICallFail(error, form);
					  	elementsForm['sending'] = false;
					});
				}
		}


		function validateFormData(){

			var dataLineas = [];
			var lineasValid = false;
			//var dataArchivo = ingresarLineasComponent.getDataArchivo();

			var dataType = ingresarLineasComponent.getType();

			if(dataType === '.componente-lineas-block .lineas-autocomplete')
				dataLineas = ingresarLineasComponent.getDataAutocomplete();
			else if(dataType === '.componente-lineas-block .lineas-arbol')
				dataLineas = ingresarLineasComponent.getDataArbol();
			else
				dataLineas.push(null);

			if(dataLineas.length>0 && $specificForm.valid())
				lineasValid = true;

	    	$('#lineas-hidden-input').val(JSON.stringify(dataLineas));

			if(lineasValid && $('#checkbox-autogestion-terminos-all').is(':checked'))
				return true;

			return false;
		}


		function initActions(){

			/**
				Cuando se esconda el step 2
			**/

			var fullReset = false;

			$('#componente-ingresar-lineas .btn-al').on('click', function(event) {
				fullReset = true;
				resetMainForm();
			});

			$('#autogestion-paso-2').on('hide', function(event) {
				var target = $(event.target).attr('id');
				if(target==='autogestion-paso-2' && fullReset)
			      resetMainForm();

			  	$specificForm.find('button[type="submit"]').prop('disabled', true);

			  	fullReset = false;
			});

			$('#autogestion-paso-2').on('show', function(event) {
				var target = $(event.target).attr('id');

				if(target==='autogestion-paso-2')
					$specificForm.find('button[type="submit"]').prop('disabled', !validateFormData());
			});

			/**
				Setea la info del Motivo
			**/
			$('#checkbox-autogestion-terminos-all').change(function() {
				$specificForm.find('button[type="submit"]').prop('disabled', !validateFormData());
			});

			$('.reset-form-specific-imei').click(function(){
				$('#autogestion-paso-2').hide();
				if(typeof ingresarLineasComponent != 'undefined')
					ingresarLineasComponent.reset();

			});


		}

		function resetMainForm(){
			$specificForm.find("input[type=checkbox], input[type=radio]").prop("checked", false);
			$specificForm.find('button[type="submit"]').prop('disabled', true);

			if(elementsForm['validator']){
				elementsForm['validator'].resetForm();
			}
		}

	}
	//FIN FORMULARIO SERTEC SPECIFIC

	//Simular error de que es invalido el archivo
	function showInvalidErrorArchivo(){
		var msg = 'Este archivo está dañado o es ilegible, intenta con un nuevo archivo.';

		$('#archivo-invalido').remove();
		$('.lineas-archivo .extra-info').hide();
		$('.lineas-archivo .add-lines-ge-mod' ).append('<div class="error-dd error" id="archivo-invalido">'+msg+'</div>');
		$('#archivo').parent().addClass('error');

		$specificForm.find('button[type="submit"]').prop('disabled', true);
	}

	//FORMULARIO SERTEC ALL
	function initAllForm(){

		//initActions();
		validateMainForm();

		function validateMainForm(){

			//disableSumbitButton($allForm, true);

			$allForm.submit(function(e){
				e.preventDefault();
				if(!elementsForm['sending']){
					sendFormData();
		  		}
			});


			function sendFormData(){
				var form = '#form-all-imei';
				elementsForm['sending'] = true;
				$(form).find('button[type="submit"]').prop('disabled', true);

				var self = $(form).serialize();

				var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

				/**Quitar una vez en producción y aqui solo checamos si es una línea en development para mandar a otra liga**/
				var sendTo = urlPOST;

				urlPOST = checkDevelopmentPostHTML(urlPOST);

				$.post(  urlPOST , self )
				.done(function( data ) {
				  	Services.sertec.allIMEICallSuccess(data, form, sendTo);
					elementsForm['sending'] = false;
				 })
				.fail(function( jqxhr, textStatus, error ) {
				  	//Mensaje de error del sistema
				  	Services.sertec.allIMEICallFail(error, form);
				  	elementsForm['sending'] = false;
				});
			}
		}

		checkGeneralValidForm($allForm);

		function initActions(){
			$('.reset-form-all-imei').click(function(){
				resetMainForm();
			});
		}

		function resetMainForm(){
			$allForm.find("input[type=checkbox], input[type=radio]").prop("checked", false);
			$allForm.find('button[type="submit"]').prop('disabled', true);

			if(elementsForm['validator']){
				elementsForm['validator'].resetForm();
			}
		}

	}
	//FIN FORMULARIO SERTEC ALL

	function generarListadoConfirmacionInicial(){

		var $elements = $listaSertec.find('.linea-batch');
		var total = $elements.length;

		$elements.each(function (index, value) {
		  var meta = ( typeof $(this).data('meta') != 'undefined' ? $(this).data('meta') : null );
		  var $element = $(this);

			if(meta != null){
				var elemento = generarHTMLSertec(meta, index);
				$element.html(elemento);
				// bindElementActions();

			}
		});
	}

	function generarHTMLSertec(meta, index){
		var html = '';

		html = '<div class="col-sm-pr-100 col-xs-12 content-item-block" data-index="'+index+'"> <div class="col-xs-12 col-sm-pr-10"><p class="label">Región:</p> <p class="p-value" title="'+meta.region+'">'+meta.region+'</p></div><div class="col-xs-12 col-sm-pr-15"><p class="label">Cuenta:</p> <p class="p-value" title="'+meta.cuenta+'">'+meta.cuenta+'</p></div><div class="col-xs-12 col-sm-pr-15"><p class="label">Número:</p> <p class="p-value" title="'+meta.numero+'">'+meta.numero+'</p></div><div class="col-xs-12 col-sm-pr-20 flexbox"><p class="label">IMEI:</p><p class="p-value" title="'+meta.imei+'">'+meta.imei+'</p></div><div class="col-xs-12 col-sm-pr-15"><p class="label">Plan:</p> <p class="p-value" title="'+meta.estatus+'">'+meta.estatus+'</p></div><div class="col-xs-12 col-sm-pr-15"><p class="label">Plazo:</p> <p class="p-value" title="'+meta.folio+'">'+meta.folio+'</p></div><div class="col-xs-12 col-sm-pr-10 flexbox ver-detalle-block"><a class="simple" href="sertec-detalle.html" title="Ver detalle"> <span class="icon i-angle-right"></span> </a></div></div>';


		return html;

	}


	return{
		inicializar: init
	}
})();
var configuracionRoles = (function(){

	var $mainBlock = $('.roles-block #main-view-block'),
	currentModalData = null,
	editandoNombre = false,
	$closestGuardarElement = null,
	$closestEditarBtn = null,
	editandoNombreValor = null,
	beforeEditando = null;

	function init(){
		setActions();
	}

	function setActions(){
		$mainBlock.on('click', '.mosaico-view .item-mv', function(e){
			if(is_mobile()){
				e.stopPropagation();
				var $element = $(this).find('.see-more-gt');
				var url = $element.prop('href');
				console.log(url);
				if(url!=undefined)
					window.location.href = url;
			}
		});

		$mainBlock.on('click', '.btn-gear', function(e){
			e.stopPropagation();
			cancelEditName();
			var $element = $(this).closest('.rol-element');

			$('.rol-element').removeClass('active');
			$('body').addClass('settings-open');

			$element.addClass('active');
			if(is_mobile())
				$('body').addClass('fixed-body');

		});

		$mainBlock.on('click', '.btn-close-config', function(e){
			e.stopPropagation();
			cancelEditName();
			var $element = $(this).closest('.rol-element');
			$element.removeClass('active');
		});

		$('body').on('click', '#vista-mosaico', function(){
			cancelEditName();
			$('#vista-mosaico').removeClass('active');
			$('#vista-lista').addClass('active');
			$('#main-view-block').removeClass('group-row-block').addClass('group-list-block');
		});

		$('body').on('click', '#vista-lista', function(){
			cancelEditName();
			$('#vista-lista').removeClass('active');
			$('#vista-mosaico').addClass('active');
			$('#main-view-block').removeClass('group-list-block').addClass('group-row-block');
		});

		$('body').on('click', '.btn-add-rol', function(){
			cancelEditName();
			modalesConfiguracion.openModalAgregarRol();
		});

		$('body').on('click', '.btn-add-rol-admin', function(){
			cancelEditName();
			modalesConfiguracion.openModalAgregarRolAdmin();
		});

		$mainBlock.on('click', '.btn-editar-nombre', function(e){
			e.stopPropagation();
			var $element = $(this).closest('.rol-element');
			$('.rol-element').removeClass('active');
			if(!editandoNombre){
				$element.find('.name-container').addClass('active-edit');
				editandoNombre = true;
				$closestGuardarElement = $element.closest('.rol-element').find('.btn-guardar-nombre');
				$closestEditarBtn = null;
				editandoNombreValor = $element.find('input.editar-alias').val();
				beforeEditando = $element.find('input.editar-alias').val();
			}
			else{
				$closestGuardarElement.prop('disabled', false);
				$closestGuardarElement.trigger('click');
				$closestEditarBtn = $element;
			}
		});

		$mainBlock.on('click', '.btn-guardar-nombre', function(e){
			e.stopPropagation();
			var $element = $(this).closest('.rol-element');
			verifyRolName($element);
		});

		$('.group-list-block .editar-alias').bind('keyup', function (e) {
			var $input = $(this);
			validateNameOnInput($input);
		});

		$('.group-list-block').on('keydown','.editar-alias', function (e) {
			var $input = $(this);

			var $errori = $('.error-tooltip.nombre-error');

			if($errori.length>0){
				$input.removeClass('error').removeClass('error-dd');
				$errori.remove();
			}

		    if (e.keyCode === 13) { //Si es enter
		        var $element = $(this).closest('.rol-element');
		        $closestGuardarElement = null;
				verifyRolName($element);
		    }
		});

		$mainBlock.on('click', '.settings-ri', function(e){
			if(is_mobile()){
				e.stopPropagation();
				$('.rol-element').removeClass('active');
				$('.settings-ri').removeClass('active');
				$('body').removeClass('fixed-body');
				$('body').removeClass('settings-open');
			}
		});


		$('#btn-perfil-admin').click(function(){
			$('.options-header-block p').removeClass('active');
			$(this).addClass('active');
			$('#perfiles-usuarios').addClass('hidden');
			$('.header-perfil-usuarios').addClass('hidden');
			$('#perfiles-administrador').removeClass('hidden');
			$('.header-perfil-administrador').removeClass('hidden');
		});

		$('#btn-perfil-usuario').click(function(){
			$('.options-header-block p').removeClass('active');
			$(this).addClass('active');
			$('#perfiles-administrador').addClass('hidden');
			$('.header-perfil-administrador').addClass('hidden');
			$('#perfiles-usuarios').removeClass('hidden');
			$('.header-perfil-usuarios').removeClass('hidden');
		});


	}


	function setBasicInfoModal(item){
		currentModalData = item;
		$('.modal-mte .alias-text, .modal-mte .txt-current').html(item.nombre);
	}

	function verifyRolName($element){
		var $input = $element.find('.editar-alias');
		var value = $input.val();
		var id = $element.data('item').id;

		if(validName(value)){

			$element.find('.triangle-tooltip').remove();
			$input.removeClass('error');

			var urlPOST = Services.apiURL.editarNombreRol();

			$.post( urlPOST , { edit: value, id: id })
			  .done(function( json ) {
			  	Services.configuracion.editarNombreRolSuccessCallback( json, value, appendError, {input : $input, element : $element });

			  	//Checar si hay algún elemento que se quiere editar
			  	$input.blur();
				$input.focusout();
			  	checkElementToEdit();
			  	updateBlock($element);
			  })
			  .fail(function( jqxhr, textStatus, error ) {
			  	Services.configuracion.editarNombreRolFailCallback( error );
			});
		}
		else if(editandoNombre && editandoNombreValor!=null){
			$input.val(editandoNombreValor);
			$closestGuardarElement.trigger('click');
			editandoNombreValor = null;
		}
	}

	function checkElementToEdit(){
		editandoNombre = false;
		if($closestEditarBtn!=null){
			$closestEditarBtn.find('.name-container').addClass('active-edit');
			editandoNombre = true;
			editandoNombreValor = $closestEditarBtn.find('input.editar-alias').val();
			$closestGuardarElement = $closestEditarBtn.closest('.rol-element').find('.btn-guardar-nombre');
			$closestEditarBtn = null;
		}
	}

	function validName(value){
		var validation = {
			empty : { test : value.length>0 , message: 'Es necesario ingresar un nombre para el perfil.' },
			name : 	{ test : /^[A-Za-zÑñ]*[A-Za-zNñ-\s]*[A-Za-zNñ]$/i.test( value ), message: 'El nombre no debe tener caracteres especiales, números y espacio al inicio o final.' },
			minlength :{ test : value.length>=5 , message: 'El nombre debe tener al menos 5 caracteres.' }
		};

		return validation.name.test && validation.minlength.test && validation.empty.test;
	}

	function validNameMsg(value){
		var validation = {
			empty : { test : value.length>0 , message: 'Es necesario ingresar un nombre para el perfil.' },
			name : 	{ test : /^[A-Za-zÑñ]*[A-Za-zNñ-\s]*[A-Za-zNñ]$/i.test( value ), message: 'El nombre no debe tener caracteres especiales, números y espacio al inicio o final.' },
			minlength :{ test : value.length>=5 , message: 'El nombre debe tener al menos 5 caracteres.' }
		};

		return ( !validation.empty.test ? validation.empty.message : ( !validation.name.test ? validation.name.message : validation.minlength.message) );
	}

	function validateNameOnInput($input){
		var value = $input.val();
		var $element = $input.closest('.rol-element');
		var $button = $input.next('.btn-guardar-nombre');

		if(validName(value)){
			$element.find('.triangle-tooltip').remove();
			$input.removeClass('error');
			$button.prop('disabled', false);
		}
		else{
			$button.prop('disabled', true);
			appendError($element, $input, validNameMsg(value));
		}
	}

	function updateBlock($element){

		var $input = $element.find('.editar-alias'),
		nameChanged = beforeEditando!=$input.val();
		beforeEditando = editandoNombreValor;

		if($element.hasClass('with-legal-name-mv') && nameChanged){
			var $textos = $element.find('.legal-name-imv'),
			$icon = $element.find('.ribbon .io-City');

			$element.addClass('changed-block');
			$textos.fadeOut(500);
			$icon.animate({opacity: 0}, 300, function(){
				$icon.removeClass('io-City').addClass('io-Maletin');
				$element.removeClass('with-legal-name-mv');
				$icon.animate({opacity: 1}, 300);
				$textos.remove();
			});

			setTimeout(function(){
				$element.removeClass('changed-block');
			}, 1100);
		}

	}

	function cancelEditName(){
		editandoNombre = false;
		var $elementos_activos = $('.rol-element .name-container.active-edit');
		returnEditaNamePreviousValue($elementos_activos);

		$('.rol-element').find('.name-container').removeClass('active-edit');
	}

	function returnEditaNamePreviousValue($elementos_activos){
		if($elementos_activos.length>0){
			//alert('Editando');

			for (var i = 0; i < $elementos_activos.length; i++) {
				var nombre_anterior = $($elementos_activos[i]).find('strong.ribbon-content').html();
				$($elementos_activos[i]).find('.editar-alias').val(nombre_anterior)
					//Remover errores - revisar la mejor forma de hacerlo con el Valid de jquery
					.removeClass('error');
				$($elementos_activos[i]).parent().parent().parent().find('.triangle-tooltip').hide();
			}

		}
	}

	function appendError($e, $i, message){
		if($e.find('.triangle-tooltip').length == 0){
			var errorhtml = '<div class="triangle-tooltip error-tooltip triangle-bottom nombre-error"><p>'+message+'</p></div>';
			$e.append(errorhtml);
			$i.addClass('error');
		}
	}

	return{
		inicializar : init,
		cancelEdit : cancelEditName
	}

})();


var configuracionUsuarios = (function(){

	var $mainUsuariosTable = $('.usuarios-table'),
	$usuariosTable = $('#usuarios-table'),
	$otrosUsuariosTable = $('#otros-usuarios-table'),
	sinGrupo = $mainUsuariosTable.hasClass('sin-grupos'),
	vip = $mainUsuariosTable.hasClass('vip');

	var usuariosSection = null,
	getListadoSection = null;


	function getUsuariosSection(){
		return ($otrosUsuariosTable.length>0 ? 'otros' : 'byrol' );
	}

	usuariosSection = getUsuariosSection();

	var generarHTMLListado = {
		otros : generarHTMLOtrosUsuarios,
		byrol : generarHTMLUsuarios
	};

	getListadoSection = typeof generarHTMLListado[usuariosSection] != 'undefined' ? generarHTMLListado[usuariosSection] : null ;


	function init(){
		generarListadoConfirmacionInicial();
		initModales();
		setActions();
		generalCheckBoxAll.inicializar();
	}

	function initModales(){

	}

	function setActions(){

		var $generalConfig = $('.general-group-options-container');

		$mainUsuariosTable.on('click', '.btn-user-config', function(e){
			e.stopPropagation();
			var $element = $(this).closest('.linea-batch');

			$generalConfig.removeClass('active');
			$('.linea-batch').removeClass('active-settings');
			$('body').addClass('settings-open');

			$element.addClass('active-settings');
			if(is_mobile())
				$('body').addClass('fixed-body');

		});

		$mainUsuariosTable.on('click', '.btn-close-config', function(e){
			e.stopPropagation();
			var $element = $(this).closest('.linea-batch');
			$element.removeClass('active-settings');
		});

		// ESCONDER OPCIONES DE CONFIGURACIÓN GENERAL
		$generalConfig.on('click', '.btn-close-general-config', function(e){
			e.stopPropagation();
			$generalConfig.removeClass('active');
		});

		$generalConfig.on('click', '.btn-open-general-config', function(e){
			e.stopPropagation();
			$('.linea-batch').removeClass('active-settings');
			$('body').addClass('settings-open');
			$generalConfig.addClass('active');
			if(is_mobile())
				$('body').addClass('fixed-body');

		});
	}

	function generarListadoConfirmacionInicial(){

		var $elements = $mainUsuariosTable.find('.linea-batch');
		var total = $elements.length;

		$elements.each(function (index, value) {
		  var meta = ( typeof $(this).data('item') != 'undefined' ? $(this).data('item') : null );
		  var $element = $(this);

			if(meta != null){
				var elemento = getListadoSection(meta, index);
				$element.html(elemento);
				//dataListadoCuentasAsociadas.push(meta);

				// bindElementActions();

			}
		});
	}

	function generarHTMLUsuarios(meta, index){

		var html = '';

		html = '<div class="col-sm-12 col-xs-12 content-item-block"><div class="col-sm-1 hidden-xs checkbox-container flexbox h-align-center"> <input type="checkbox" id="i-'+meta.id+'" name="i-'+meta.id+'" value="'+meta.id+'" data-index="0"> <label for="i-'+meta.id+'"><span class="check-sq"></span></label> </div><div class="col-sm-11 col-xs-12 usuario-info-block"><div class="'+(!sinGrupo ? 'col-sm-pr-25' : 'col-sm-pr-30')+'  col-xs-12"><label class="hidden-sm hidden-md hidden-lg">Nombre:</label><p title="'+meta.nombre+'">'+meta.nombre+'</p></div><div class="'+(!sinGrupo ? 'col-sm-pr-20' : 'col-sm-pr-30')+' col-xs-12 flexbox"><label class="hidden-sm hidden-md hidden-lg">Número:</label><p title="'+meta.numero+'">'+meta.numero+'</p></div><div class="'+(!sinGrupo ? 'col-sm-pr-25' : 'col-sm-pr-30')+' col-xs-12"><label class="hidden-sm hidden-md hidden-lg">Correo:</label><p title="'+meta.correoelectronico+'">'+meta.correoelectronico+'</p></div>'+(!sinGrupo ? '<div class="col-sm-pr-20 col-xs-12 imei-extra-detail"><label class="hidden-sm hidden-md hidden-lg">Grupo:</label><div class="show-more-details-container col-xs-6 col-sm-12"><p class="p-value" title="['+meta.total+'] grupo(s)">['+meta.total+'] grupo(s)</p> </div></div>' : '' )+'<div class="col-sm-pr-10 hidden-xs"><div class="icon-container"> <button class="simple btn-editar-usuario" type="button" title="Editar"> <span class="icon io-Admin"></span> </button> </div></div></div><div class="btn-mobile-container col-xs-12 hidden-sm hidden-md hidden-lg"> <div class="col-xs-6"> <button type="button" class="btn-quitar-usuarios full-width">Eliminar usuario</button> </div> <div class="col-xs-6"> <button type="button" class="btn-cambiar-rol full-width blue-dark">Cambiar rol</button> </div><div class="col-xs-12"> <button type="button" class="btn-editar-usuario full-width">Editar usuario</button> </div></div>';

		return html;

	}

	function generarHTMLOtrosUsuarios(meta, index){

		var html = '';

		html = '<div class="col-sm-12 col-xs-12 content-item-block"><div class="col-sm-1 hidden-xs checkbox-container flexbox h-align-center"> <input type="checkbox" id="i-'+meta.id+'" name="i-'+meta.id+'" value="'+meta.id+'" data-index="0"> <label for="i-'+meta.id+'"><span class="check-sq"></span></label> </div><div class="col-sm-11 col-xs-12 usuario-info-block"><div class="col-sm-pr-30 col-xs-12"><label class="hidden-sm hidden-md hidden-lg">Region:</label><p title="'+meta.region+'">'+meta.region+'</p></div><div class="col-sm-pr-35 col-xs-12 flexbox"><label class="hidden-sm hidden-md hidden-lg">Cuenta:</label><p title="'+meta.cuenta+'">'+meta.cuenta+'</p></div><div class="col-sm-pr-35 col-xs-12"><label class="hidden-sm hidden-md hidden-lg">Número:</label><p title="'+meta.numero+'">'+meta.numero+'</p></div></div></div><div class="btn-mobile-container col-xs-12 hidden-sm hidden-md hidden-lg"> '+(vip ? '<div class="col-xs-6"> <button type="button" class="btn-quitar-usuarios full-width">Quitar usuario</button> </div>' : '' ) + '<div class="'+(vip ? 'col-xs-6' : 'col-xs-12')+'"> <button type="button" class="btn-cambiar-rol full-width blue-dark">Cambiar rol</button> </div> </div>';

		return html;

	}

	return{
		inicializar : init
	}
})();


var modalesConfiguracion = (function(){
	var formElementsModales = {
		'eliminarRol' : {id : null, validator : null, sending: false },
		'cambiarRol' : {id : null, validator : null, sending: false },
		'nuevoUsuario' : {id : null, validator : null, sending: false },
		'editarUsuario' : {id : null, validator : null, sending: false },
		'eliminarUsuario' : {id : null, validator : null, sending: false },
		'agregarLineas' : {id : null, validator : null, sending: false },
		'nuevoRol' : {id : null, validator : null, sending: false },
		'nuevoRolAdmin' : {id : null, validator : null, sending: false },
	},
	currentModalData = null,
	singleElement = false;

	var modalAgregarRol = null, modalAgregarRolAdmin = null, modalEliminarRol = null, modalEliminarRolAdmin = null, modalCambiarRol = null, modalAgregarUsuario = null, modalEditarUsuario = null, modalAgregarLineas = null, modalCancelarRol = null;

	var _modalAgregarRolAdmin = { isFirstTime : false, perfil : null, element : null, done : false };

	function init(){
		setActions();

		if($('#modal-agregar-rol').length>0)
			initModalAgregarRol();

		if($('#modal-agregar-rol-admin').length>0)
			initModalAgregarRolAdmin();

		if($('#modal-eliminar-rol').length>0)
			initModalEliminarRol();

		if($('#modal-eliminar-rol-admin').length>0)
			initModalEliminarRolAdmin();

		if($('#modal-cambiar-rol').length>0)
			initModalCambiarRol();

		if($('#modal-agregar-usuario').length>0)
			initModalAgregarUsuario();

		if($('#modal-editar-usuario').length>0)
			initModalEditarUsuario();

		if($('#modal-quitar-usuario').length>0)
			initModalQuitarUsuario();

		if($('#modal-agregar-usuarios').length>0)
			initmodalAgregarLineas();

		if($('#modal-cancelar-rol').length>0)
			initModalCancelarRol();

		checkNuevoUsuario();
	}


	function checkNuevoUsuario(){
		/**simular casp de uso**/
		var hash = window.location.hash;

		if(hash=='#rolCreado'){

			setBasicInfoModal($('#rol-5').data('item'));
			$('.modal-mte .rol-txt').html(currentModalData.nombre);
			modalAgregarRol.openModal();

			$('#form-agregar-rol').hide().addClass('success');
			$('.btn-agregar-lineas-grupo-modal').attr('data-item', '{"id": "'+currentModalData.id+'" ,"nombre": "'+currentModalData.nombre+'", "showgrupo" : true}');

			$('.options-header-block p').removeClass('active');
			$('#btn-perfil-usuario').addClass('active');
			$('#perfiles-administrador').addClass('hidden');
			$('.header-perfil-administrador').addClass('hidden');
			$('#perfiles-usuarios').removeClass('hidden');
			$('.header-perfil-usuarios').removeClass('hidden');
		}
	}

	function setActions(){

		$('.general-group-options-container').on('click', '.btn-eliminar-rol', function(){
			var $element = $('.general-group-options-container');
			setBasicInfoModal($element.data('item'));
			modalEliminarRol.openModal();
		});

		$('body').on('click', '.linea-batch .btn-eliminar-rol, .rol-element .btn-eliminar-rol', function(){
			var $element = ( $(this).closest('.rol-element').length>0 ? $(this).closest('.rol-element') : $(this).closest('.linea-batch') );
			setBasicInfoModal($element.data('item'));
			modalEliminarRol.openModal();
		});

		$('body').on('click', '.linea-batch .btn-eliminar-rol-admin, .rol-element .btn-eliminar-rol-admin', function(){
			var $element = ( $(this).closest('.rol-element').length>0 ? $(this).closest('.rol-element') : $(this).closest('.linea-batch') );
			setBasicInfoModal($element.data('item'));
			modalEliminarRolAdmin.openModal();
		});

		$('body').on('click', '.linea-batch .btn-cambiar-rol', function(){
			var $element = $(this).closest('.linea-batch');
			setBasicInfoModal($element.data('item'));
			singleElement = true;
			modalCambiarRol.openModal();
		});

		$('body').on('click', '.linea-batch .btn-quitar-usuarios', function(){
			var $element = $(this).closest('.linea-batch');
			setBasicInfoModal($element.data('item'));
			singleElement = true;
			modalQuitarUsuario.openModal();
		});

		$('.header-actions').on('click', '.btn-cambiar-rol', function(){
			var $element = $('.header-actions');
			setBasicInfoModal($element.data('item'));
			singleElement = false;
			modalCambiarRol.openModal();
		});

		$('.header-actions').on('click', '.btn-quitar-usuarios', function(){
			var $element = $('.header-actions');
			setBasicInfoModal($element.data('item'));
			singleElement = false;
			modalQuitarUsuario.openModal();
		});


		$('.add-item-usuario').on('click', '.btn-agregar-usuario', function(){
			var $element = $(this);
			setBasicInfoModal($element.data('item'));
			modalAgregarUsuario.openModal();
		});

		$('.group-list-block').on('click', '.btn-agregar-usuario', function(){
			configuracionRoles.cancelEdit();
			var $element = $(this).closest('.rol-element');
			setBasicInfoModal($element.data('item'));
			modalAgregarUsuario.openModal();
		});

		$('body').on('click', '.linea-batch .btn-editar-usuario', function(){
			var $element = $(this).closest('.linea-batch');
			setBasicInfoModal($element.data('item'));
			modalEditarUsuario.openModal();
		});

		$('.add-item-usuario').on('click', '.btn-agregar-lineas', function(){
			var $element = $(this);
			setBasicInfoModal($element.data('item'));
			modalAgregarLineas.openModal();
		});

		$('.group-list-block').on('click', '.btn-agregar-lineas', function(){
			configuracionRoles.cancelEdit();
			var $element = $(this).closest('.rol-element');
			setBasicInfoModal($element.data('item'));
			modalAgregarLineas.openModal();
		});

		$('#btn-cancel-changes-nu').click(function(){
			modalCancelarRol.openModal();
		});
	}

	/**Inicio modal agregar rol**/
	function initModalAgregarRol(){
		var processCompleted = false;
		var $form = $('.form-agregar-rol #form-agregar-rol');
		var $input = $form.find('input[name="nombre"]');

		$input.bind('input', function(e){
			var $errori = $form.find('.general-error-tooltip');
			if($errori.length>0){
				$input.removeClass('error').removeClass('error-dd');
				$errori.remove();
			}
		});

		modalAgregarRol = new modalesTelcel($('#modal-agregar-rol'),{
			onInit : function(){
				validateAgregarRol();
				addAction();
			},
			onReset : function(){
				//resetModalDesasociarCuentas();
			},
			onOpen : function(){
				processCompleted = false;
				resetFormModal($('.form-agregar-rol #form-agregar-rol'), 'nuevoRol');
			},
			onClose : function(){

				//Cuando cierre el modal si quieren hacer refresh hay que descomentar esto
				// if(processCompleted)
				// 	location.reload();
			}
		});

		function addAction(){
			// ABRIR AGREGAR LINEAS DESDE MODAL
			$('.btn-agregar-lineas-grupo-modal').click(function(){
				var $element = $(this),
				dataitem = JSON.parse($element.attr('data-item'));

				setBasicInfoModal(dataitem);

				modalAgregarRol.closeModal();
				modalAgregarRolAdmin.closeModal();

				if($element.hasClass('btn-agregar-usuario'))
					modalAgregarUsuario.openModal();
				else
					modalAgregarLineas.openModal();

				$element.removeClass('btn-agregar-usuario').removeClass('btn-agregar-lineas');
			});

		}

		function validateAgregarRol(){

			var $form = $('.form-agregar-rol #form-agregar-rol');

			disableSumbitButton($form, true);

			formElementsModales['nuevoRol']['validator'] = $form.validate({
			  rules: {
				nombre: {
					required: true,
					minlength: 5,
					grupoNombre : true,
			  		maxlength: 45
				}
			  },
			  messages: {
				 nombre: {
				   required: "Es necesario ingresar un nombre para el perfil.",
				   minlength : " El nombre debe tener al menos 5 caracteres.",
				   grupoNombre : "El nombre no debe tener caracteres especiales, números y espacio al inicio o final.",
				   maxlength : "El nombre debe tener un máximo de 45 caracteres."
				 }
			   },
			   errorClass : "error-dd error",
				submitHandler: function(form) {
					if(!formElementsModales['nuevoRol']['sending']){

						formElementsModales['nuevoRol']['sending'] = true;

						$(form).find('button[type="submit"]').prop('disabled', true);

						var self = $(form).serialize();
						var selfArray = $(form).serializeArray();

						generalLoadingIcon(form, true);

						var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

						$.post( urlPOST , { data: self })
						  .done(function( json ) {

						  	var elementData = { name : selfArray[0].value , input : $input };

						  	Services.configuracion.agregarRolSuccessCallback(json, form, elementData, addCreatedElementToHTML );
						  	formElementsModales['nuevoRol']['sending'] = false;
						  	generalLoadingIcon(form, false);
						  	processCompleted = true;

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	//Mensaje de error del SISTEMA
						  	Services.configuracion.agregarRolFailCallback(error, form );
						  	formElementsModales['nuevoRol']['sending'] = false;
						  	generalLoadingIcon(form, false);
						  	processCompleted = true;
						});

					}

				}
			});

			checkGeneralValidForm($form);


		}


		var addCreatedElementToHTML = function (id, name){

			var html = '<div class="col-xs-6 col-sm-6 col-md-4 item-mv"> <div class="rol-element general-rol-element" id="group-'+id+'" data-item = "{&quot;id&quot;: &quot;'+id+'&quot; ,&quot;nombre&quot;: &quot;'+name+'&quot;,&quot;usuarios&quot;: &quot;0&quot;}"> <div class="header-group flexbox clearfix"> <div class="ribbon flexbox"> <span class="icon io-avatar col-sm-2 left-icon-ri" title="Rol de usuario"></span> <div class="flexbox v-align-center col-sm-10 padding-0 name-container"> <strong class="ribbon-content col-sm-10">'+name+'</strong> <input type="text" value="'+name+'" name="editar-alias" class="editar-alias only-alphanumeric meet-regex" maxlength="45" data-regex = "[^0-9A-Za-z-ñÑ\s]+$"/> <button class="simple edit-name-ri col-sm-2 btn-guardar-nombre" title="Guardar Nombre"><span class="icon io-save-doc"></span></button> <button class="simple edit-name-ri col-sm-2 btn-editar-nombre" title="Editar Nombre"><span class="icon io-Admin"></span></button> </div> </div> <div class="icon-container flexbox v-align-center"> <button class="btn-gear simple" title="Configuración"> <span class="icon io-Gear"></span> </button> </div> <div class="col-sm-12 settings-ri"> <div class="col-sm-12 cont-set-ri"> <p class="col-sm-12 title-ri"> <span class="in-text-ri">Configuración</span> <button class="simple btn-close-config" title="Cerrar"> <span class="icon io-Close"></span> </button> </p> <div class="col-sm-12 title-mod"> <span class="icon io-avatar col-xs-2 left-icon-ri"></span> <p class="title-ribon-sri">Administrador de grupos</p> </div> <div class="col-sm-12 submenu-ri"> <div class="first-bloq-ri"> <button class="simple btn-editar-nombre hide-mobile" type="button"> <span class="icon io-lapiz"></span> <span class="in-text-fbr">Cambiar nombre de rol</span> </button> <button class="simple btn-agregar-lineas" type="button"> <span class="icon io-More"></span> <span class="in-text-fbr">Agregar usuario(s)</span> </button> <a class="simple btn-editar-nombre" href="configuracion-1.html"> <span class="icon io-Admin"></span> <span class="in-text-fbr">Ver/Editar permiso(s)</span> </a> <button class="simple btn-eliminar-rol hide-mobile" type="button"> <span class="icon io-Bin"></span> <span class="in-text-fbr">Quitar perfil</span> </button> <a class="simple" href="configuracion-2.html"> <span class="icon io-Message"></span> <span class="in-text-fbr">Configurar notificaciones</span> </a> </div> </div> </div> </div> </div> <div class="body-group"> <div class="extend-imv"> <button type="button" class="btn-like-a btn-agregar-usuarios btn-agregar-lineas">Agregar usuario(s) a este perfil</button> </div> </div> </div> </div>';

			$('#main-view-block .mosaico-view').append(html);

		}

	}
	/**Fin modal agregar rol**/

	/**Inicio modal añadir perfil**/
	function initModalAgregarRolAdmin(){
		var $form = $('#modal-agregar-rol-admin #form-agregar-rol-admin');

		modalAgregarRolAdmin = new modalesTelcel($('#modal-agregar-rol-admin'),{
			onInit : function(){
				validateFormRolAdmin();
				$('#modal-agregar-rol-admin .secondary-modal-header').hide();
			},
			onOpen : function(){
				//checkElements();
			},
			onReset : function(){

				resetFormModal($('.form-agregar-rol-admin #form-agregar-rol-admin'), 'nuevoRolAdmin');
				$('#modal-agregar-rol-admin .main-modal-header').show();
				$('#modal-agregar-rol-admin .secondary-modal-header').hide();
			}
		});

		function checkElements(){

			var $perfilesRadio = $('#perfil-selector-block .perfil-opc');

		  	$perfilesRadio.each(function (index, value) {
		  		var $perfilRadio = $(this),
		  		$radio = $perfilRadio.find('input[type="radio"]'),
		  		$perfil = $('#perfiles-administrador #rol-'+$radio.val());

		  		if($perfil.length>0)
		  			$perfilRadio.addClass('hidden');
		  		else
		  			$perfilRadio.removeClass('hidden');
		  	});


		  	if($perfilesRadio.length == $('#perfil-selector-block .perfil-opc.hidden').length){

		  		$('#modal-agregar-rol-admin #form-agregar-rol-admin').hide();
		  		$('#modal-agregar-rol-admin').addClass('all-created');
		  		$('#modal-agregar-rol-admin .api-msg-info').show();

		  	}
		  	else{
		  		$('#modal-agregar-rol-admin').removeClass('all-created');
		  		$('#modal-agregar-rol-admin .api-msg-info').hide();
		  		$('#modal-agregar-rol-admin #form-agregar-rol-admin').show();
		  	}
		}


		function validateFormRolAdmin(){

			var $form = $('.form-agregar-rol-admin #form-agregar-rol-admin');

			disableSumbitButton($form, true);
			checkTelefonoLength($form);

			formElementsModales['nuevoRolAdmin']['validator'] = $form.validate({
				rules: {
					perfil: {
						required: true
					},
				},
				messages: {
					perfil: {
						required: "Selecciona un perfil.",
					}
				},
				errorClass : "error-dd error",
				errorPlacement: function(error, $element) {

				},
				submitHandler: function(form) {
					if(!formElementsModales['nuevoRolAdmin']['sending']){

						formElementsModales['nuevoRolAdmin']['sending'] = true;
						$(form).find('button[type="submit"]').prop('disabled', true);

						var self = $(form).serialize();

						generalLoadingIcon(form, true);

						var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

						$.post( urlPOST , { data: self })
						  .done(function( json ) {

							Services.configuracion.agregarRolAdminSuccessCallback(json, form, $('#form-agregar-rol-admin input[type="radio"]:checked').val(), updateOnSuccess);
							formElementsModales['nuevoRolAdmin']['sending'] = false;
							$(form).find('button[type="submit"]').prop('disabled', false);
						  	generalLoadingIcon(form, false);

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	Services.configuracion.agregarRolAdminFailCallback(error, form );
						  	formElementsModales['nuevoRolAdmin']['sending'] = false;
						  	generalLoadingIcon(form, false);
						});
					}
				}
			});

			checkGeneralValidForm($form);
		}

		function updateOnSuccess(perfil){

			var htmlPerfil = {
					'administrador' : {
						'html' : '<div class="col-xs-6 col-sm-6 col-md-4 item-mv hidden"> <div class="rol-element" id="rol-administrador" data-item = "{&quot;id&quot;: &quot;administrador&quot; ,&quot;nombre&quot;: &quot;Administrador de grupos&quot;, &quot;usuarios&quot; : &quot;0&quot;, &quot;showgrupo&quot; : true}"> <div class="header-group flexbox clearfix"> <div class="ribbon flexbox"> <span class="icon io-Maletin col-sm-2 left-icon-ri" title="Rol de usuario"></span> <div class="flexbox v-align-center col-sm-10 padding-0 name-container"> <strong class="ribbon-content no-edit col-sm-10">Administrador de grupos</strong> </div> </div> <div class="icon-container flexbox v-align-center"> <button class="btn-gear simple" title="Configuración"> <span class="icon io-Gear"></span> </button> </div> <div class="col-sm-12 settings-ri"> <div class="col-sm-12 cont-set-ri"> <p class="col-sm-12 title-ri"> <span class="in-text-ri">Configuración</span> <button class="simple btn-close-config" title="Cerrar"> <span class="icon io-Close"></span> </button> </p> <div class="col-sm-12 title-mod"> <span class="icon io-Maletin col-xs-2 left-icon-ri"></span> <p class="title-ribon-sri">Administrador de grupos</p> </div> <div class="col-sm-12 submenu-ri"> <div class="first-bloq-ri"> <button class="simple btn-agregar-usuario" type="button"> <span class="icon io-More"></span> <span class="in-text-fbr">Agregar usuario</span> </button> <a class="simple bton btn-editar-nombre" href="configuracion-1-a.html"> <span class="icon io-ojo"></span> <span class="in-text-fbr">Ver permiso(s)</span> </a> <button class="simple bton btn-eliminar-rol-admin hide-mobile" type="button"> <span class="icon io-Bin"></span> <span class="in-text-fbr">Eliminar perfil</span> </button><a class="simple bton" href="configuracion-2.html"> <span class="icon io-Message"></span> <span class="in-text-fbr">Configurar notificaciones</span> </a> </div> </div> </div> </div> </div> <div class="body-group"> <div class="group-total"> <p class="usuarios-total"><strong>[0]</strong> usuarios</p> </div> <div class="extend-imv"> <a href="configuracion-4-a.html" class="see-more-gt" title="Ver usuarios">Ver usuarios</a> </div> </div> </div> </div>',
							'btn' : 'btn-agregar-usuario'
						},

					'inplant' :
						{'html': '<div class="col-xs-6 col-sm-6 col-md-4 item-mv hidden"> <div class="rol-element" id="rol-inplant" data-item = "{&quot;id&quot;: &quot;inplant&quot; ,&quot;nombre&quot;: &quot;Inplant&quot;, &quot;usuarios&quot; : &quot;0&quot;}"> <div class="header-group flexbox clearfix"> <div class="ribbon flexbox"> <span class="icon io-City col-sm-2 left-icon-ri" title="Rol de usuario"></span> <div class="flexbox v-align-center col-sm-10 padding-0 name-container"> <strong class="ribbon-content no-edit col-sm-10">Inplant</strong> </div> </div> <div class="icon-container flexbox v-align-center"> <button class="btn-gear simple" title="Configuración"> <span class="icon io-Gear"></span> </button> </div> <div class="col-sm-12 settings-ri"> <div class="col-sm-12 cont-set-ri"> <p class="col-sm-12 title-ri"> <span class="in-text-ri">Configuración</span> <button class="simple btn-close-config" title="Cerrar"> <span class="icon io-Close"></span> </button> </p> <div class="col-sm-12 title-mod"> <span class="icon io-City col-xs-2 left-icon-ri"></span> <p class="title-ribon-sri">Inplant</p> </div> <div class="col-sm-12 submenu-ri"> <div class="first-bloq-ri"> <button class="simple btn-agregar-usuario" type="button"> <span class="icon io-More"></span> <span class="in-text-fbr">Agregar usuario</span> </button> <a class="simple bton btn-editar-nombre" href="configuracion-1-a.html"> <span class="icon io-ojo"></span> <span class="in-text-fbr">Ver permiso(s)</span> </a> <button class="simple bton btn-eliminar-rol-admin hide-mobile" type="button"> <span class="icon io-Bin"></span> <span class="in-text-fbr">Eliminar perfil</span> </button><a class="simple bton" href="configuracion-2.html"> <span class="icon io-Message"></span> <span class="in-text-fbr">Configurar notificaciones</span> </a> </div> </div> </div> </div> </div> <div class="body-group"> <div class="group-total"> <p class="usuarios-total"><strong>[0]</strong> usuarios</p> </div> <div class="extend-imv"> <a href="configuracion-4-b.html" class="see-more-gt" title="Ver usuarios">Ver usuarios</a> </div> </div> </div> </div>',
						'btn' : 'btn-agregar-usuario'
					},
					'supervisor' : {
						'html': '<div class="col-xs-6 col-sm-6 col-md-4 item-mv hidden"> <div class="rol-element" id="rol-supervisor" data-item = "{&quot;id&quot;: &quot;supervisor&quot; ,&quot;nombre&quot;: &quot;Supervisor de grupo&quot;, &quot;usuarios&quot; : &quot;0&quot;}"> <div class="header-group flexbox clearfix"> <div class="ribbon flexbox"> <span class="icon io-Maletin col-sm-2 left-icon-ri" title="Rol de usuario"></span> <div class="flexbox v-align-center col-sm-10 padding-0 name-container"> <strong class="ribbon-content no-edit col-sm-10">Supervisor de grupo</strong> </div> </div> <div class="icon-container flexbox v-align-center"> <button class="btn-gear simple" title="Configuración"> <span class="icon io-Gear"></span> </button> </div> <div class="col-sm-12 settings-ri"> <div class="col-sm-12 cont-set-ri"> <p class="col-sm-12 title-ri"> <span class="in-text-ri">Configuración</span> <button class="simple btn-close-config" title="Cerrar"> <span class="icon io-Close"></span> </button> </p> <div class="col-sm-12 title-mod"> <span class="icon io-City col-xs-2 left-icon-ri"></span> <p class="title-ribon-sri">Supervisor</p> </div> <div class="col-sm-12 submenu-ri"> <div class="first-bloq-ri"> <button class="simple btn-agregar-lineas" type="button"> <span class="icon io-More"></span> <span class="in-text-fbr">Agregar usuario(s)</span> </button> <a class="simple bton btn-editar-nombre" href="configuracion-1-c.html"> <span class="icon io-ojo"></span> <span class="in-text-fbr">Ver permiso(s)</span> </a> <button class="simple bton btn-eliminar-rol-admin hide-mobile" type="button"> <span class="icon io-Bin"></span> <span class="in-text-fbr">Quitar perfil</span> </button><a class="simple bton" href="configuracion-2.html"> <span class="icon io-Message"></span> <span class="in-text-fbr">Configurar notificaciones</span> </a> </div> </div> </div> </div> </div> <div class="body-group"> <div class="group-total"> <p class="usuarios-total"><strong>[500]</strong> usuarios</p> </div> <div class="extend-imv"> <a href="configuracion-4-c.html" class="see-more-gt" title="Ver usuarios">Ver usuarios</a> </div> </div> </div> </div>',
						'btn' : 'btn-agregar-lineas'
					}
				};

				_modalAgregarRolAdmin.isFirstTime = true;
				_modalAgregarRolAdmin.done = false;
				_modalAgregarRolAdmin.perfil = perfil;

				var $added = $('#rol-'+perfil);

				if($added.length<1){
					$('#perfiles-administrador').append(htmlPerfil[perfil].html);
					$added = $('#rol-'+perfil);
				}

				_modalAgregarRolAdmin.element = $added;

				modalAgregarRolAdmin.closeModal();
				$added.find('.btn-agregar-usuario').trigger('click');
		}


	}
	/**Fin modal añadir perfil**/

	/**Inicio modal agregar líneas**/
	function initmodalAgregarLineas(){
		var processCompleted = false;

		modalAgregarLineas = new modalesTelcel($('#modal-agregar-usuarios'),{
			onInit : function(){
				setActions();
			},
			onReset : function(){
				processCompleted = false;
			},
			onOpen : function(){
				resetModal();
			},
			onClose : function(){
				//Cuando cierre el modal si quieren hacer refresh hay que descomentar esto
				// if(processCompleted)
				// 	location.reload();
			}
		});

		function setActions(){

			$('#modal-agregar-usuarios #componente-ingresar-lineas .lineas-arbol').on('click', '#btn-add-lineas-arbol', function(){
				var dataArbol = ingresarLineasComponent.getDataArbol();
				if(dataArbol.length>0)
		 			postAgregarLineas(dataArbol, 'arbol');
			});

			$('#modal-agregar-usuarios #componente-ingresar-lineas .lineas-autocomplete').on('click', '#btn-add-lineas-autocomplete', function(){
				var dataAutocomplete = ingresarLineasComponent.getDataAutocomplete();
				if(dataAutocomplete.length>0)
					postAgregarLineas(dataAutocomplete, 'autocomplete');
			});


			$('#modal-agregar-usuarios #componente-ingresar-lineas .lineas-archivo').on('click', '#btn-add-lineas-archivo', function(e){
				e.preventDefault();
				var dataArchivo = ingresarLineasComponent.getDataArchivo();
				Services.configuracion.postAgregarLineasArchivo(dataArchivo,postAgregarLineas, showInvalidErrorArchivo);
			});

		}

		//Simular error de que es invalido el archivo
		function showInvalidErrorArchivo(){
			var msg = 'Este archivo está dañado o es ilegible, intenta con un nuevo archivo.';

			$('.lineas-archivo .extra-info').hide();
			$('.lineas-archivo .add-lines-ge-mod' ).append('<div class="error-dd error">'+msg+'</div>');
			$('#archivo').parent().addClass('error');

			$('#btn-add-lineas-archivo').prop('disabled', true);
		}

		function postAgregarLineas(dataPost, type){

			if(!formElementsModales['agregarLineas']['sending']){

				var form = '#modal-agregar-usuarios .in-cont-mod .form-modal-agregar-usuarios';

				nextStep('#modal-agregar-usuarios .step-2','#modal-agregar-usuarios .step-1');

				$('#modal-agregar-usuarios .loading-block-screen').show();

				formElementsModales['agregarLineas']['sending'] = true;

				$('#btn-add-lineas-arbol').prop('disabled', true);


				if(type==="archivo"){
					var postObject =
					{
				        url: Services.apiURL.agregarUsuariosArchivo(),
				        type: 'POST',
				        data: { lineas: dataPost, rol : currentModalData.id },
				        cache: false,
				        dataType: 'json',
				        processData: false, // Don't process the files
				        contentType: false, // Set content type to false as jQuery will tell the server its a query string request
				        success : function (data, textStatus, jqXHR){ onSuccess(data);},
				        error : function(jqXHR, textStatus, errorThrown){ onError(); }
				    }

					$.ajax(postObject);
					processCompleted = true;

				}

				else{
					$.post( Services.apiURL.agregarUsuarios() , { lineas: dataPost, rol : currentModalData.id })
					  .done(function (data, textStatus, jqXHR){ onSuccess(data);})
					  .fail(function(jqXHR, textStatus, errorThrown){onError()});
				}

			}


			function onSuccess(json, textStatus, jqXHR){
				Services.configuracion.agregarLineasSuccessCallback(json, mostrarTablas,nextStep, {text : currentModalData.nombre});
				formElementsModales['agregarLineas']['sending'] = false;

				processCompleted = true;
			}

			function onError(jqXHR, textStatus, errorThrown){
				Services.configuracion.getAgregarLineasFailResponse(errorThrown);
				formElementsModales['agregarLineas']['sending'] = false;
			}

			function mostrarTablas(data){

				if(data.success.length>0){
					$('#modal-agregar-usuarios .step-3 .total-lineas-success').html(data.success.length);

					$('#modal-agregar-usuarios .step-3 .added-lines .div-nal').html('');

					$.each(data.success, function( index, value ) {
					  $('#modal-agregar-usuarios .step-3 .added-lines .div-nal').append('<div class="col-xs-12 col-sm-6"><p>'+value+'</p></div>');
					});

					$('#modal-agregar-usuarios .step-3 .error-success').show();
			  		$('#modal-agregar-usuarios .step-3 .added-lines').show();
				}

				if(data.error.length>0){
					$('#modal-agregar-usuarios .step-3 .not-added-lines .div-nal').html('');

					$('#modal-agregar-usuarios .step-3 .not-added-lines .div-nal').append('<div class="col-xs-6 col-sm-6"><p>	<b>Línea</b></p></div><div class="col-xs-6 col-sm-6"><p><b>Motivo</b></p></div>');

					$.each(data.error, function( index, value ) {
					  $('#modal-agregar-usuarios .step-3 .not-added-lines .div-nal').append('<div class="col-xs-6 col-sm-6"><p>'+value.numero+'</p></div><div class="col-xs-6 col-sm-6"><p>'+value.motivo+'</p></div>');
					});

					$('#modal-agregar-usuarios .step-3 .total-lineas-error').html(data.error.length);

			  		$('#modal-agregar-usuarios .step-3 .error-msg').show();
			  		$('#modal-agregar-usuarios .step-3 .not-added-lines').show();
			  	}

			}
		}

		function resetModal(){
			ingresarLineasComponent.reset();

			$('#modal-agregar-usuarios .loading-block-screen').hide();
			$('#modal-agregar-usuarios .step-1').show();
			$('#modal-agregar-usuarios .step-2, #modal-agregar-usuarios .step-3').hide();
			$('#modal-agregar-usuarios .error-msg').hide();
			$('#modal-agregar-usuarios .step-3 .error-success').hide();
			$('#modal-agregar-usuarios .step-3 .info-added-lines').hide();
		}


		function nextStep(show, hide){
			$(hide).hide();
			$(show).show();
		}

	}
	/**Fin modal agregar líneas**/

	/**Inicio modal quitar usuario**/
	function initModalQuitarUsuario(){
		var _mpoAccionMasiva = { data: [], allChecked : false };

		modalQuitarUsuario = new modalesTelcel($('#modal-quitar-usuario'),{
			onInit : function(){
				setActions();
				resetElements();
			},
			onReset : function(){
				resetElements();
			},
			onOpen : function(){
				if(!singleElement){
					$('.single-element').hide();
					$('.multiple-elements').show();
					setSelectedData();
				}
				else{
					$('.multiple-elements').hide();
					$('.single-element').show();
				}

				$('.single-msg, .multiple-lines').hide();

			},
			onClose : function(){
			}
		});

		function resetElements(){
			$('#modal-quitar-usuario .loading-block-screen').hide();
			$('#modal-quitar-usuario .step-1').show();
			$('#modal-quitar-usuario .step-2, #modal-quitar-usuario .step-3').hide();
			$('#modal-quitar-usuario .error-msg').hide();
			$('#modal-quitar-usuario .step-3 .error-success').hide();
			$('#modal-quitar-usuario .step-3 .info-added-lines').hide();
		}

		function setSelectedData(){
			_mpoAccionMasiva = generalCheckBoxAll.getCheckedElements();
			_mpoAccionMasiva.id = currentModalData.id;

			$('.total-usuarios-txt').html(_mpoAccionMasiva.total);
		}


		function setActions(){
			$('#btn-confirmar-quitar').click(function(){
				postEliminarUsuarios();
			});
		}

		function postEliminarUsuarios(){
			if(!formElementsModales['eliminarUsuario']['sending']){
				var form = '#form-quitar-usuario';

				$('#modal-quitar-usuario .step-1').hide();
				$('#modal-quitar-usuario .loading-block-screen').show();
				$('#modal-quitar-usuario .step-2').show();

				formElementsModales['eliminarUsuario']['sending'] = true;
				$('#btn-confirmar-quitar').prop('disabled', true);

				generalLoadingIcon(form, true);

				var urlPOST = Services.apiURL.eliminarUsuarioRol();

				$.post( urlPOST , { data: currentModalData.id, related : (singleElement ? currentModalData : _mpoAccionMasiva) })
				  .done(function( json ) {

					Services.configuracion.eliminarUsuarioRolSuccessCallback(json, form, mostrarTablas, {isMultiple : ( _mpoAccionMasiva.total>1 && !singleElement ) , rol : 'Usuario final' });
					formElementsModales['eliminarUsuario']['sending'] = false;
					$('#btn-confirmar-quitar').prop('disabled', false);
				  	generalLoadingIcon(form, false);

				  })
				  .fail(function( jqxhr, textStatus, error ) {
				  	Services.configuracion.eliminarUsuarioRolFailCallback(error, form );
				  	formElementsModales['eliminarUsuario']['sending'] = false;
				  	generalLoadingIcon(form, false);
				});
			}
		}

		function mostrarTablas(data){

			if(data.success.length>0){
				$('#modal-quitar-usuario .step-3 .total-lineas-success').html(data.success.length);

				$('#modal-quitar-usuario .step-3 .added-lines .div-nal').html('');

				$.each(data.success, function( index, value ) {
				  $('#modal-quitar-usuario .step-3 .added-lines .div-nal').append('<div class="col-xs-12 col-sm-6"><p>'+value+'</p></div>');
				});

				$('#modal-quitar-usuario .step-3 .error-success').show();
		  		$('#modal-quitar-usuario .step-3 .added-lines').show();
			}

			if(data.error.length>0){
				$('#modal-quitar-usuario .step-3 .not-added-lines .div-nal').html('');

				$('#modal-quitar-usuario .step-3 .not-added-lines .div-nal').append('<div class="col-xs-6 col-sm-6"><p>	<b>Línea</b></p></div><div class="col-xs-6 col-sm-6"><p><b>Motivo</b></p></div>');

				$.each(data.error, function( index, value ) {
				  $('#modal-quitar-usuario .step-3 .not-added-lines .div-nal').append('<div class="col-xs-6 col-sm-6"><p>'+value.numero+'</p></div><div class="col-xs-6 col-sm-6"><p>'+value.motivo+'</p></div>');
				});

				$('#modal-quitar-usuario .step-3 .total-lineas-error').html(data.error.length);

		  		$('#modal-quitar-usuario .step-3 .error-msg').show();
		  		$('#modal-quitar-usuario .step-3 .not-added-lines').show();
		  	}

		}
	}
	/**Fin modal quitar usuario**/

	/**Inicio modal cambiar rol**/
	function initModalCambiarRol(){
		var _mpoAccionMasiva = { data: [], allChecked : false };
		var $modal = $('#modal-cambiar-rol');
		var $arbol = $modal.find('.tree-grupos'),
		$grupo = $arbol.closest('.grupo-selector-block'),
		arbolId = $grupo.attr('id'),
		arbolFlag = false,
		currently_open = false,
		initialSize = 0;

		function setResize(){
			var size = null,
			type = $modal.find('input[name="usuariorol"]').val();
			initialSize = $( window ).width();

			$( window ).resize(function() {
				size = $( window ).width();

				if(initialSize>size && currently_open && type=='administrador')
					onResize();
			});
		}

		function onResize(){

			$modal.find('input[name="usuariorol"]').trigger('change');

			initialSize = $( window ).width();
		}

		modalCambiarRol = new modalesTelcel($('#modal-cambiar-rol'),{
			onInit : function(){
				setResize();
				validateForm();
				setActions();
				resetElements();
			},
			onReset : function(){
				resetElements();
			},
			onOpen : function(){

				$grupo.addClass('hidden');

				if(!singleElement){
					$('.single-element').hide();
					$('.multiple-elements').show();
					setSelectedData();
				}
				else{
					$('.multiple-elements').hide();
					$('.single-element').show();
				}

				$('.single-msg, .multiple-lines').hide();

				resetFormModal($('.form-cambiar-rol #form-cambiar-rol'), 'cambiarRol');

				currently_open = true;
			},
			onClose : function(){
				if($arbol.length>0 && arbolFlag){
					$arbol.jstree(true).deselect_all();
	  				$arbol.jstree(true).close_all();
					$('#'+arbolId).addClass('hidden');
				}

				currently_open = false;
			}
		});

		function setActions(){
			$('#usuariorol').change(function(){
				var $select = $(this),
				value = $select.val();
				checkShowArbol(value);
			});
		}

		function checkShowArbol(perfil){
			var $form = $('.form-cambiar-rol #form-cambiar-rol');

			if(perfil == 'administrador' && !is_mobile()){
				if(!arbolFlag){
					ingresarGruposComponent.initArbol($grupo, arbolId);
					arbolFlag = true;
				}

	  			$modal.find('.grupo-selector-block').removeClass('hidden');
	  			checkGeneralValidForm($form, validIngresarGruposComponentTotal);
			}
	  		else{
	  			if($arbol.length>0 && arbolFlag){
	  				$arbol.jstree(true).deselect_all();
	  				$arbol.jstree(true).close_all();
	  			}

	  			checkGeneralValidForm($form);

	  			if(perfil=='administrador')
	  				$modal.find('.grupo-selector-block').removeClass('hidden');
	  			else
	  				$modal.find('.grupo-selector-block').addClass('hidden');
	  		}

	  		//Ejecutar validación
	  		setTimeout(
	  			function(){
	  				$('#usuariorol').trigger('change');
	  			}, 500);

		}

		function validIngresarGruposComponentTotal(){
			var valid = false,
			data = $arbol.jstree('get_selected');

			if(data.length>0)
				valid = true;

			return valid;
		}

		function resetElements(){

			$('#modal-cambiar-rol .loading-block-screen').hide();
			$('#modal-cambiar-rol .step-1').show();
			$('#modal-cambiar-rol .step-2, #modal-cambiar-rol .step-3').hide();
			$('#modal-cambiar-rol .error-msg').hide();
			$('#modal-cambiar-rol .step-3 .error-success').hide();
			$('#modal-cambiar-rol .step-3 .info-added-lines').hide();
		}

		function setSelectedData(){
			_mpoAccionMasiva = generalCheckBoxAll.getCheckedElements();
			_mpoAccionMasiva.id = currentModalData.id;
		}

		function validateForm(){
			var $form = $('.form-cambiar-rol #form-cambiar-rol');

			disableSumbitButton($form, true);
			checkTelefonoLength($form);

			formElementsModales['cambiarRol']['validator'] = $form.validate({
			ignore: "",
				onkeyup:  function(element) { $(element).valid(); },
				rules: {
					"usuariorol": {
						required: true
					}
				},
				messages: {
					usuariorol : {
						required : "Ingresa un perfil."
					}
				},
				errorClass : "error-dd error",
				errorPlacement: function(error, $element) {
				   	var $parent = $element.parent().parent();
				   	$parent.append( error );
				},
				submitHandler: function(form) {
					if(!formElementsModales['cambiarRol']['sending']){
						$('#modal-cambiar-rol .step-1').hide();
						$('#modal-cambiar-rol .loading-block-screen').show();
						$('#modal-cambiar-rol .step-2').show();

						formElementsModales['cambiarRol']['sending'] = true;
						$(form).find('button[type="submit"]').prop('disabled', true);

						var self = $(form).serialize();

						generalLoadingIcon(form, true);

						var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

						$.post( urlPOST , { data: self, related : (singleElement ? currentModalData : _mpoAccionMasiva) })
						  .done(function( json ) {

							Services.configuracion.cambiarRolSuccessCallback(json, form, mostrarTablas, {isMultiple : ( _mpoAccionMasiva.total>1 && !singleElement ), rol : $('#modal-cambiar-rol #usuariorol :selected').data('rol') });
							formElementsModales['cambiarRol']['sending'] = false;
							$(form).find('button[type="submit"]').prop('disabled', false);
						  	generalLoadingIcon(form, false);

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	Services.configuracion.cambiarRolFailCallback(error, form );
						  	formElementsModales['cambiarRol']['sending'] = false;
						  	generalLoadingIcon(form, false);
						});
					}
				}
			});

			checkGeneralValidForm($form);
		}

		function mostrarTablas(data){

			if(data.success.length>0){
				$('#modal-cambiar-rol .step-3 .total-lineas-success').html(data.success.length);

				$('#modal-cambiar-rol .step-3 .added-lines .div-nal').html('');

				$.each(data.success, function( index, value ) {
				  $('#modal-cambiar-rol .step-3 .added-lines .div-nal').append('<div class="col-xs-12 col-sm-6"><p>'+value+'</p></div>');
				});

				$('#modal-cambiar-rol .step-3 .error-success').show();
		  		$('#modal-cambiar-rol .step-3 .added-lines').show();
			}

			if(data.error.length>0){
				$('#modal-cambiar-rol .step-3 .not-added-lines .div-nal').html('');

				$('#modal-cambiar-rol .step-3 .not-added-lines .div-nal').append('<div class="col-xs-6 col-sm-6"><p>	<b>Línea</b></p></div><div class="col-xs-6 col-sm-6"><p><b>Motivo</b></p></div>');

				$.each(data.error, function( index, value ) {
				  $('#modal-cambiar-rol .step-3 .not-added-lines .div-nal').append('<div class="col-xs-6 col-sm-6"><p>'+value.numero+'</p></div><div class="col-xs-6 col-sm-6"><p>'+value.motivo+'</p></div>');
				});

				$('#modal-cambiar-rol .step-3 .total-lineas-error').html(data.error.length);

		  		$('#modal-cambiar-rol .step-3 .error-msg').show();
		  		$('#modal-cambiar-rol .step-3 .not-added-lines').show();
		  	}

		}
	}
	/**Fin modal cambiar rol**/

	/**Inicio modal eliminar rol**/
	function initModalEliminarRol(){
		var processCompleted = false;

		modalEliminarRol = new modalesTelcel($('#modal-eliminar-rol'),{
			onInit : function(){
				setModalActions();
				$('#confirmar-eliminar-rol').hide();
				$('#eliminar-rol-confirmacion').hide();
				$('#eliminar-rol-ya-eliminado').hide();
			},
			onReset : function(){
				processCompleted = false;
				$('#confirmar-eliminar-rol').hide();
			  	$('#eliminar-rol-confirmacion').hide();
			  	$('#eliminar-rol-ya-eliminado').hide();
			},
			onOpen : function(){
				$('#confirmar-eliminar-rol').show();
				$('#modal-eliminar-rol .total-usuarios-txt').html(currentModalData.usuarios);
				//consultarLineas();
			},
			onClose : function(){

				//Cuando cierre el modal si quieren hacer refresh hay que descomentar esto
				// if(processCompleted)
				// 	location.reload();
			}
		});

		function consultarLineas(){

			if(!formElementsModales['consultarLineas']['sending']){

				formElementsModales['consultarLineas']['sending'] = true;

				generalLoadingIcon('#modal-eliminar-rol .in-cont-mod', true);

				var postURL = Services.apiURL.consultarLineas();

				$.post( postURL , { id: currentModalData.id })
				  .done(function( json ) {

				  	//Services.gestionGrupos.consultarLineasSuccessCallback(json,currentModalData, removeElementFromHTML);

				  	formElementsModales['consultarLineas']['sending'] = false;
				  	generalLoadingIcon('#modal-eliminar-rol .in-cont-mod', false);

				  	processCompleted = true;

				  })
				  .fail(function( jqxhr, textStatus, error ) {

				  	//Services.gestionGrupos.consultarLineasFailCallback(error, form);
				  	formElementsModales['consultarLineas']['sending'] = false;
				  	generalLoadingIcon('#modal-eliminar-rol .in-cont-mod', false);

				});

			}

			var removeElementFromHTML = function (idDeleted){
				$('#group-'+idDeleted).parent().remove();
			}
		}

		function setModalActions(){
			$('#btn-eliminar-rol').click(function(){
				postSaveDeleteRol();
			});
		}

		function postSaveDeleteRol(){
			var form = '#modal-eliminar-rol .in-cont-mod';

			if(!formElementsModales['eliminarRol']['sending']){

				formElementsModales['eliminarRol']['sending'] = true;

				generalLoadingIcon(form, true);

				var postURL = Services.apiURL.eliminarRol();

				$.post( postURL , { delete: currentModalData.id })
				  .done(function( json ) {
				  	Services.configuracion.eliminarRolSuccessCallback(json, form, currentModalData );
				  	formElementsModales['eliminarRol']['sending'] = false;
				  	generalLoadingIcon(form, false);

				  })
				  .fail(function( jqxhr, textStatus, error ) {
				  	Services.configuracion.eliminarRolFailCallback(error, form);
				  	formElementsModales['eliminarRol']['sending'] = false;
				  	generalLoadingIcon(form, false);
				});
			}
		}

	}
	/**Fin modal eliminar rol**/

	/**Inicio modal eliminar rol admin**/
	function initModalEliminarRolAdmin(){
		var processCompleted = false,
		$modal = $('#modal-eliminar-rol-admin');

		modalEliminarRolAdmin = new modalesTelcel($('#modal-eliminar-rol-admin'),{
			onInit : function(){
				setModalActions();
				$('#confirmar-eliminar-rol-admin').hide();
				$('#eliminar-rol-admin-confirmacion').hide();
				$('#eliminar-rol-admin-ya-eliminado').hide();
			},
			onReset : function(){
				processCompleted = false;
				$('#confirmar-eliminar-rol-admin').hide();
			  	$('#eliminar-rol-admin-confirmacion').hide();
			  	$('#eliminar-rol-admin-ya-eliminado').hide();
			},
			onOpen : function(){
				$('#confirmar-eliminar-rol-admin').show();
				setCurrentPerfilData();
			},
			onClose : function(){

				//Cuando cierre el modal si quieren hacer refresh hay que descomentar esto
				// if(processCompleted)
				// 	location.reload();
			}
		});


		function setCurrentPerfilData(){

			$('#modal-eliminar-rol-admin .total-usuarios-txt').html(currentModalData.usuarios);

			if(typeof currentModalData.showgrupo!='undefined' && currentModalData.showgrupo ){
				$modal.find('.sublevel-tm .icon').removeClass('io-avatar io-City').addClass('io-Maletin');
			}
			else{
				$modal.find('.sublevel-tm .icon').removeClass('io-avatar io-Maletin').addClass('io-City');
			}

		}

		function setModalActions(){
			$('#btn-eliminar-rol-admin').click(function(){
				postSaveDeleteRol();
			});
		}

		function postSaveDeleteRol(){
			var form = '#modal-eliminar-rol-admin .in-cont-mod';

			if(!formElementsModales['eliminarRol']['sending']){

				formElementsModales['eliminarRol']['sending'] = true;

				generalLoadingIcon(form, true);

				var postURL = Services.apiURL.eliminarRol();

				$.post( postURL , { delete: currentModalData.id })
				  .done(function( json ) {
				  	Services.configuracion.eliminarRolAdminSuccessCallback(json, form, currentModalData, updateOnSuccess );
				  	formElementsModales['eliminarRol']['sending'] = false;
				  	generalLoadingIcon(form, false);

				  })
				  .fail(function( jqxhr, textStatus, error ) {
				  	Services.configuracion.eliminarRolAdminFailCallback(error, form);
				  	formElementsModales['eliminarRol']['sending'] = false;
				  	generalLoadingIcon(form, false);
				});
			}
		}

		function updateOnSuccess(){
			var perfiles = ['administrador', 'inplant', 'supervisor'];

			$.each(perfiles, function( index, value ) {
			  if($('#rol-'+value).length==0)
			  	allExist = false;
			});

			if(allExist)
				$('.btn-add-rol-admin').addClass('simulate-disabled');
			else
				$('.btn-add-rol-admin').removeClass('simulate-disabled');
		}

	}
	/**Fin modal eliminar rol admin**/

	/**Inicio modal agregar usuario**/
	function initModalAgregarUsuario(){
		var $form = $('#modal-agregar-usuario #form-agregar-usuario');
		var $input = $form.find('input[name="email"]');
		var type = 'inplant',
		$modal = $('#modal-agregar-usuario'),
		$arbol = $modal.find('.tree-grupos'),
		$grupo = $arbol.closest('.grupo-selector-block'),
		arbolId = $grupo.attr('id'),
		currently_open = false,
		initialSize = 0;

		$input.bind('input', function(e){
			var $errori = $form.find('.general-error-tooltip');
			if($errori.length>0){
				$input.removeClass('error').removeClass('error-dd');
				$errori.remove();
			}
		});

		function setResize(){
			var size = null;
			initialSize = $( window ).width();

			$( window ).resize(function() {
				size = $( window ).width();

				if(initialSize>size && currently_open && type=='administrador')
					onResize();
			});
		}

		function onResize(){

			if(is_mobile())
				checkGeneralValidForm($form);
			else
				checkGeneralValidForm($form, validIngresarGruposComponentTotal);

			$form.find('input[name="lada"]').trigger('keyup');

			initialSize = $( window ).width();
		}

		modalAgregarUsuario = new modalesTelcel($('#modal-agregar-usuario'),{
			onInit : function(){
				setResize();
				validateFormAgregarUsuario();
				$('#modal-agregar-usuario .secondary-modal-header').hide();

			},
			onOpen : function(){

				setCurrentPerfilData();
				currently_open = true;

			},
			onReset : function(){

				if(_modalAgregarRolAdmin.isFirstTime){

					if(_modalAgregarRolAdmin.done)
						_modalAgregarRolAdmin.element.parent().removeClass('hidden');
					else
						_modalAgregarRolAdmin.element.parent().remove();
				}

				if(type=='administrador')
					ingresarGruposComponent.reset(arbolId);

				resetFormModal($('.form-agregar-usuario #form-agregar-usuario'), 'nuevoUsuario');
				$('#modal-agregar-usuario .main-modal-header').show();
				$('#modal-agregar-usuario .secondary-modal-header').hide();
			},
			onClose : function(){
				currently_open = false;
			}
		});


		function setCurrentPerfilData(){

			if(typeof currentModalData.showgrupo!='undefined' && currentModalData.showgrupo ){
				$grupo.removeClass('hidden');
				$grupo.find('.grupo').addClass('required');
				$modal.find('.sublevel-tm .icon').removeClass('io-avatar io-City').addClass('io-Maletin');
				type = 'administrador';
				ingresarGruposComponent.inicializar();

				if(!is_mobile())
					checkGeneralValidForm($form, validIngresarGruposComponentTotal);
				else
					checkGeneralValidForm($form);
			}
			else{
				$grupo.addClass('hidden');
				$grupo.find('.grupo');
				$grupo.find('.grupo').removeClass('required');
				$modal.find('.sublevel-tm .icon').removeClass('io-avatar io-Maletin').addClass('io-City');
				type = 'inplant';
				checkGeneralValidForm($form);
			}

			_modalAgregarRolAdmin.perfil = type;
		}

		function validateFormAgregarUsuario(){
			var $form = $('.form-agregar-usuario #form-agregar-usuario');

			disableSumbitButton($form, true);
			checkTelefonoLength($form);

			formElementsModales['nuevoUsuario']['validator'] = $form.validate({
			ignore: "",
				onkeyup:  function(element) { $(element).valid(); },
				rules: {
					email: {
						required: true,
						email: true
					},
					nombre: {
						required: true,
						basicName: true,
						minlength: 3,
						maxlength: 40
					},
					numero : {
						digits: true,
						minlength: 10,
						maxlength: 10,
						required : {
							depends: function(element) {
								var $lada = $form.find('.lada').val(),
								$telefono = $form.find('.telefono').val(),
								$ext = $form.find('.extension').val();

			                	return $lada.length>0 || $telefono.length>0 || $ext.length;
			                }
						}
					},
					extension : {
						digits: true
					}
				},
				messages: {
					email: {
						required: "Ingresa un correo electrónico.",
						email: "Ingresa un correo electrónico válido."
					},
					nombre: {
						required : "Ingresa el nombre del usuario.",
						basicName: "Este campo solo acepta letras, números, punto y espacios.",
						minlength: "El nombre debe contener al menos 3 caracteres.",
					   	maxlength : "El nombre no debe ser mayor a 40 caracteres."
					},
					numero: {
						required: "Ingresa un número de contacto.",
						digits: "Ingresa un número válido.",
						minlength: "Ingresa un número de 10 dígitos.",
						maxlength: "Ingresa un número de 10 dígitos."
					},
					extension : {
						digits: "Ingresa una extensión válida."
					}
				},errorClass : "error-dd error",
				errorPlacement: function(error, $element) {
				   	var $parent = $element.parent();

				   	if($element.attr("name") == "numero"){
				   		$form.find('.lada').addClass('error-dd error');
				   		$form.find('.telefono').addClass('error-dd error');
				   		$parent.append( error );
				   	}
				   	else if( $.inArray( $element.attr("name"), ['lada', 'telefono']) < 0){
				   		$parent.append( error );
				   	}

				},
				unhighlight: function(element, errorClass, validClass) {

					var $element = $(element);
					if(!$element.hasClass('lada') && !$element.hasClass('telefono') && !$element.hasClass('extension'))
		        		$element.removeClass('error error-dd').addClass('valid');
		        	else{
		        		var $numero = $form.find('.numero');
		        		if($numero.valid()){
				  			$('#numero-error').remove();
				  			$('#lada-error').remove();
				  			$('#telefono-error').remove();
				    		$form.find('.lada').removeClass('error-dd error');
				    		$form.find('.telefono').removeClass('error-dd error');
				  		}
		        	}

		        },
		        highlight : function(element, errorClass){
		        	var $element = $(element);
		        	$element.removeClass('valid').addClass('error error-dd');

		        	if($element.hasClass('numero')){
		        		$form.find('.lada').addClass('error-dd error');
				   		$form.find('.telefono').addClass('error-dd error');
		        	}

		        },
				submitHandler: function(form) {
					if(!formElementsModales['nuevoUsuario']['sending']){
						formElementsModales['nuevoUsuario']['sending'] = true;
						$(form).find('button[type="submit"]').prop('disabled', true);

						var self = $(form).serialize();
						var selfArray = $(form).serializeArray();

						generalLoadingIcon(form, true);

						var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

						$.post( urlPOST , { data: self, related : currentModalData.id})
						  .done(function( json ) {

						  	var gruposData = (type=='administrador' ? ingresarGruposComponent.getDataArbol(arbolId) : [] );

							var elementData = {
								rol : currentModalData.nombre,
								correo: selfArray[1].value,
								nombre : selfArray[0].value,
								grupos : gruposData
							};

							Services.configuracion.agregarUsuarioSuccessCallback(json, form, elementData, updateOnSuccess);
							formElementsModales['nuevoUsuario']['sending'] = false;
							$(form).find('button[type="submit"]').prop('disabled', false);
						  	generalLoadingIcon(form, false);

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	Services.configuracion.agregarUsuarioFailCallback(error, form );
						  	formElementsModales['nuevoUsuario']['sending'] = false;
						  	generalLoadingIcon(form, false);
						});
					}
				}
			});
		}

		function updateOnSuccess(msg){
			$('#modal-agregar-usuario .api-msg-success').html('<p>'+msg+'</p>');

			var $rol = $('#rol-'+type);

			if($rol.length>0){
				var $bodygroup = $rol.find('.body-group'),
				$total = $bodygroup.find('.usuarios-total strong'),
				total =  parseInt(($total.html()).replace('[', '').replace(']', ''));
				total+=1,
				data = $rol.data('item');

				data.usuarios = total;

				$rol.data('item', data);

				$bodygroup.find('.btn-agregar-usuarios').addClass('hidden');
				$bodygroup.find('.group-total').removeClass('hidden');
				$bodygroup.find('.see-more-gt').removeClass('hidden');

				$total.html('['+total+']')
			}

			_modalAgregarRolAdmin.done = true;

		}

		function validIngresarGruposComponentTotal()
		{
			var valid = false,
			data = $arbol.jstree('get_selected');

			if(data.length>0)
				valid = true;

			return valid;
		}

	}
	/**Fin modal agregar usuario**/

	/**Inicio modal editar usuario**/
	function initModalEditarUsuario(){
		var processCompleted = false;
		var $modal = $('#modal-editar-usuario');
		var $formContainer = null;
  		var index = null;
  		var $parent = null;
  		var $arbol = $modal.find('.tree-grupos'),
  		currently_open = false,
  		initialSize = 0;

  		function setResize(){
			var size = null;
			initialSize = $( window ).width();

			$( window ).resize(function() {
				size = $( window ).width();

				if(initialSize>size && currently_open && type=='administrador')
					onResize();
			});
		}

		function onResize(){
			$('#perfilusuario').trigger('change');
			initialSize = $( window ).width();
		}

		modalEditarUsuario = new modalesTelcel($modal,{
			onInit : function(){
				setResize();
				validateFormEditarUsuario();
				setActions();
			},
			onReset : function(){
				resetFormModal($('.form-editar-usuario #form-editar-usuario'), 'editarUsuario');
			},
			onOpen : function(){
				processCompleted = false;
				setElementInfo();
				currently_open = true;

			},
			onClose : function(){
				currently_open = false;
				//Cuando cierre el modal si quieren hacer refresh hay que descomentar esto
				// if(processCompleted)
				// 	location.reload();
			}
		});


		function setActions(){
			$('#perfilusuario').change(function(){
				var $select = $(this),
				value = $select.val();

				checkShowArbol(value);

			});
		}

		function checkShowArbol(perfil){
			var $form = $('.form-editar-usuario #form-editar-usuario');

			if(perfil == 'administrador' && !is_mobile()){
	  			$modal.find('.grupo-selector-block').removeClass('hidden');
	  			checkGeneralValidForm($form, validIngresarGruposComponentTotal);
			}
	  		else{
	  			checkGeneralValidForm($form);

	  			if(perfil == 'administrador')
	  				$modal.find('.grupo-selector-block').removeClass('hidden');
	  			else
	  				$modal.find('.grupo-selector-block').addClass('hidden');
	  		}

	  		//Ejecutar validación
	  		setTimeout(
	  			function(){
	  				$modal.find('input[name="email"]').trigger('keydown');
	  			}, 500);

		}

		function validIngresarGruposComponentTotal(){
			var valid = false,
			data = $arbol.jstree('get_selected');

			if(data.length>0)
				valid = true;

			return valid;
		}

		function setElementInfo(){
	  		var meta = currentModalData;

	  		$modal.find('input[name="numero"]').val(meta.numero);
	  		$modal.find('input[name="email"]').val(meta.correoelectronico);
	  		$modal.find('input[name="nombre"]').val(meta.nombre);
	  		$modal.find('input[name="lada"]').val(meta.lada);
	  		$modal.find('input[name="telefono"]').val(meta.telefono);
	  		$modal.find('input[name="extension"]').val(meta.extension);
	  		$modal.find('select[name="perfilusuario"]').val(meta.perfil);

	  		$modal.find('.alias-txt').html(meta.texto);

	  		$modal.find('input[name="lada"]').trigger('keyup');
	  		disableSumbitButton($('.form-editar-usuario #form-editar-usuario'), true);

	  		if(meta.perfil=='administrador'){
		  		checkShowArbol(meta.perfil);
		  		ingresarGruposComponent.setSelectedDataArbol($arbol, meta.grupos);
		  	}
		}


		function validateFormEditarUsuario(){

			var $form = $('.form-editar-usuario #form-editar-usuario');

			disableSumbitButton($form, true);
			checkTelefonoLength($form);

			formElementsModales['editarUsuario']['validator'] = $form.validate({
				ignore: "",
				onkeyup:  function(element) { $(element).valid(); },
				rules: {
					email: {
						required: true,
						email: true
					},
					nombre: {
						required: true,
						basicName: true,
						minlength: 3,
						maxlength: 40
					},
					numero : {
						digits: true,
						minlength: 10,
						maxlength: 10,
						required : {
							depends: function(element) {
								var $lada = $form.find('.lada').val(),
								$telefono = $form.find('.telefono').val(),
								$ext = $form.find('.extension').val();

			                	return $lada.length>0 || $telefono.length>0 || $ext.length;
			                }
						}
					},
					extension : {
						digits: true
					},
					perfilusuario : {
						required : true
					}
				},
				messages: {
					email: {
						required: "Ingresa un correo electrónico.",
						email: "Ingresa un correo electrónico válido."
					},
					nombre: {
						required : "Ingresa el nombre del usuario.",
						basicName: "Este campo solo acepta letras, números, punto y espacios.",
						minlength: "El nombre debe contener al menos 3 caracteres.",
					   	maxlength : "El nombre no debe ser mayor a 40 caracteres."
					},
					numero: {
						required: "Ingresa un número de contacto.",
						digits: "Ingresa un número válido.",
						minlength: "Ingresa un número de 10 dígitos.",
						maxlength: "Ingresa un número de 10 dígitos."
					},
					extension : {
						digits: "Ingresa una extensión válida."
					},
					perfilusuario : {
						required : "Selecciona un perfil para el usuario."
					}
				},
				errorClass : "error-dd error",
				errorPlacement: function(error, $element) {
				   	var $parent = $element.parent();

				   	if($element.attr("name") == "numero"){
				   		$form.find('.lada').addClass('error-dd error');
				   		$form.find('.telefono').addClass('error-dd error');
				   		$parent.append( error );
				   	}
				   	else if( $.inArray( $element.attr("name"), ['lada', 'telefono']) < 0){
				   		$parent.append( error );
				   	}

				},
				unhighlight: function(element, errorClass, validClass) {

					var $element = $(element);
					if(!$element.hasClass('lada') && !$element.hasClass('telefono') && !$element.hasClass('extension'))
		        		$element.removeClass('error error-dd').addClass('valid');
		        	else{
		        		var $numero = $form.find('.numero');
		        		if($numero.valid()){
				  			$('#numero-error').remove();
				  			$('#lada-error').remove();
				  			$('#telefono-error').remove();
				    		$form.find('.lada').removeClass('error-dd error');
				    		$form.find('.telefono').removeClass('error-dd error');
				  		}
		        	}

		        },
		        highlight : function(element, errorClass){
		        	var $element = $(element);
		        	$element.removeClass('valid').addClass('error error-dd');

		        	if($element.hasClass('numero')){
		        		$form.find('.lada').addClass('error-dd error');
				   		$form.find('.telefono').addClass('error-dd error');
		        	}

		        },
				submitHandler: function(form) {
					if(!formElementsModales['editarUsuario']['sending']){

						formElementsModales['editarUsuario']['sending'] = true;

						$(form).find('button[type="submit"]').prop('disabled', true);

						var self = $(form).serialize();
						var selfArray = $(form).serializeArray();

						generalLoadingIcon(form, true);

						var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

						$.post( postURL , { data: self, related : currentModalData.id})
						  .done(function( json ) {

						  	var elementData = {
								id : currentModalData.id,
								nombre: selfArray[0].value,
							};

						  	Services.configuracion.editarUsuarioSuccessCallback(json, form, elementData, updateOnSuccess );
						  	formElementsModales['editarUsuario']['sending'] = false;
						  	$(form).find('button[type="submit"]').prop('disabled', false);
						  	generalLoadingIcon(form, false);
						  	processCompleted = true;

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	Services.configuracion.editarUsuarioFailCallback(error, form );
						  	formElementsModales['editarUsuario']['sending'] = false;
						  	generalLoadingIcon(form, false);
						  	processCompleted = true;

						});

					}

				}
			});

		}

		function updateOnSuccess(msg){
			$('#modal-editar-usuario .api-msg-success').html('<p>'+msg+'</p>');

		}

	}

	/**Fin modal editar usuario**/


	/**Inicio modal cancelar rol**/
	function initModalCancelarRol(){
		modalCancelarRol = new modalesTelcel($('#modal-cancelar-rol'),{
			onInit : function(){
				setActions();
			},
			onReset : function(){

			},
			onOpen : function(){

			},
			onClose : function(){
			}
		});

		function setActions(){
			$('#btn-cancelar-rol').click(function(e){
				e.preventDefault();
				var $btn = $(this),
				redirect = $btn.data('href');

				postCancelRol(redirect);
			});
		}

		function postCancelRol(redirect){

			var form = '#confirmar-cancelar-rol';

			generalLoadingIcon(form, true);

			var urlPOST = Services.apiURL.cancelarRol();

			$.post( urlPOST , {  })
			  .done(function( json ) {

				Services.configuracion.cancelarAgregarRolSuccessCallback(json, form, redirect);

			  })
			  .fail(function( jqxhr, textStatus, error ) {
			  	Services.configuracion.cancelarAgregarRolFailCallback(error, form );
			});
		}
	}
	/**Fin modal cancelar rol**/

	function setBasicInfoModal(item){
		currentModalData = item;
		var texto =(typeof item.nombre != 'undefined' ? item.nombre : item.numero);
		$('.modal-mte .alias-text, .modal-mte .txt-current').html(texto);
	}

	function resetFormModal($form, form){
		$form.find('.general-error-tooltip').remove();
		$form.find("input[type=text], input[type=email], input[type=password], select, input[type=number]").val("");
		$form.find("input[type=text], input[type=email], input[type=password], select, input[type=number]").removeClass("error").removeClass("error-dd");
		$form.find("input[type=checkbox], input[type=radio]").prop('checked', false);
		$form.find('button[type="submit"]').prop('disabled', true);
		$form.removeClass('success').removeClass('error').show();

		if(formElementsModales[form]['validator']){
			formElementsModales[form]['validator'].resetForm();
		}
	}

	return{
		inicializar : init,
		openModalAgregarRol : function(){
			modalAgregarRol.openModal();
		},
		openModalAgregarRolAdmin : function(){
			modalAgregarRolAdmin.openModal();
		}
	}

})();

var configuracionNotificaciones = (function(){
	var formElementsSubmit = {id : null, validator : null, sending: false };

	function init(){
		setActions();
		validateForm();
	}

	function setActions(){
		$('.switch-single').on('change', function(){
			var $switch = $(this),
			$container = $switch.closest('.config-switches-box'),
			$status = $switch.parent('.switch').next('.status');

			if($switch.is(':checked'))
				$status.html('Activo');
			else
				$status.html('Inactivo');

			var allChecked = $container.find('.switch-single').length == $container.find('.switch-single:checked').length;
			$container.find('.switch-all').prop('checked', allChecked);
		});

		$('.switch-all').on('change', function(){
			var $switch = $(this),
			$parent = $switch.closest('.config-switches-box'),
			$switches = $parent.find('.switch-single'),
			checked = ($switch.is(':checked') ? true : false),
			$status = $parent.find('.status');

			$switches.prop('checked', checked);

			if(checked)
				$status.html('Activo');
			else
				$status.html('Inactivo');


		});

		$('.btn-toggle-config').on('click', function(e){
			var $btn = $(this),
			$container = $btn.closest('.config-box'),
			open = false;

			if($container.hasClass('open-mobile'))
				open = false;
			else
				open = true;

			$('.config-box').removeClass('open-mobile');

			if(open)
				$container.addClass('open-mobile');
			else
				$container.removeClass('open-mobile');

		});

	}

	function validateForm(){
		var $form = $('#form-config-notif');

		disableSumbitButton($form, true);
		checkTelefonoLength($form);

		formElementsSubmit['validator'] = $form.validate({
		ignore: "",
			onkeyup:  function(element) { $(element).valid(); },
			rules: {
				"notificacion[]": {
					required: true
				}
			},
			messages: {

			},
			errorClass : "error-dd error",
			errorPlacement: function(error, $element) {

			},
			submitHandler: function(form) {
				if(!formElementsSubmit['sending']){

					formElementsSubmit['sending'] = true;
					$(form).find('button[type="submit"]').prop('disabled', true);

					var self = $(form).serialize();

					generalLoadingIcon(form, true);

					var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

					$.post( urlPOST , { data: self })
					  .done(function( json ) {

						Services.configuracion.editarNotificacionesSuccessCallback(json, form);
						formElementsSubmit['sending'] = false;
						$(form).find('button[type="submit"]').prop('disabled', false);
					  	generalLoadingIcon(form, false);

					  })
					  .fail(function( jqxhr, textStatus, error ) {
					  	Services.configuracion.editarNotificacionesFailCallback(error, form );
					  	formElementsSubmit['sending'] = false;
					  	generalLoadingIcon(form, false);
					});
				}
			}
		});

		checkGeneralValidForm($form);
	}

	return{
		inicializar : init
	}

})();


var configuracionPermisos = (function(){

	var $mainContainer = $('.configuracion-block'),
	$checkboxes = $('.permisos-ul .permiso'),
	$checkboxesAll = $('.permisos-box .checkbox-container-all input[type="checkbox"]'),
	formElementsSubmit = {id : null, validator : null, sending: false };

	function init(){
		setActions();
		validateForm();
	}

	function setActions(){
		$('#btn-enable-edit').click(function(){
			enableEditingMode();
		});

		$('#btn-save-changes').click(function(e){
			e.preventDefault();
			$('.form-editar-permisos').submit();
		});

		$('#btn-cancel-changes').click(function(){
			$mainContainer.removeClass('enable-editing-mode');
			$checkboxes.prop('disabled', true);
		});

		$checkboxes.on('change', function(){
			var $checkbox = $(this),
			allChecked = $checkboxes.length == $('.permisos-ul .permiso:checked').length,
			$box = $checkbox.closest('.permisos-box'),
			$boxCheckboxes = $box.find('.permiso'),
			$boxCheckboxesChecked = $box.find('.permiso:checked'),
			allBoxChecked = $boxCheckboxes.length == $boxCheckboxesChecked.length;

			$('#checkbox-pagina-all').prop('checked', allChecked);

			$box.find('.checkbox-container-all input[type="checkbox"]').prop('checked', allBoxChecked);

			checkSelected();
		});

		$checkboxesAll.on('change', function(){
			var $checkbox = $(this),
			checked = ($checkbox.is(':checked') ? true : false),
			allChecked = $checkboxesAll.length == $('.permisos-box .checkbox-container-all input[type="checkbox"]:checked').length,
			$boxCheckboxes = $checkbox.closest('.permisos-box').find('.permiso');

			$('#checkbox-pagina-all').prop('checked', allChecked);
			$boxCheckboxes.prop('checked', checked);

			checkSelected();
		});

		$('#checkbox-pagina-all').on('change', function(){
			var $checkbox = $(this),
			checked = ($checkbox.is(':checked') ? true : false);

			$checkboxes.prop('checked', checked);
			$checkboxesAll.prop('checked', checked);
			checkSelected();

		});
	}

	function checkSelected(){
		if($('.permisos-ul .permiso:checked').length>0){
			$('.select-all-permisos').addClass('elements-selected');
			$('.btn-save-changes').prop('disabled', false);
		}
		else{
			$('.select-all-permisos').removeClass('elements-selected');
			$('.btn-save-changes').prop('disabled', true);
		}
	}

	function enableEditingMode(){
		$mainContainer.addClass('enable-editing-mode');
		$checkboxes.prop('disabled', false);
	}

	function validateForm(){
		var $form = $('.form-editar-permisos'),
		isNuevoRol = $form.attr('id') == 'form-add-permisos',
		redirect = (isNuevoRol ? $form.data('href') : null);

		disableSumbitButton($form, true);
		checkTelefonoLength($form);

		formElementsSubmit['validator'] = $form.validate({
		ignore: "",
			onkeyup:  function(element) { $(element).valid(); },
			rules: {
				"permiso[]": {
					required: true
				}
			},
			messages: {

			},
			errorClass : "error-dd error",
			errorPlacement: function(error, $element) {

			},
			submitHandler: function(form) {
				if(!formElementsSubmit['sending']){

					formElementsSubmit['sending'] = true;
					$(form).find('button[type="submit"]').prop('disabled', true);

					var self = $(form).serialize();

					generalLoadingIcon(form, true);

					var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

					$.post( urlPOST , { data: self })
					  .done(function( json ) {

						Services.configuracion.editarPermisosSuccessCallback(json, form, redirect);
						formElementsSubmit['sending'] = false;
						$(form).find('button[type="submit"]').prop('disabled', false);
					  	generalLoadingIcon(form, false);

					  })
					  .fail(function( jqxhr, textStatus, error ) {
					  	Services.configuracion.editarPermisosFailCallback(error, form );
					  	formElementsSubmit['sending'] = false;
					  	generalLoadingIcon(form, false);
					});
				}
			}
		});

		checkGeneralValidForm($form);
	}

	return{
		inicializar : init
	}

})();

var ingresarGruposComponent = (function(){

	var $component = $('.grupo-selector-block');

	var elementsForm = {
		'agregarGruposArbol' : {
			id : null,
			validator : null,
			sending: false
		},
		'buscarArbolGrupos' : {
			id : null,
			validator : null,
			sending: false
		}
	};

	// GUARDAR ELEMENTOS DEPENDIENDO DEL TIPO DE SUBIDA
	var elementsPost = [];

	function init(){

		if($component.length>0)
			initArboles();
	}

	function initArboles(){
		var c = 0;

		$component.each(function (index) {
			c+=1;
			var $arbolMain = $(this),
			arbolId = 'grupo-selector-block-'+c;
			$arbolMain.attr('id', arbolId)
			initArbol($arbolMain, arbolId);
		});

	}

	function validateParentForm($form, arbolId){
		var result = $('#' + arbolId + ' .tree-grupos').jstree('get_selected');

		if ($form.validate().checkForm() && result.length>0) {
            $form.find('.first-submit, button[type="submit"]').prop('disabled', false);
        } else {
           	$form.find('.first-submit, button[type="submit"]').prop('disabled', true);
        }
	}

	function resetSearchTree(arbolId){
		$('#' + arbolId + ' .tree-grupos-search').jstree("deselect_all");
	    $('#' + arbolId + ' .search-input').val('');
	    $('#' + arbolId + ' .btn-remover-busqueda').removeClass('active');
	    $('#' + arbolId + ' .btn-search').prop('disabled', true);
	    $('#' + arbolId + ' .tree-grupos-search').hide();
	    $('#' + arbolId + ' .tree-grupos').show();
	   	if($('#' + arbolId + ' .tree-grupos .jstree-clicked').length>0){
			$("#" + arbolId + " .block-content-arbol-btn").removeClass('hidden');
			$("#" + arbolId + " .block-content-arbol-btn .btn-remover-seleccion").addClass('active');
		}
		else{
			$("#" + arbolId + " .block-content-arbol-btn").addClass('hidden');
			$("#" + arbolId + " .block-content-arbol-btn .btn-remover-seleccion").removeClass('active');
		}
	}

	function resetTree(arbolId){
		$('#' + arbolId + ' .tree-grupos').jstree("deselect_all");
		$('#' + arbolId + ' .tree-grupos-search').jstree("deselect_all");

		$('#' + arbolId + ' .tree-grupos').jstree("destroy").empty();
		$('#' + arbolId + ' .tree-grupos-search').jstree("destroy").empty();

		$('#btn-mover-lineas').prop('disabled', true);
		$('#' + arbolId + ' .tree-grupos').jstree("close_all");
		$('#' + arbolId + ' .tree-grupos .detail-group').remove();
		$('#' + arbolId + ' .block-content-arbol-btn').addClass('hidden');
		$('#' + arbolId + ' .btn-like-a').removeClass('active');
	}

	function getDataArbol(arbolId){
		//Obtener los elementos seleccionados
		var result = $('#' + arbolId + ' .tree-grupos').jstree('get_selected');

		formatDataArbol(result);

		return elementsPost;
		//postAgregarGrupos(phoneChecked, total);
	}

	// UNIFICAR LA INFORMACIÓN AL MISMO FORMATO
	function formatDataArbol(data){

		var dataT = null;

		elementsPost = [];

		data.forEach(function(item, index){
			dataT = {
				id : ( typeof item != 'undefined' ? item : null ),
		 		tipo : 'group',
		 		selected : 'all'
			 };

			elementsPost.push(dataT);

		});

	}

	function initArbol($arbol, arbolId){

		var $element = $('#' + arbolId + ' .componente-lb.lineas-arbol'),
		selectedGroup = { id: null , nombre: null, actual : null };

		initActions();
		initTree();

		function initActions(){


			//EJECUTAR BUSQUEDA
			$('#' + arbolId + ' .btn-search').click(function() {

		        var searchString = $('#' + arbolId + ' .search-input').val();

		        if(searchString!=''){
		       		searchTree(searchString);
		        }

		    });

			//CAMBIAR ESTADO DEL BOTÓN Y DEL ARBOL DEPENDIENDO DEL SEARCH INGRESADO
		    $('#' + arbolId + ' .search-input').keyup(function() {

		        var searchString = $('#' + arbolId + ' .search-input').val();
		        var $input = $(this);
		        var min = (typeof $input.data('min') != 'undefined' ? $input.data('min') : 1);
		        if(searchString.length>=min)
		        	$('#' + arbolId + ' .btn-search').prop('disabled', false);
		       	else
		       		$('#' + arbolId + ' .btn-search').prop('disabled', true);
		    });

		    //BORRAR BUSQUEDA
		    $('#' + arbolId).on('click', '.btn-remover-busqueda', function() {
		       	resetSearchTree(arbolId);
		    });

		    //BORRAR SELECCION
		    $('#' + arbolId + ' .btn-remover-seleccion').click(function() {
		       	resetTree(arbolId);
		       	initTree(arbolId);
		    });
		}

		function mostrarNodos(node){

			$('#' + arbolId + ' .tree-grupos').jstree('open_node', node.id, function(e, data) {
			}, true);
		}

		function esconderNodos(node){

			$('#' + arbolId + ' .tree-grupos').jstree('close_node', node.id);
		}

		function mobileNode(nodeId){
			if(nodeId!='#'){

				$('#' + arbolId + ' .tree-grupos .jstree-node').removeClass('active-node');
				$('#' + arbolId + ' .tree-grupos #'+nodeId).addClass('active-node');
			}
			else{
				$('#' + arbolId + ' .tree-grupos .jstree-node').removeClass('active-node');

			}
		}

		function initTree(){

			$('#' + arbolId + ' .tree-grupos')
			.on("changed.jstree", function (e, data) {

				if(data.action == "select_node"){

					mostrarNodos(data.node);
					validateParentForm($('#' + arbolId + '').closest('form'), arbolId);
				}
				else if(data.action == "deselect_node"){
					esconderNodos(data.node);
					validateParentForm($('#' + arbolId + '').closest('form'), arbolId);
				}

			})
			.bind("open_node.jstree", function (event, data) {
			  mostrarNodos(data.node);
			  mobileNode(data.node.id);

			  if(is_mobile()){
			  	selectedGroup.id = data.node.id;
				selectedGroup.nombre = data.node.text;
			  }

			})
			.bind("close_node.jstree", function (event, data) {
			  mobileNode(data.node.parent);
			})
			.jstree({
				'core' : {
					'check_callback' : true,
					'data' : {
						'dataType' : 'json',
						'url' : function (node) {
					      return node.id === '#' ?
					      	Services.apiURL.arbolOnlyGruposRoot() :
					        Services.apiURL.arbolGruposChildren();
					    },
						'data' : function (node) {

							return { 'id' : node.id };
						}
					},
					'multiple' : true
				},
				'plugins' : [ 'checkbox' ]
			});

			//Verificar si sale el mensaje de un solo grupo
			verifyGroupMsg(arbolId);



			// ARBOL DEL BUSCADOR
			$('#' + arbolId + ' .tree-grupos-search').hide();

			$('#' + arbolId + ' .tree-grupos-search')
			.on("changed.jstree", function (e, data) {

				if(data.action == "select_node"){

					var instance = $('#' + arbolId + ' .tree-grupos').jstree(true);
					instance.check_node(data.node.id);
					instance._open_to(data.node.id)

				}
				else if(data.action == "deselect_node"){
					var instance = $('#' + arbolId + ' .tree-grupos').jstree(true);
					instance.uncheck_node(data.node.id);
				}
			})
			.bind("refresh.jstree", function (event, data) {

		        var search = $('#' + arbolId + ' .search-input').val();

		        $('#' + arbolId + ' .tree-grupos-search').jstree("open_all");
		        $('#' + arbolId + ' .tree-grupos-search').jstree('search', search);

		        $('#' + arbolId + ' .tree-grupos-search .jstree-search').each(function( index ) {
		        	var texto = $( this ).text();
		        	var textoT = texto.replace(search, '<span class="exact-search">'+search+'</span>');
		        	var $innerHTML = $( this ).find('.jstree-icon');
		        	var $html = $(this);
		        	$html.html('');

		        	$innerHTML.each(function( index ) {
					  $html.append($(this));
					});

					$html.append(textoT);
				});

				var treeData = $('#' + arbolId + ' .tree-grupos').jstree('get_selected');
				treeData.forEach(function(item, i){
					var instance = $('#' + arbolId + ' .tree-grupos-search').jstree(true);
					if($('#'+item).length > 0)
						instance.check_node(item);
				});
		    })
			.jstree({
				'core' : {
					'expand_selected_onload': true,
					'dblclick_toggle' : false,
					'data' : {
						"dataType" : "json",
						"url" : function (node) {
					      return false;
					    },
						"data" : function (node) {

							return { "id" : node.id };
						}
					},
					"multiple" : true
				},
				'plugins' : ["noclose", "search", "checkbox"],
				'search': {
					"case_insensitive": true,
            		"show_only_matches" : true
				}
			});

		}


		function searchTree(search){

			if(!elementsForm['buscarArbolGrupos']['sending']){

				var form = '.tree-groups-asoc';
				generalLoadingIcon(form, true);
				elementsForm['buscarArbolGrupos']['sending'] = true;

				var postURL = Services.apiURL.arbolOnlyGruposBusqueda();

				$.post( postURL , { search: search })
				  .done(function( json ) {

				  	Services.general.getArbolBusquedaGruposCallSuccess(json , form, arbolId);
				  	elementsForm['buscarArbolGrupos']['sending'] = false;
				  	generalLoadingIcon(form, false);

				  })
				  .fail(function( jqxhr, textStatus, error ) {
				  	Services.general.getArbolBusquedaGruposCallFail(error, form, arbolId);
				  	elementsForm['buscarArbolGrupos']['sending'] = false;
				  	generalLoadingIcon(form, false);
				});

			}
		}
	}

	function resetComponente(arbolId){
		resetSearchTree(arbolId);
		resetTree(arbolId);
	}


	function verifyGroupMsg(arbolId){
		var hash = window.location.hash;
		var $msg = $('.msg-info-block-arbol');

		if(hash=='#soloSinAgrupar' && $msg.length<1){
			var msg = '*Por el momento no tienes ningún grupo, por lo tanto el Administrador de grupo que elijas tendrá permisos sobre todas las líneas.';

			var $main = $('#' + arbolId + ' .tree-grupos').parent();

			$('<div class="col-sm-12 col-xs-12 msg-info-block msg-info-block-arbol"><p>'+msg+'</p></div>').insertAfter($main);
		}

	}

	function setDataArbol($arbol, data){
		var instance = $arbol.jstree(true);

		data = data.split('|');

		$.each(data, function( index, value ) {
			instance.check_node(value);
			instance._open_to(value);
		});

	}

	return{
		inicializar: init,
		getDataArbol : getDataArbol,
		setSelectedDataArbol : setDataArbol,
		reset : resetComponente,
		initArbol : initArbol
	}

})();

ingresarGruposComponent.inicializar();

if($('.configuracion-block').length>0 )
	modalesConfiguracion.inicializar();

if($('.configuracion-block.roles-block').length>0)
	configuracionRoles.inicializar();

if($('.configuracion-block .usuarios-table').length>0)
	configuracionUsuarios.inicializar();

if($('.configuracion-block .table-notificaciones-config-block').length>0)
	configuracionNotificaciones.inicializar();

if($('.configuracion-block .form-editar-permisos'))
	configuracionPermisos.inicializar();

setMsg();

function setMsg(){
	var $msg = $('.success-error-msg-container');

	if($msg.length>0){
		var hash = window.location.hash;;
		if(hash== '#error'){
			$msg.find('.error-tooltip').removeClass('hidden');
			$msg.removeClass('hidden');
		}

		if(hash== '#exito'){
			$msg.find('.success-tooltip').removeClass('hidden');
			$msg.removeClass('hidden');
		}


	}

}
var redPrivada = (function(){
	var $listaPrincipal = $('.listado-principal'),
	$formDirectorio = $('#form-directorio'),
	$formGeneral_v2 = $('#form-general-v2'),
	$formDesvio = $('#form-desvio'),
	$formMarcacion = $('#form-marcacion'),
	$tableServicios = $('.red-privada-block .table-servicios');

	var redSection = null,
	getListadoSection = null;

	function getUsuariosSection(){
		return ($('#listado-directorio').length>0 ? 'directorio' : ($('#listado-desvio-llamadas').length>0 ? 'desvio' : ($('#listado-abono-saldo').length>0 ? 'abono' :'marcacion') ) );
	}

	redSection = getUsuariosSection();

	var generarHTMLListado = {
		directorio : generarHTMLDirectorio,
		marcacion : generarHTMLMarcacion,
		desvio : generarHTMLDesvio,
		abono : generarHTMLAbono
	};

	getListadoSection = typeof generarHTMLListado[redSection] != 'undefined' ? generarHTMLListado[redSection] : null ;


	function init(){

		if($listaPrincipal.length>0)
			generarListadoConfirmacionInicial();

		if($formDirectorio.length>0)
			initFormValidationDirectorio();

		if($formGeneral_v2.length>0)
			initFormValidationDirectorio_v2();

		if($formMarcacion.length>0)
			initFormValidationMarcacion();

		if($formDesvio.length>0)
			initFormValidationDesvio();

		if($tableServicios.length>0)
			initSwitches();

		modalesRedPrivada.inicializar();

		initActions();
	}

	function initActions(){
		$('#listado-abono-saldo').on('click', '.linea-batch .btn-ver-detalle', function(){
			var $button = $(this),
			$container = $button.closest('.linea-batch'),
			toOpen = false;

			if(!$container.hasClass('open-element'))
				toOpen = true;

			var $abiertos = $('.linea-batch.open-element');
			$abiertos.removeClass('open-element');

			if(toOpen)
				$container.addClass('open-element');
		});
	}

	function initSwitches(){
		var $btn = $('#btn-continuar'),
		elementsForm = {id : null, validator : null, sending: false };

		initSwitchesActions();

		function initSwitchesActions(){
			$('.table-servicios .switch-input').on('change', function(){
				var $switch = $(this),
				$container = $switch.closest('.switch-container'),
				$lock = $container.find('.io-lock-closed'),
				$unlocked = $container.find('.io-lock-open');

				if($switch.is(':checked')){
					$lock.addClass('disabled');
					$unlocked.removeClass('disabled').addClass('unlocked');
				}
				else{
					$unlocked.addClass('disabled');
					$lock.removeClass('disabled').addClass('locked');
				}

				var valid = $('.table-servicios .switch-input:checked').length > 0;
				$btn.prop('disabled', !valid);


			});

			$('#control-servicios-form').submit(function(e){
				e.preventDefault();

				if(!elementsForm['sending']){
					sendFormData();
		  		}
			});
		}

		function sendFormData(){
			var form = '#control-servicios-form';
			elementsForm['sending'] = true;
			$(form).find('button[type="submit"]').prop('disabled', true);

			var self = $(form).serialize();

			var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

			/**Quitar una vez en producción**/
			var sendTo = urlPOST;

			urlPOST = checkDevelopmentPostHTML(urlPOST);

			$.post(  urlPOST , self )
			.done(function( data ) {
			  	Services.redPrivada.controlCostosServiciosSuccessCallback(data, form, sendTo );
				elementsForm['sending'] = false;

			 })
			.fail(function( jqxhr, textStatus, error ) {
			  	//Mensaje de error del sistema
			  	Services.redPrivada.controlCostosServiciosFailCallback(error, form);
			  	elementsForm['sending'] = false;
			});
		}

	}

	//FORMULARIO DIRECTORIO V2
	function initFormValidationDirectorio_v2(){

		var tipoIngreso = null,
		elementsForm = {id : null, validator : null, sending: false };

		initActions();
		validateMainForm();
		onResize();
		setResize();


		function setResize(){
			var size = null,
			initialSize = $( window ).width();

			$( window ).resize(function() {
				size = $( window ).width();
				onResize()
			});
		}

		function onResize(){
			if(is_mobile()){
				$('#motivo-autogestion1').prop('checked', true);
				$('.motivo-autogestion').trigger('change');
			}
		}

		function validateMainForm(){

			disableSumbitButton($formGeneral_v2, true);

			elementsForm['validator'] =
				$formGeneral_v2.validate({
					  rules: {
						archivo: {
							extension: "xls",
							filesize: 10000000
						},
						motivoAutogestion: {
							required: true
						}
					  },
					  messages: {
						 archivo: {
						   extension: "Ingresa un archivo con extensión: .xls",
						   filesize: "Ingresa un archivo de 10 MB máximo."
						 },
						 motivoAutogestion: {
						   required: "Selecciona un motivo.",
						 }
					   },
						errorClass : "error-dd error",
						errorElement : 'div',
						errorPlacement: function(error, element) {
							var elementInput = element[0];
							if(element[0]['id']==='archivo'){
								$('.lineas-archivo .extra-info').hide();
								error.appendTo( $('.lineas-archivo .add-lines-ge-mod' ));
								element.parent().addClass('error');

							}
						},
						success: function ($error) {
							if($error.length>0 && $('#archivo').val() != ''){
								$('.lineas-archivo .extra-info').hide();
								$('.lineas-archivo .file.error' ).removeClass('error');
				   				$error.remove();
							}
				        },
				        highlight : function(element, errorClass){
				        	var $element = $(element);
				        	if($element.attr('id')==='archivo' && $element.val() == ''){
				        		$('.lineas-archivo .extra-info').hide();
								$element.parent().addClass('error');
				        	}
				        },
				        submitHandler: function(form) {
							if(!elementsForm['sending']){
								sendFormData(form);
					  		}
						}
				});

				checkGeneralValidForm($formGeneral_v2);

				function sendFormData(form){
					elementsForm['sending'] = true;
					$(form).find('button[type="submit"]').prop('disabled', true);

					var self = $(form).serialize();

					var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

					/**Quitar una vez en producción y aqui solo checamos si es una línea en development para mandar a otra liga**/
					var sendTo = ( (ingresarLineasComponentTotal ==1 && is_mobile() && typeof $(form).data('actionmobile') != 'undefined') ? $(form).data('actionmobile') : urlPOST);

					urlPOST = checkDevelopmentPostHTML(urlPOST);

					$.post(  urlPOST , self )
					.done(function( data ) {
					  	Services.redPrivada.cargaDirectorioGeneralCallSuccess(data, form, sendTo, showInvalidErrorArchivo );
						elementsForm['sending'] = false;
					 })
					.fail(function( jqxhr, textStatus, error ) {
					  	//Mensaje de error del sistema
					  	Services.redPrivada.cargaDirectorioGeneralCallFail(error, form);
					  	elementsForm['sending'] = false;
					});
				}
		}

		function validateFormData(){

			var dataLineas = [];
			var lineasValid = false;
			//var dataArchivo = ingresarLineasComponent.getDataArchivo();

			var dataType = ingresarLineasComponent.getType();

			if(dataType === '.componente-lineas-block .lineas-autocomplete')
				dataLineas = ingresarLineasComponent.getDataAutocomplete();
			else if(dataType === '.componente-lineas-block .lineas-arbol')
				dataLineas = ingresarLineasComponent.getDataArbol();
			else
				dataLineas.push(null);

			if(dataLineas.length>0)
				lineasValid = true;

	    	$('#lineas-hidden-input').val(JSON.stringify(dataLineas));

			if($('.motivo-autogestion').is(':checked') && lineasValid)
				return true;

			return false;
		}


		function initActions(){


			/**
				Cuando se esconda el step 2
			**/
			var fullReset = false;

			// $('#autogestion-paso-2').on('show', function(event) {
			// 	var target = $(event.target).attr('id');
			// 	if(target==='autogestion-paso-2')
			// 		$('#autogestion-btn').prop('disabled', !validateFormData());
			// });

			var $lastStep = $('.carga-masiva-last-step');

			/**
				Setea la info del Motivo
			**/
			$('.motivo-autogestion').change(function() {
				var $checkbox = $(this);

				if(typeof ingresarLineasComponent != 'undefined')
					ingresarLineasComponent.reset();

				if($('.motivo-autogestion:checked').length>0){
					var current = $checkbox.val(),
					btntext = (typeof $checkbox.data('btn') != 'undefined' ? $checkbox.data('btn') : 'Subir archivo');

					if(current=='cargar-directorio'){
						$lastStep.addClass('only-upload-file');
						$('.btn-lineas-archivo').trigger('click');
					}
					else
						$lastStep.removeClass('only-upload-file');

					$('#autogestion-btn').html(btntext);
					$lastStep.addClass('active');
				}
				else
					$lastStep.removeClass('active');
			});

			/**
				Setea la info del Motivo
			**/

			// $('.motivo-autogestion').change(function() {
			// 	var $checkbox = $(this);


			// 	/**Quitar una vez en producción solo es para propositos de development y simular**/
			// 	updateFormPostURL($checkbox.val());

			// 	if($('.motivo-autogestion:checked').length>0){
			// 		var current = $checkbox.val(),
			// 		btntext = (typeof $checkbox.data('btn') != 'undefined' ? $checkbox.data('btn') : 'Subir archivo');

			// 		if(current=='cargar-directorio'){
			// 			$lastStep.addClass('only-upload-file');
			// 			$('.btn-lineas-archivo').trigger('click');
			// 		}
			// 		else
			// 			$lastStep.removeClass('only-upload-file');

			// 		$('#autogestion-btn').html(btntext);
			// 		$lastStep.addClass('active');
			// 	}
			// 	else
			// 		$lastStep.removeClass('active');
			// });

		}

		function resetMainForm(){
			$formGeneral_v2.find("input[type=text], input[type=email], input[type=password], select").val("");
			$formGeneral_v2.find("input[type=checkbox], input[type=radio]").prop("checked", false);
			$formGeneral_v2.find('button[type="submit"]').prop('disabled', true);

			if(elementsForm['validator']){
				elementsForm['validator'].resetForm();
			}
		}

	}

	function updateFormPostURL(value){

		var $masivo = $('#autogestion-form');

		var masivoPosts = {
			'cargar-directorio' : 'carga-masiva-2-a.html',
			'modificar-contactos' : 'carga-masiva-2-b.html',
		};

		$masivo.prop('action', masivoPosts[value]);
	}

	//Simular error de que es invalido el archivo
	function showInvalidErrorArchivo(){
		var msg = 'Este archivo está dañado o es ilegible, intenta con un nuevo archivo.';

		$('#archivo-invalido').remove();
		$('.lineas-archivo .extra-info').hide();
		$('.lineas-archivo .add-lines-ge-mod' ).append('<div class="error-dd error" id="archivo-invalido">'+msg+'</div>');
		$('#archivo').parent().addClass('error');

		$('#autogestion-form').find('button[type="submit"]').prop('disabled', true);
	}
	//FIN FORMULARIO DIRECTORIO V2

	function initFormValidationDirectorio(){

		$('.select-change').change(function(){
			var disabled = true;

			if($('#grupo').val() != '' && $('#empresa').val() != '')
				disabled = false;

			$formDirectorio.find('button[type="submit"]').prop('disabled', disabled);

		});
	}

	function initFormValidationDesvio(){

		$('.select-change').change(function(){
			var disabled = true;

			if($('#empresa').val() != '' && $('#grupo').val() != '')
				disabled = false;

			$formDesvio.find('button[type="submit"]').prop('disabled', disabled);

		});
	}

	function initFormValidationMarcacion(){

		$('.select-change').change(function(){
			var disabled = true;

			if($('#empresa').val() != '')
				disabled = false;

			$formMarcacion.find('button[type="submit"]').prop('disabled', disabled);

		});
	}


	function generarListadoConfirmacionInicial(){

		var $elements = $listaPrincipal.find('.linea-batch');
		var total = $elements.length;

		$elements.each(function (index, value) {
		  var meta = ( typeof $(this).data('meta') != 'undefined' ? $(this).data('meta') : null );
		  var $element = $(this);

			if(meta != null){
				var elemento = getListadoSection(meta, index);
				$element.html(elemento);
				// bindElementActions();

			}
		});
	}

	function generarHTMLDirectorio(meta, index){
		var html = '';

		html = '<div class="col-sm-pr-100 col-xs-12 content-item-block" data-index="'+index+'"> <div class="col-xs-12 col-sm-pr-10"><p class="label">Número:</p> <p class="p-value" title="'+meta.numero+'">'+meta.numero+'</p></div><div class="col-xs-12 col-sm-pr-15"><p class="label">Asignado a:</p> <p class="p-value" title="'+meta.asignado+'">'+meta.asignado+'</p></div><div class="col-xs-12 col-sm-pr-15"><p class="label">Puesto:</p> <p class="p-value" title="'+meta.puesto+'">'+meta.puesto+'</p></div><div class="col-xs-12 col-sm-pr-10 flexbox"><p class="label">Área:</p> <p class="p-value" title="'+meta.area+'">'+meta.area+'</p></div><div class="col-xs-12 col-sm-pr-20"><p class="label">Correo:</p> <p class="p-value" title="'+meta.correoelectronico+'">'+meta.correoelectronico+'</p></div><div class="col-xs-12 col-sm-pr-10"><p class="label">Ext.:</p> <p class="p-value" title="'+meta.extension+'">'+meta.extension+'</p></div><div class="col-xs-12 col-sm-pr-10 flexbox"><p class="label">Marcación:</p><p class="p-value" title="'+meta.marcacion+'">'+meta.marcacion+'</p></div><div class="col-xs-12 col-sm-pr-10 flexbox"><button type="button" class="btn-modificar-contacto" title="Modificar"><span class="hidden-sm hidden-md hidden-lg">Modificar contacto</span><span class="icon io-Admin hidden-xs"></span></button></div></div>';


		return html;

	}

	function generarHTMLMarcacion(meta, index){
		var html = '';

		html = '<div class="col-sm-pr-100 col-xs-12 content-item-block" data-index="'+index+'"><div class="col-xs-12 col-sm-pr-10 flexbox"><p class="label">Región:</p> <p class="p-value" title="'+meta.region+'">'+meta.region+'</p></div><div class="col-xs-12 col-sm-pr-15"><p class="label">Cuenta:</p> <p class="p-value" title="'+meta.cuenta+'">'+meta.cuenta+'</p></div><div class="col-xs-12 col-sm-pr-10"><p class="label">Número:</p> <p class="p-value" title="'+meta.numero+'">'+meta.numero+'</p></div><div class="col-xs-12 col-sm-pr-15"><p class="label">Asignado a:</p> <p class="p-value" title="'+meta.asignado+'">'+meta.asignado+'</p></div><div class="col-xs-12 col-sm-pr-20"><p class="label">Correo:</p> <p class="p-value" title="'+meta.correoelectronico+'">'+meta.correoelectronico+'</p></div><div class="col-xs-12 col-sm-pr-10"><p class="label">Ext.:</p> <p class="p-value" title="'+meta.extension+'">'+meta.extension+'</p></div><div class="col-xs-12 col-sm-pr-10 flexbox"><p class="label">Marcación:</p><p class="p-value" title="'+meta.marcacion+'">'+meta.marcacion+'</p></div><div class="col-xs-12 col-sm-pr-10 flexbox"><button type="button" class="btn-marcacion-corta" title="Modificar"><span class="hidden-sm hidden-md hidden-lg">Modificar contacto</span><span class="icon io-Admin hidden-xs"></span></button></div></div>';


		return html;

	}

	function generarHTMLDesvio(meta, index){
		var html = '';

		html = '<div class="col-sm-pr-100 col-xs-12 content-item-block" data-index="'+index+'"><div class="col-xs-12 col-sm-pr-10 flexbox"><p class="label">Región:</p> <p class="p-value" title="'+meta.region+'">'+meta.region+'</p></div><div class="col-xs-12 col-sm-pr-15"><p class="label">Cuenta:</p> <p class="p-value" title="'+meta.cuenta+'">'+meta.cuenta+'</p></div><div class="col-xs-12 col-sm-pr-15"><p class="label">Número:</p> <p class="p-value" title="'+meta.numero+'">'+meta.numero+'</p></div><div class="col-xs-12 col-sm-pr-20"><p class="label">Asignado a:</p> <p class="p-value" title="'+meta.asignado+'">'+meta.asignado+'</p></div><div class="col-xs-12 col-sm-pr-15"><p class="label">Desvío 1:</p> <p class="p-value" title="'+meta.desvio1+'">'+meta.desvio1+'</p></div><div class="col-xs-12 col-sm-pr-15 flexbox"><p class="label">Desvío 2:</p><p class="p-value" title="'+meta.desvio2+'">'+meta.desvio2+'</p></div><div class="col-xs-12 col-sm-pr-10 flexbox"><button type="button" class="btn-modificar-desvio" title="Modificar"><span class="hidden-sm hidden-md hidden-lg">Modificar contacto</span><span class="icon io-Admin hidden-xs"></button></div></div>';


		return html;

	}

	function generarHTMLAbono(meta, index){
		var html = '',
		multipleLines = (typeof meta.lineas != 'undefined' ? (meta.lineas.length >1 ? true : false) : null),
		lineatxt = (multipleLines ? meta.lineas.length+' línea(s)' : meta.lineas[0]),
		lineas = '',
		size = ['col-sm-pr-20', 'col-sm-pr-15', 'col-sm-pr-20', 'col-sm-pr-20', 'col-sm-pr-15'];

		if(multipleLines){
			lineas = '<div class="col-sm-12 col-xs-12 content-item-block more-info">';


			$.each( meta.lineas, function( i, v ) {
				if(i<=5)
			 		lineas+= '<div class="'+size[i]+'"><p class="p-value" title="'+v+'">'+v+'</p></div>';
			});

			lineas+= '</div>';
		}



		html = '<div class="col-sm-pr-100 col-xs-12 content-item-block" data-index="'+index+'"> <div class="col-xs-12 col-sm-pr-20"> <p class="label">Operación:</p> <p class="p-value" title="'+meta.operacion+'">'+meta.operacion+'</p></div><div class="col-xs-12 col-sm-pr-15"> <p class="label">Líneas:</p> <p class="p-value" title="'+lineatxt+'">'+lineatxt+'</p></div><div class="col-xs-12 col-sm-pr-20"> <p class="label">Asignado a:</p> <p class="p-value" title="'+meta.asignado+'">'+meta.asignado+'</p></div><div class="col-xs-12 col-sm-pr-20 flexbox"><p class="label">Fecha:</p> <p class="p-value" title="'+meta.fecha+'">'+meta.fecha+'</p></div><div class="col-xs-12 col-sm-pr-15"><p class="label">Monto:</p> <p class="p-value" title="$'+meta.monto+'">$'+meta.monto+'</p></div><div class="col-xs-12 col-sm-pr-10 hidden-xs">'+( multipleLines ? '<button type="button" class="simple btn-ver-detalle" title="Ver detalle"> <span class="icon i-angle-down"></span> <span class="icon i-angle-up"></span> </button>' : '')+'</div> </div>'+lineas;

		return html;

	}

	return{
		inicializar: init
	}
})();

var modalesRedPrivada = (function(){
	var formElementsModales = {
		'agregarContacto' : {id : null, validator : null, sending: false },
		'editarContacto' : {id : null, validator : null, sending: false },
		'modificarContacto' : {id : null, validator : null, sending: false },
		'marcacionCorta' : {id : null, validator : null, sending: false },
		'modificarDesvio' : {id : null, validator : null, sending: false },
		'eliminarContacto' : {id : null, validator : null, sending: false },
		'subirArchivo' : {id : null, validator : null, sending: false }
	},
	currentModalData = null, _modalEditarContacto = null, _modalConfirmarEliminar = null;

	var modalAgregarContacto = null, modalEditarContacto = null, modalModificarContacto = null, modalMarcacionCorta = null, modalModificarDesvio = null, modalConfirmarEliminar = null, modalSubirArchivo = null;

	function init(){
		setActions();

		if($('.red-contactos-table-block').length>0)
			initListadoContactosLimit();

		if($('#modal-agregar-contacto').length>0)
			initModalAgregarContacto();

		if($('#modal-editar-contacto').length>0)
			initModalEditarContacto();

		if($('#modal-modificar-contacto').length>0)
			initModalModificarContacto();

		if($('#modal-marcacion-corta').length>0)
			initModalMarcacionCorta();

		if($('#modal-modificar-desvio').length>0)
			initModalModificarDesvio();

		if($('#modal-confirmar-eliminar').length>0)
			initmodalConfirmarEliminar();

		if($('#modal-subir-archivo').length>0)
			initmodalSubirArchivo();
	}

	function setActions(){
		$('body').on('click', '.btn-modificar-contacto', function(){
			var $element = $(this).closest('.linea-batch');
			setBasicInfoModal($element.data('meta'));
			modalModificarContacto.openModal();
		});

		$('body').on('click', '.btn-marcacion-corta', function(){
			var $element = $(this).closest('.linea-batch');
			setBasicInfoModal($element.data('meta'));
			modalMarcacionCorta.openModal();
		});

		$('body').on('click', '.btn-modificar-desvio', function(){
			var $element = $(this).closest('.linea-batch');
			setBasicInfoModal($element.data('meta'));
			modalModificarDesvio.openModal();
		});

		$('body').on('click', '#btn-agregar-contacto', function(){
			var $element = $(this);

			if(checkContactosLimit())
				modalAgregarContacto.openModal();
		});

		$('.red-contactos-table-block').on('click', '.btn-edit', function(){
			var $element = $(this),
			$container = $element.closest('.linea-batch');
			_modalEditarContacto = $container.data('meta');
			modalEditarContacto.openModal();
		});

		$('.red-contactos-table-block').on('click', '.btn-delete', function(){
			var $element = $(this),
			$container = $element.closest('.linea-batch');
			_modalConfirmarEliminar = $container.data('meta');
			modalConfirmarEliminar.openModal();
		});

		$('body').on('click', '.btn-general-carga-masiva', function(){
			modalSubirArchivo.openModal();
		});

	}

	/**Inicio modal subir archivo**/
	function initmodalSubirArchivo(){

		modalSubirArchivo = new modalesTelcel($('#modal-subir-archivo'),{
			onInit : function(){
				validateArchivoForm();

			},
			onReset : function(){

			},
			onOpen : function(){

			}
		});

		function validateArchivoForm(){

			var $form = $('#modal-subir-archivo #form-subir-archivo'),
			form = '#modal-subir-archivo #form-subir-archivo';

			disableSumbitButton($form, true);

			formElementsModales['subirArchivo']['validator'] =
				$form.validate({
					  rules: {
						archivo: {
							required : true,
							extension: "xls",
							filesize: 10000000
						},
						motivoAutogestion: {
							required: true
						}
					  },
					  messages: {
						 archivo: {
						   required: "Ingresa un archivo de 10 MB máximo.",
						   extension: "Ingresa un archivo con extensión: .xls",
						   filesize: "Ingresa un archivo de 10 MB máximo."
						 },
						 motivoAutogestion: {
						   required: "Selecciona un motivo.",
						 }
					   },
						errorClass : "error-dd error",
						errorElement : 'div',
						errorPlacement: function(error, element) {
							var elementInput = element[0];
							if(element[0]['id']==='archivo'){
								$('.lineas-archivo .extra-info').hide();
								error.appendTo( $('.lineas-archivo .add-lines-ge-mod' ));
								element.parent().addClass('error');

							}
						},
						success: function ($error) {
							if($error.length>0 && $('#archivo').val() != ''){
								$('.lineas-archivo .extra-info').hide();
								$('.lineas-archivo .file.error' ).removeClass('error');
				   				$error.remove();
							}
				        },
				        highlight : function(element, errorClass){
				        	var $element = $(element);
				        	if($element.attr('id')==='archivo' && $element.val() == ''){
				        		$('.lineas-archivo .extra-info').hide();
								$element.parent().addClass('error');
				        	}
				        },
				        submitHandler: function(form) {
							if(!formElementsModales['subirArchivo']['sending']){
								sendFormData(form);
					  		}
						}
				});

				checkGeneralValidForm($form);

				function sendFormData(form){
					formElementsModales['subirArchivo']['sending'] = true;
					$(form).find('button[type="submit"]').prop('disabled', true);

					var self = $(form).serialize();

					var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

					/**Quitar una vez en producción y aqui solo checamos si es una línea en development para mandar a otra liga**/
					var sendTo = urlPOST;
					urlPOST = checkDevelopmentPostHTML(urlPOST);

					$.post(  urlPOST , self )
					.done(function( data ) {
					  	Services.redPrivada.cargaMasivaCallSuccess(data, form, sendTo, showInvalidErrorArchivo );
						formElementsModales['subirArchivo']['sending'] = false;
					 })
					.fail(function( jqxhr, textStatus, error ) {
					  	//Mensaje de error del sistema
					  	Services.redPrivada.cargaMasivaCallFail(error, form);
					  	formElementsModales['subirArchivo']['sending'] = false;
					});
				}

				//Simular error de que es invalido el archivo
				function showInvalidErrorArchivo(){
					var msg = 'Este archivo está dañado o es ilegible, intenta con un nuevo archivo.';

					$('#archivo-invalido').remove();
					$('.lineas-archivo .extra-info').hide();
					$('.lineas-archivo .add-lines-ge-mod' ).append('<div class="error-dd error" id="archivo-invalido">'+msg+'</div>');
					$('#archivo').parent().addClass('error');

					$('#autogestion-form').find('button[type="submit"]').prop('disabled', true);
				}
		}


	}
	/**Inicio modal subir archivo**/

	/**Inicio modal confirmar eliminar**/
	function initmodalConfirmarEliminar(){

		modalConfirmarEliminar = new modalesTelcel($('#modal-confirmar-eliminar'),{
			onInit : function(){
				initActionsModalAuxiliar();
			},
			onReset : function(){

			},
			onOpen : function(){
				setModalData();

				var $form = $('#modal-confirmar-eliminar .form-ge-mod');

				$form.removeClass('success');
				$form.show();
			}
		});

		function setModalData(){

			$('#modal-confirmar-eliminar .txt-nombre').html(_modalConfirmarEliminar.nombre);
			$('#modal-confirmar-eliminar .txt-numero').html(_modalConfirmarEliminar.numero);
		}


		function initActionsModalAuxiliar(){

			$('#modal-confirmar-eliminar').on('click', '#btn-confirmar-eliminar', function(){
				postEliminarContacto();
			});

		}

		function postEliminarContacto(){
			var form = '#modal-confirmar-eliminar .form-ge-mod';

			if(!formElementsModales['eliminarContacto']['sending']){

				formElementsModales['eliminarContacto']['sending'] = true;

				generalLoadingIcon(form, true);

				var postURL = Services.apiURL.eliminarContacto();

				$.post( postURL , { delete: _modalConfirmarEliminar })
				  .done(function( json ) {
				  	Services.redPrivada.eliminarContactoSuccessCallback(json, form, _modalConfirmarEliminar, updateOnSuccess );
				  	formElementsModales['eliminarContacto']['sending'] = false;
				  	generalLoadingIcon(form, false);

				  })
				  .fail(function( jqxhr, textStatus, error ) {
				  	Services.redPrivada.eliminarContactoFailCallback(error, form);
				  	formElementsModales['eliminarContacto']['sending'] = false;
				  	generalLoadingIcon(form, false);
				});
			}
		}

		function updateOnSuccess(id, msg){
			$('#modal-confirmar-eliminar .api-msg-success').html('<p>'+msg+'</p>');

			var $element = $('#lt-'+id);

			if($element.length>0)
				$element.remove();

			currentTotal-=1;

			$('#current-lista-block .contactos-total').html(currentTotal);

			$('#btn-agregar-contacto').prop('disabled', !checkContactosLimit());
		}
	}
	/**Inicio modal confirmar eliminar**/

	/**Inicio modal editar contacto**/
	function initModalEditarContacto(){
		var $form = $('#modal-editar-contacto #form-editar-contacto');
		var $input = $form.find('input[name="email"]');
		var $lastElement = null;

		$input.bind('input', function(e){
			var $errori = $form.find('.general-error-tooltip');
			if($errori.length>0){
				$input.removeClass('error').removeClass('error-dd');
				$errori.remove();
			}
		});

		modalEditarContacto = new modalesTelcel($('#modal-editar-contacto'),{
			onInit : function(){
				validateFormEditarContacto();
			},
			onOpen : function(){
				setCurrentData();
			},
			onReset : function(){
				_modalEditarContacto = null;
				resetFormModal($('.form-editar-contacto #form-editar-contacto'), 'agregarContacto');
				$('#modal-editar-contacto .main-modal-header').show();
				$('#modal-editar-contacto .secondary-modal-header').hide();
			},
			onClose : function(){
				if($lastElement!=null && $lastElement.length>0){
					scrollToElement($lastElement);
					$lastElement = null;
				}

			}
		});

		function setCurrentData(){
			$('#modal-editar-contacto input[name="numero"]').val(_modalEditarContacto.numero);
			$('#modal-editar-contacto input[name="nombre"]').val(_modalEditarContacto.nombre);
		}

		function validateFormEditarContacto(){
			var $form = $('.form-editar-contacto #form-editar-contacto');

			disableSumbitButton($form, true);

			formElementsModales['editarContacto']['validator'] = $form.validate({
			ignore: "",
				onkeyup:  function(element) { $(element).valid(); },
				rules: {
					numero : {
						digits: true,
						minlength: 2,
						maxlength: 10,
						required : true
					}
				},
				messages: {
					numero: {
						required: "Ingresa un número de 2 a 10 dígitos",
						digits: "Ingresa un número de 2 a 10 dígitos",
						minlength: "Ingresa un número de 2 a 10 dígitos",
						maxlength: "Ingresa un número de 2 a 10 dígitos"
					}
				},
				errorClass : "error-dd error",
				submitHandler: function(form) {
					if(!formElementsModales['editarContacto']['sending']){
						formElementsModales['editarContacto']['sending'] = true;
						$(form).find('button[type="submit"]').prop('disabled', true);

						var self = $(form).serialize();
						var selfArray = $(form).serializeArray();

						generalLoadingIcon(form, true);

						var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

						$.post( urlPOST , { data: self })
						  .done(function( json ) {

							var elementData = {
								id : _modalEditarContacto.id,
								numero: selfArray[0].value
							};

							Services.redPrivada.editarContactoSuccessCallback(json, form, elementData, updateOnSuccess);
							formElementsModales['editarContacto']['sending'] = false;
							$(form).find('button[type="submit"]').prop('disabled', false);
						  	generalLoadingIcon(form, false);

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	Services.redPrivada.editarContactoFailCallback(error, form );
						  	formElementsModales['editarContacto']['sending'] = false;
						  	generalLoadingIcon(form, false);
						});
					}
				}
			});

			checkGeneralValidForm($form);
		}

		function updateOnSuccess(newdata, msg){
			$('#modal-editar-contacto .api-msg-success').html('<p>'+msg+'</p>');

			var $element = $('#lt-'+newdata.id);

			if($element.length>0){
				$element.find('input[name = "numero"]').val(newdata.numero);
				$element.find('input[name = "nombre"]').val(newdata.nombre);

				$element.data('meta', newdata);

				$lastElement = $element;
			}
		}

	}
	/**Fin modal editar contacto**/
	var listadoLimit = 10,
	currentTotal = 0;

	function initListadoContactosLimit(){

		var $main = $('#current-lista-block'),
		$table = $('.red-contactos-table-block .linea-batch');

		currentTotal = $table.length;

		if($main.length>0)
			listadoLimit = (typeof $main.data('limit') != undefined ? $main.data('limit') : 10 );

		$main.find('.contactos-limit').html(listadoLimit);

		$('#btn-agregar-contacto').prop('disabled', !checkContactosLimit());
	}

	function checkContactosLimit()
	{
		var valid = true;

		if(currentTotal == listadoLimit)
			valid = false;

		checkContactosLength(valid);

		return valid;
	}

	function checkContactosLength(){
		if(currentTotal==0){
			$('.red-contactos-table-block .general-table').addClass('hidden');
			$('#error-sin-contactos').removeClass('hidden');
		}
		else{
			$('#error-sin-contactos').addClass('hidden');
			$('.red-contactos-table-block .general-table').removeClass('hidden');
		}
	}

	/**Inicio modal agregar contacto**/
	function initModalAgregarContacto(){
		var $form = $('#modal-agregar-contacto #form-agregar-contacto');
		var $input = $form.find('input[name="email"]');

		$input.bind('input', function(e){
			var $errori = $form.find('.general-error-tooltip');
			if($errori.length>0){
				$input.removeClass('error').removeClass('error-dd');
				$errori.remove();
			}
		});

		modalAgregarContacto = new modalesTelcel($('#modal-agregar-contacto'),{
			onInit : function(){
				validateFormAgregarContacto();
			},
			onOpen : function(){


			},
			onReset : function(){
				resetFormModal($('.form-agregar-contacto #form-agregar-contacto'), 'agregarContacto');
				$('#modal-agregar-contacto .main-modal-header').show();
				$('#modal-agregar-contacto .secondary-modal-header').hide();
			}
		});


		function validateFormAgregarContacto(){
			var $form = $('.form-agregar-contacto #form-agregar-contacto');

			disableSumbitButton($form, true);

			formElementsModales['agregarContacto']['validator'] = $form.validate({
			ignore: "",
				onkeyup:  function(element) { $(element).valid(); },
				rules: {
					numero : {
						digits: true,
						minlength: 2,
						maxlength: 10,
						required : true
					}
				},
				messages: {
					numero: {
						required: "Ingresa un número de 2 a 10 dígitos",
						digits: "Ingresa un número de 2 a 10 dígitos",
						minlength: "Ingresa un número de 2 a 10 dígitos",
						maxlength: "Ingresa un número de 2 a 10 dígitos"
					}
				},
				errorClass : "error-dd error",
				submitHandler: function(form) {
					if(!formElementsModales['agregarContacto']['sending']){
						formElementsModales['agregarContacto']['sending'] = true;
						$(form).find('button[type="submit"]').prop('disabled', true);

						var self = $(form).serialize();
						var selfArray = $(form).serializeArray();

						generalLoadingIcon(form, true);

						var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

						$.post( urlPOST , { data: self })
						  .done(function( json ) {

							var elementData = {
								numero: selfArray[0].value
							};

							Services.redPrivada.agregarContactoSuccessCallback(json, form, elementData, updateOnSuccess);
							formElementsModales['agregarContacto']['sending'] = false;
							$(form).find('button[type="submit"]').prop('disabled', false);
						  	generalLoadingIcon(form, false);

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	Services.redPrivada.agregarContactoFailCallback(error, form );
						  	formElementsModales['agregarContacto']['sending'] = false;
						  	generalLoadingIcon(form, false);
						});
					}
				}
			});

			checkGeneralValidForm($form);
		}

		function updateOnSuccess(elementData, msg){
			$('#modal-agregar-contacto .api-msg-success').html('<p>'+msg+'</p>');

			var html = '<div class="col-sm-12 col-xs-12 center-block flexbox h-align-center linea-batch" id="lt-'+elementData.id+'" data-meta="{&quot;id&quot; : &quot;'+elementData.id+'&quot;, &quot;numero&quot; : &quot;'+elementData.numero+'&quot;}"> <div class="col-sm-12 col-xs-12 content-item-block padding-0"> <div class="col-sm-pr-85 col-xs-12 flexbox h-align-center v-align-center"> <label for="numero" class="input-label hidden-sm hidden-md hidden-lg">Número: </label> <div class="data-write"> <input type="text" name="numero" placeholder="10 dígitos" maxlength="10" value="'+elementData.numero+'"  disabled="/"> </div> </div> </div> <div class="btn-container"> <div class="edit-container col-sm-6 col-xs-6"> <span class="icon io-Admin btn-edit hidden-xs" title="Editar"></span> <span class="col-xs-12 btn-mobile btn-edit hidden-sm hidden-md hidden-lg">Editar</span> </div> <div class="delete-container col-sm-6 col-xs-6"> <span class="icon io-CloseSession btn-delete hidden-xs" title="Quitar"></span> <span class="col-xs-12 btn-mobile btn-delete hidden-sm hidden-md hidden-lg">Quitar</span> </div> </div> </div>';

				//Aquí se appendea el html y se hacen los cambios necesarios para correr las validaciones

				$('.red-contactos-table-block .table-main-block').append(html);

				currentTotal+=1;

				$('#current-lista-block .contactos-total').html(currentTotal);

				$('#btn-agregar-contacto').prop('disabled', !checkContactosLimit());
		}

	}
	/**Fin modal agregar contacto**/

	/**Inicio modal modificar contacto**/
	function initModalModificarContacto(){
		var $form = $('.form-modificar-contacto #form-modificar-contacto');
		var $input = $form.find('input[name="nombre"]');

		$input.bind('input', function(e){
			var $errori = $form.find('.general-error-tooltip');
			if($errori.length>0){
				$input.removeClass('error').removeClass('error-dd');
				$errori.remove();
			}
		});

		modalModificarContacto = new modalesTelcel($('#modal-modificar-contacto'),{
			onInit : function(){
				validateForm();
				resendFormError($('#modal-modificar-contacto'), $('#form-modificar-contacto'));
			},
			onReset : function(){
				removeGeneralError($('#modal-modificar-contacto'));
				//resetModalDesasociarCuentas();
			},
			onOpen : function(){
				resetFormModal($('.form-modificar-contacto #form-modificar-contacto'), 'modificarContacto');
				setModalData();
			},
			onClose : function(){

				//Cuando cierre el modal si quieren hacer refresh hay que descomentar esto
				// if(processCompleted)
				// 	location.reload();
			}
		});

		function setModalData(){
			var meta = currentModalData,
			$modal = $('#modal-modificar-contacto');



	  		$modal.find('input[name="email"]').val(meta.correoelectronico);
	  		$modal.find('input[name="nombre"]').val(meta.nombre);
	  		$modal.find('input[name="apellidos"]').val(meta.apellido);
	  		$modal.find('input[name="area"]').val(meta.area);
	  		$modal.find('input[name="puesto"]').val(meta.puesto);

	  		$modal.find('.lada-value').html(meta.lada);
	  		$modal.find('.telefono-value').html(meta.numero);
	  		$modal.find('.extension-value').html(meta.extension);
	  		$modal.find('.marcacion-value').html(meta.marcacion);


		}

		function validateForm(){

			var $form = $('.form-modificar-contacto #form-modificar-contacto');

			disableSumbitButton($form, true);
			//checkRequiredElements('#form-modificar-contacto');

			formElementsModales['modificarContacto']['validator'] = $form.validate({
			  rules: {
				nombre: {
					required: true,
					minlength: 3,
					grupoNombre : true,
			  		maxlength: 45
				},
				apellidos: {
					required: true,
					minlength: 3,
					grupoNombre : true,
			  		maxlength: 45
				},
				area: {
					required: true,
					minlength: 5,
					grupoNombre : true,
			  		maxlength: 45
				},
				puesto: {
					required: true,
					minlength: 5,
					grupoNombre : true,
			  		maxlength: 45
				},
				email : {
					required: true,
			  		email: true
				}
			  },
			  messages: {
				 nombre: {
				   required: "Es necesario ingresar un nombre para el contacto.",
				   minlength : " El nombre debe tener al menos 3 caracteres.",
				   grupoNombre : "El nombre no debe tener caracteres especiales, números y espacio al inicio o final.",
				   maxlength : "El nombre debe tener un máximo de 45 caracteres."
				 },
				 apellidos: {
				   required: "Es necesario ingresar un apellido para el contacto.",
				   minlength : " El apellido debe tener al menos 3 caracteres.",
				   grupoNombre : "El apellido no debe tener caracteres especiales, números y espacio al inicio o final.",
				   maxlength : "El apellido debe tener un máximo de 45 caracteres."
				 },
				 area: {
				   required: "Es necesario ingresar un área para el contacto.",
				   minlength : " El área debe tener al menos 5 caracteres.",
				   grupoNombre : "El área no debe tener caracteres especiales, números y espacio al inicio o final.",
				   maxlength : "El área debe tener un máximo de 45 caracteres."
				 },
				 puesto: {
				   required: "Es necesario ingresar un puesto para el contacto.",
				   minlength : " El puesto debe tener al menos 5 caracteres.",
				   grupoNombre : "El puesto no debe tener caracteres especiales, números y espacio al inicio o final.",
				   maxlength : "El puesto debe tener un máximo de 45 caracteres."
				 },
				 email: {
				 	required: "Ingresa tu correo electrónico.",
			   		email: "Ingresa un correo electrónico válido."
				 }
			   },
			   errorClass : "error-dd error",
				submitHandler: function(form) {
					if(!formElementsModales['modificarContacto']['sending']){

						formElementsModales['modificarContacto']['sending'] = true;

						$(form).find('button[type="submit"]').prop('disabled', true);

						var self = $(form).serialize();
						var selfArray = $(form).serializeArray();

						generalLoadingIcon(form, true);

						var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

						$.post( urlPOST , { data: self, id: currentModalData.id })
						  .done(function( json ) {

						  	Services.redPrivada.modificarContactoSuccessCallback(json, form, updateOnSuccess);
						  	$(form).find('button[type="submit"]').prop('disabled', false);
						  	formElementsModales['modificarContacto']['sending'] = false;
						  	generalLoadingIcon(form, false);

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	//Mensaje de error del SISTEMA

						  	Services.redPrivada.modificarContactoFailCallback(error, form );

						  	formElementsModales['modificarContacto']['sending'] = false;
						  	generalLoadingIcon(form, false);
						});

					}

				}
			});

			checkGeneralValidForm($form);


		}


		function updateOnSuccess(msg){
			$('#modal-modificar-contacto .api-msg-success').html('<p>'+msg+'</p>');

		}

	}
	/**Fin modal modificar contacto**/

	/**Inicio modal marcación corta**/
	function initModalMarcacionCorta(){
		var processCompleted = false;
		var $form = $('.form-marcacion-corta #form-marcacion-corta');

		modalMarcacionCorta = new modalesTelcel($('#modal-marcacion-corta'),{
			onInit : function(){
				validateForm();
				resendFormError($('#modal-marcacion-corta'), $('#form-marcacion-corta'));
			},
			onReset : function(){
				removeGeneralError($('#modal-marcacion-corta'));
				//resetModalDesasociarCuentas();
			},
			onOpen : function(){
				processCompleted = false;
				resetFormModal($('.form-marcacion-corta #form-marcacion-corta'), 'marcacionCorta');
				setModalData();
			},
			onClose : function(){

				//Cuando cierre el modal si quieren hacer refresh hay que descomentar esto
				// if(processCompleted)
				// 	location.reload();
			}
		});

		function setModalData(){
			var meta = currentModalData,
			$modal = $('#modal-marcacion-corta');

	  		$modal.find('input[name="marcacion"]').val(meta.marcacion);

	  		$modal.find('.nombre-value').html(meta.asignado);
	  		$modal.find('.telefono-value').html(meta.numero);
	  		$modal.find('.extension-value').html(meta.extension);


		}



		function validateForm(){

			var $form = $('.form-marcacion-corta #form-marcacion-corta');

			disableSumbitButton($form, true);
			//checkRequiredElements('#form-marcacion-corta');

			formElementsModales['marcacionCorta']['validator'] = $form.validate({
			  rules: {
				marcacion: {
					required: true,
					minlength: 4,
					digits : true,
			  		maxlength: 4
				}
			  },
			  messages: {
				 nombre: {
				   required: "Es necesario ingresar un valor para la marcación corta.",
				   minlength : " La marcación debe tener al menos 4 caracteres.",
				   grupoNombre : "La marcación solo acepta números.",
				   maxlength : "La marcación debe tener un máximo de 4 caracteres."
				 }
			   },
			   errorClass : "error-dd error",
				submitHandler: function(form) {
					if(!formElementsModales['marcacionCorta']['sending']){

						formElementsModales['marcacionCorta']['sending'] = true;

						$(form).find('button[type="submit"]').prop('disabled', true);

						var self = $(form).serialize();
						var selfArray = $(form).serializeArray();

						generalLoadingIcon(form, true);

						var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

						$.post( urlPOST , { data: self, id: currentModalData.id })
						  .done(function( json ) {

						  	Services.redPrivada.marcacionCortaSuccessCallback(json, form, updateOnSuccess);
						  	//$(form).find('button[type="submit"]').prop('disabled', false);
						  	formElementsModales['marcacionCorta']['sending'] = false;
						  	generalLoadingIcon(form, false);
						  	processCompleted = true;

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	//Mensaje de error del SISTEMA

						  	Services.redPrivada.marcacionCortaFailCallback(error, form );
						  	formElementsModales['marcacionCorta']['sending'] = false;
						  	generalLoadingIcon(form, false);
						  	processCompleted = true;
						});

					}

				}
			});

			checkGeneralValidForm($form);


		}


		function updateOnSuccess(msg){
			$('#modal-marcacion-corta .api-msg-success').html('<p>'+msg+'</p>');

		}

	}
	/**Fin modal marcación corta**/

	/**Inicio modal modificar desvio**/
	function initModalModificarDesvio(){
		var processCompleted = false;
		var $form = $('.form-modificar-desvio #form-modificar-desvio');

		modalModificarDesvio = new modalesTelcel($('#modal-modificar-desvio'),{
			onInit : function(){
				validateForm();
				resendFormError($('#modal-modificar-desvio'), $('#form-modificar-desvio'));
			},
			onReset : function(){
				removeGeneralError($('#modal-modificar-desvio'));
				//resetModalDesasociarCuentas();
			},
			onOpen : function(){
				processCompleted = false;
				resetFormModal($('.form-modificar-desvio #form-modificar-desvio'), 'modificarDesvio');
				setModalData();
			},
			onClose : function(){

				//Cuando cierre el modal si quieren hacer refresh hay que descomentar esto
				// if(processCompleted)
				// 	location.reload();
			}
		});

		function setModalData(){
			var meta = currentModalData,
			$modal = $('#modal-modificar-desvio');

	  		$modal.find('input[name="desvio1"]').val(meta.desvio1);
	  		$modal.find('input[name="desvio2"]').val(meta.desvio2);

	  		$modal.find('.telefono-value').html(meta.numero);
	  		$modal.find('.nombre-value').html(meta.asignado);

		}

		function validateForm(){

			var $form = $('.form-modificar-desvio #form-modificar-desvio');

			disableSumbitButton($form, true);

			formElementsModales['modificarDesvio']['validator'] = $form.validate({
			  rules: {
				desvio1: {
					required: true,
					minlength: 10,
					digits : true,
			  		maxlength: 10
				},
				desvio2: {
					required: true,
					minlength: 10,
					digits : true,
			  		maxlength: 10
				}
			  },
			  messages: {
				 desvio1: {
				   required: "Ingresa un desvío de llamada.",
					digits: "Ingresa un desvío de llamada válido.",
					minlength: "Ingresa un desvío de llamada de 10 dígitos.",
					maxlength: "Ingresa un desvío de llamada de 10 dígitos."
				 },
				 desvio2: {
				   required: "Ingresa un desvío de llamada.",
					digits: "Ingresa un desvío de llamada válido.",
					minlength: "Ingresa un desvío de llamada de 10 dígitos.",
					maxlength: "Ingresa un desvío de llamada de 10 dígitos."
				 }
			   },
			   errorClass : "error-dd error",
				submitHandler: function(form) {
					if(!formElementsModales['modificarDesvio']['sending']){

						formElementsModales['modificarDesvio']['sending'] = true;

						$(form).find('button[type="submit"]').prop('disabled', true);

						var self = $(form).serialize();
						var selfArray = $(form).serializeArray();

						generalLoadingIcon(form, true);

						var urlPOST = ( $(form).prop('action') == '' ? postURL : $(form).prop('action') ) ;

						$.post( urlPOST , { data: self, id: currentModalData.id })
						  .done(function( json ) {

						  	Services.redPrivada.modificarDesvioSuccessCallback(json, form, updateOnSuccess );
						  	formElementsModales['modificarDesvio']['sending'] = false;
						  	generalLoadingIcon(form, false);
						  	processCompleted = true;

						  })
						  .fail(function( jqxhr, textStatus, error ) {
						  	Services.redPrivada.modificarDesvioFailCallback(error, form );

						  	formElementsModales['modificarDesvio']['sending'] = false;
						  	generalLoadingIcon(form, false);
						  	processCompleted = true;
						});

					}

				}
			});

			checkGeneralValidForm($form);


		}


		function updateOnSuccess(msg){
			$('#modal-modificar-desvio .api-msg-success').html('<p>'+msg+'</p>');

		}
	}
	/**Fin modal modificar desvio**/

	function setBasicInfoModal(item){
		currentModalData = item;
		$('.modal-mte .alias-text, .modal-mte .txt-grupo').html(item.asignado);
	}

	function resetFormModal($form, form){
		$form.find('.general-error-tooltip').remove();
		$form.find("input[type=text], input[type=email], input[type=password], select").val("");
		$form.find("input[type=text], input[type=email], input[type=password], select").removeClass("error").removeClass("error-dd");
		$form.find('button[type="submit"]').prop('disabled', true);
		$form.removeClass('success').removeClass('error').show();

		if(formElementsModales[form]['validator']){
			formElementsModales[form]['validator'].resetForm();
		}
	}

	function removeGeneralError($modal){
		$modal.find('.system-error-msg').remove();
		$modal.find('.has-system-error').removeClass('has-system-error');
	}

	function resendFormError($modal, $form){
		$modal.on('click', '.btn-rsend-general', function(){
			removeGeneralError($modal);
			$form.submit();
		});
	}

	return{
		inicializar : init
	}

})();

if($('.red-privada-block').length>0 )
	redPrivada.inicializar();
function unbindButtonsAdmin(){

	var $buttons = $('.disabled-admin-mode');
	$buttons.off("click");
	$buttons.prop('type', 'button');
	$buttons.unbind('click');

	$buttons.on('click', function(e){
		e.preventDefault();
		return false;
	});
}


function addModalAdmin(){

	if(is_admin_mode() && is_first_fime()){
		var modal = '<div id="gestion-ejecutivo-ver-admin" class="fixed"> <div class="container"> <div class="row"> <div class="col-sm-pr-100 col-xs-12 center-block flexbox v-align-center main-block"> <div class="col-sm-pr-20 col-xs-2 flexbox h-align-center regresar-container"> <a href="gestion-ejecutivos-1.html" class="btn-like-a"><span class="icon i-angle-left"></span><span class="hidden-xs hidden-sm">Salir de modo Administrador</span></a> </div> <div class="col-sm-pr-80 col-xs-10 msg-container"> <p class="col-xs-12">El ingreso en modo administrador de [Empresa] tiene funciones limitadas de autogestión las cuales están disponibles para el Administrador de la empresa.</p> <span class="close-msg"> <span class="icon io-Close"></span> </span> </div> </div> </div> </div> </div>',
		$container = $('body').find('#info-content');

		$container.prepend( modal );

		initActionAdmin();

	}

}

function initActionAdmin(){
	var $msg = $('#gestion-ejecutivo-ver-admin');
	$msg.on('click', '.close-msg', function(){
		$msg.hide();
	});
}

function sinNotificaciones(){
	$('#m-notificacion .number-n').remove();
	var html = '<div class="notif-bloq sin-notificaciones-block"> <div class="row"> <div class="col-xs-12 col-sm-8 center-block inner-nb no-margin-bottom"> <span class="icon io-Alert2"></span> <p class="only-p">No existen notificaciones hasta el momento.</p> </div> </div> </div>';

	$('#main-header .notify-block').addClass('sin-notificaciones');
	$('#main-header .notify-block .double-triangle-block').html(html);

}

addModalAdmin();

window.onload = function () {
	unbindButtonsAdmin();
	var hash = window.location.hash;

	if(hash=='#sin-notificaciones')
		sinNotificaciones();

	else{
		if(typeof menuComponent != 'undefined')
			menuComponent.updateNotificacionesCounter(4);
	}
}
